// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team01/ent/annotation"
)

// Annotation is the model entity for the Annotation schema.
type Annotation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Messages holds the value of the "messages" field.
	Messages string `json:"messages,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AnnotationQuery when eager-loading is set.
	Edges AnnotationEdges `json:"edges"`
}

// AnnotationEdges holds the relations/edges for other nodes in the graph.
type AnnotationEdges struct {
	// Dispensemedicine holds the value of the dispensemedicine edge.
	Dispensemedicine []*DispenseMedicine
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DispensemedicineOrErr returns the Dispensemedicine value or an error if the edge
// was not loaded in eager-loading.
func (e AnnotationEdges) DispensemedicineOrErr() ([]*DispenseMedicine, error) {
	if e.loadedTypes[0] {
		return e.Dispensemedicine, nil
	}
	return nil, &NotLoadedError{edge: "dispensemedicine"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Annotation) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // messages
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Annotation fields.
func (a *Annotation) assignValues(values ...interface{}) error {
	if m, n := len(values), len(annotation.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	a.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field messages", values[0])
	} else if value.Valid {
		a.Messages = value.String
	}
	return nil
}

// QueryDispensemedicine queries the dispensemedicine edge of the Annotation.
func (a *Annotation) QueryDispensemedicine() *DispenseMedicineQuery {
	return (&AnnotationClient{config: a.config}).QueryDispensemedicine(a)
}

// Update returns a builder for updating this Annotation.
// Note that, you need to call Annotation.Unwrap() before calling this method, if this Annotation
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Annotation) Update() *AnnotationUpdateOne {
	return (&AnnotationClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (a *Annotation) Unwrap() *Annotation {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Annotation is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Annotation) String() string {
	var builder strings.Builder
	builder.WriteString("Annotation(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", messages=")
	builder.WriteString(a.Messages)
	builder.WriteByte(')')
	return builder.String()
}

// Annotations is a parsable slice of Annotation.
type Annotations []*Annotation

func (a Annotations) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}

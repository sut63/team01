// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team01/ent/annotation"
	"github.com/sut63/team01/ent/dispensemedicine"
)

// AnnotationCreate is the builder for creating a Annotation entity.
type AnnotationCreate struct {
	config
	mutation *AnnotationMutation
	hooks    []Hook
}

// SetMessages sets the messages field.
func (ac *AnnotationCreate) SetMessages(s string) *AnnotationCreate {
	ac.mutation.SetMessages(s)
	return ac
}

// AddDispensemedicineIDs adds the dispensemedicine edge to DispenseMedicine by ids.
func (ac *AnnotationCreate) AddDispensemedicineIDs(ids ...int) *AnnotationCreate {
	ac.mutation.AddDispensemedicineIDs(ids...)
	return ac
}

// AddDispensemedicine adds the dispensemedicine edges to DispenseMedicine.
func (ac *AnnotationCreate) AddDispensemedicine(d ...*DispenseMedicine) *AnnotationCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ac.AddDispensemedicineIDs(ids...)
}

// Mutation returns the AnnotationMutation object of the builder.
func (ac *AnnotationCreate) Mutation() *AnnotationMutation {
	return ac.mutation
}

// Save creates the Annotation in the database.
func (ac *AnnotationCreate) Save(ctx context.Context) (*Annotation, error) {
	if _, ok := ac.mutation.Messages(); !ok {
		return nil, &ValidationError{Name: "messages", err: errors.New("ent: missing required field \"messages\"")}
	}
	if v, ok := ac.mutation.Messages(); ok {
		if err := annotation.MessagesValidator(v); err != nil {
			return nil, &ValidationError{Name: "messages", err: fmt.Errorf("ent: validator failed for field \"messages\": %w", err)}
		}
	}
	var (
		err  error
		node *Annotation
	)
	if len(ac.hooks) == 0 {
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AnnotationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AnnotationCreate) SaveX(ctx context.Context) *Annotation {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ac *AnnotationCreate) sqlSave(ctx context.Context) (*Annotation, error) {
	a, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	a.ID = int(id)
	return a, nil
}

func (ac *AnnotationCreate) createSpec() (*Annotation, *sqlgraph.CreateSpec) {
	var (
		a     = &Annotation{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: annotation.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: annotation.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.Messages(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: annotation.FieldMessages,
		})
		a.Messages = value
	}
	if nodes := ac.mutation.DispensemedicineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   annotation.DispensemedicineTable,
			Columns: []string{annotation.DispensemedicineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dispensemedicine.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return a, _spec
}

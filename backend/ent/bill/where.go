// Code generated by entc, DO NOT EDIT.

package bill

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/sut63/team01/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// Annotation applies equality check predicate on the "annotation" field. It's identical to AnnotationEQ.
func Annotation(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnnotation), v))
	})
}

// Payer applies equality check predicate on the "payer" field. It's identical to PayerEQ.
func Payer(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayer), v))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int) predicate.Bill {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bill(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int) predicate.Bill {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bill(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	})
}

// AnnotationEQ applies the EQ predicate on the "annotation" field.
func AnnotationEQ(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnnotation), v))
	})
}

// AnnotationNEQ applies the NEQ predicate on the "annotation" field.
func AnnotationNEQ(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAnnotation), v))
	})
}

// AnnotationIn applies the In predicate on the "annotation" field.
func AnnotationIn(vs ...string) predicate.Bill {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bill(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAnnotation), v...))
	})
}

// AnnotationNotIn applies the NotIn predicate on the "annotation" field.
func AnnotationNotIn(vs ...string) predicate.Bill {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bill(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAnnotation), v...))
	})
}

// AnnotationGT applies the GT predicate on the "annotation" field.
func AnnotationGT(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAnnotation), v))
	})
}

// AnnotationGTE applies the GTE predicate on the "annotation" field.
func AnnotationGTE(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAnnotation), v))
	})
}

// AnnotationLT applies the LT predicate on the "annotation" field.
func AnnotationLT(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAnnotation), v))
	})
}

// AnnotationLTE applies the LTE predicate on the "annotation" field.
func AnnotationLTE(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAnnotation), v))
	})
}

// AnnotationContains applies the Contains predicate on the "annotation" field.
func AnnotationContains(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAnnotation), v))
	})
}

// AnnotationHasPrefix applies the HasPrefix predicate on the "annotation" field.
func AnnotationHasPrefix(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAnnotation), v))
	})
}

// AnnotationHasSuffix applies the HasSuffix predicate on the "annotation" field.
func AnnotationHasSuffix(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAnnotation), v))
	})
}

// AnnotationEqualFold applies the EqualFold predicate on the "annotation" field.
func AnnotationEqualFold(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAnnotation), v))
	})
}

// AnnotationContainsFold applies the ContainsFold predicate on the "annotation" field.
func AnnotationContainsFold(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAnnotation), v))
	})
}

// PayerEQ applies the EQ predicate on the "payer" field.
func PayerEQ(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayer), v))
	})
}

// PayerNEQ applies the NEQ predicate on the "payer" field.
func PayerNEQ(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayer), v))
	})
}

// PayerIn applies the In predicate on the "payer" field.
func PayerIn(vs ...string) predicate.Bill {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bill(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPayer), v...))
	})
}

// PayerNotIn applies the NotIn predicate on the "payer" field.
func PayerNotIn(vs ...string) predicate.Bill {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bill(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPayer), v...))
	})
}

// PayerGT applies the GT predicate on the "payer" field.
func PayerGT(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayer), v))
	})
}

// PayerGTE applies the GTE predicate on the "payer" field.
func PayerGTE(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayer), v))
	})
}

// PayerLT applies the LT predicate on the "payer" field.
func PayerLT(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayer), v))
	})
}

// PayerLTE applies the LTE predicate on the "payer" field.
func PayerLTE(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayer), v))
	})
}

// PayerContains applies the Contains predicate on the "payer" field.
func PayerContains(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPayer), v))
	})
}

// PayerHasPrefix applies the HasPrefix predicate on the "payer" field.
func PayerHasPrefix(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPayer), v))
	})
}

// PayerHasSuffix applies the HasSuffix predicate on the "payer" field.
func PayerHasSuffix(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPayer), v))
	})
}

// PayerEqualFold applies the EqualFold predicate on the "payer" field.
func PayerEqualFold(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPayer), v))
	})
}

// PayerContainsFold applies the ContainsFold predicate on the "payer" field.
func PayerContainsFold(v string) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPayer), v))
	})
}

// HasPharmacists applies the HasEdge predicate on the "pharmacists" edge.
func HasPharmacists() predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PharmacistsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PharmacistsTable, PharmacistsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPharmacistsWith applies the HasEdge predicate on the "pharmacists" edge with a given conditions (other predicates).
func HasPharmacistsWith(preds ...predicate.Pharmacist) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PharmacistsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PharmacistsTable, PharmacistsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPayments applies the HasEdge predicate on the "payments" edge.
func HasPayments() predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PaymentsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PaymentsTable, PaymentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentsWith applies the HasEdge predicate on the "payments" edge with a given conditions (other predicates).
func HasPaymentsWith(preds ...predicate.Payment) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PaymentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PaymentsTable, PaymentsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDispenseMedicines applies the HasEdge predicate on the "dispenseMedicines" edge.
func HasDispenseMedicines() predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DispenseMedicinesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, DispenseMedicinesTable, DispenseMedicinesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDispenseMedicinesWith applies the HasEdge predicate on the "dispenseMedicines" edge with a given conditions (other predicates).
func HasDispenseMedicinesWith(preds ...predicate.DispenseMedicine) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DispenseMedicinesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, DispenseMedicinesTable, DispenseMedicinesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Bill) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Bill) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bill) predicate.Bill {
	return predicate.Bill(func(s *sql.Selector) {
		p(s.Not())
	})
}

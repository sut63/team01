// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/sut63/team01/ent/migrate"

	"github.com/sut63/team01/ent/annotation"
	"github.com/sut63/team01/ent/bill"
	"github.com/sut63/team01/ent/company"
	"github.com/sut63/team01/ent/dispensemedicine"
	"github.com/sut63/team01/ent/doctor"
	"github.com/sut63/team01/ent/drugallergy"
	"github.com/sut63/team01/ent/levelofdangerous"
	"github.com/sut63/team01/ent/medicine"
	"github.com/sut63/team01/ent/medicinetype"
	"github.com/sut63/team01/ent/order"
	"github.com/sut63/team01/ent/patientinfo"
	"github.com/sut63/team01/ent/payment"
	"github.com/sut63/team01/ent/pharmacist"
	"github.com/sut63/team01/ent/positioninpharmacist"
	"github.com/sut63/team01/ent/prescription"
	"github.com/sut63/team01/ent/status"
	"github.com/sut63/team01/ent/unitofmedicine"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Annotation is the client for interacting with the Annotation builders.
	Annotation *AnnotationClient
	// Bill is the client for interacting with the Bill builders.
	Bill *BillClient
	// Company is the client for interacting with the Company builders.
	Company *CompanyClient
	// DispenseMedicine is the client for interacting with the DispenseMedicine builders.
	DispenseMedicine *DispenseMedicineClient
	// Doctor is the client for interacting with the Doctor builders.
	Doctor *DoctorClient
	// DrugAllergy is the client for interacting with the DrugAllergy builders.
	DrugAllergy *DrugAllergyClient
	// LevelOfDangerous is the client for interacting with the LevelOfDangerous builders.
	LevelOfDangerous *LevelOfDangerousClient
	// Medicine is the client for interacting with the Medicine builders.
	Medicine *MedicineClient
	// MedicineType is the client for interacting with the MedicineType builders.
	MedicineType *MedicineTypeClient
	// Order is the client for interacting with the Order builders.
	Order *OrderClient
	// PatientInfo is the client for interacting with the PatientInfo builders.
	PatientInfo *PatientInfoClient
	// Payment is the client for interacting with the Payment builders.
	Payment *PaymentClient
	// Pharmacist is the client for interacting with the Pharmacist builders.
	Pharmacist *PharmacistClient
	// PositionInPharmacist is the client for interacting with the PositionInPharmacist builders.
	PositionInPharmacist *PositionInPharmacistClient
	// Prescription is the client for interacting with the Prescription builders.
	Prescription *PrescriptionClient
	// Status is the client for interacting with the Status builders.
	Status *StatusClient
	// UnitOfMedicine is the client for interacting with the UnitOfMedicine builders.
	UnitOfMedicine *UnitOfMedicineClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Annotation = NewAnnotationClient(c.config)
	c.Bill = NewBillClient(c.config)
	c.Company = NewCompanyClient(c.config)
	c.DispenseMedicine = NewDispenseMedicineClient(c.config)
	c.Doctor = NewDoctorClient(c.config)
	c.DrugAllergy = NewDrugAllergyClient(c.config)
	c.LevelOfDangerous = NewLevelOfDangerousClient(c.config)
	c.Medicine = NewMedicineClient(c.config)
	c.MedicineType = NewMedicineTypeClient(c.config)
	c.Order = NewOrderClient(c.config)
	c.PatientInfo = NewPatientInfoClient(c.config)
	c.Payment = NewPaymentClient(c.config)
	c.Pharmacist = NewPharmacistClient(c.config)
	c.PositionInPharmacist = NewPositionInPharmacistClient(c.config)
	c.Prescription = NewPrescriptionClient(c.config)
	c.Status = NewStatusClient(c.config)
	c.UnitOfMedicine = NewUnitOfMedicineClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Annotation:           NewAnnotationClient(cfg),
		Bill:                 NewBillClient(cfg),
		Company:              NewCompanyClient(cfg),
		DispenseMedicine:     NewDispenseMedicineClient(cfg),
		Doctor:               NewDoctorClient(cfg),
		DrugAllergy:          NewDrugAllergyClient(cfg),
		LevelOfDangerous:     NewLevelOfDangerousClient(cfg),
		Medicine:             NewMedicineClient(cfg),
		MedicineType:         NewMedicineTypeClient(cfg),
		Order:                NewOrderClient(cfg),
		PatientInfo:          NewPatientInfoClient(cfg),
		Payment:              NewPaymentClient(cfg),
		Pharmacist:           NewPharmacistClient(cfg),
		PositionInPharmacist: NewPositionInPharmacistClient(cfg),
		Prescription:         NewPrescriptionClient(cfg),
		Status:               NewStatusClient(cfg),
		UnitOfMedicine:       NewUnitOfMedicineClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:               cfg,
		Annotation:           NewAnnotationClient(cfg),
		Bill:                 NewBillClient(cfg),
		Company:              NewCompanyClient(cfg),
		DispenseMedicine:     NewDispenseMedicineClient(cfg),
		Doctor:               NewDoctorClient(cfg),
		DrugAllergy:          NewDrugAllergyClient(cfg),
		LevelOfDangerous:     NewLevelOfDangerousClient(cfg),
		Medicine:             NewMedicineClient(cfg),
		MedicineType:         NewMedicineTypeClient(cfg),
		Order:                NewOrderClient(cfg),
		PatientInfo:          NewPatientInfoClient(cfg),
		Payment:              NewPaymentClient(cfg),
		Pharmacist:           NewPharmacistClient(cfg),
		PositionInPharmacist: NewPositionInPharmacistClient(cfg),
		Prescription:         NewPrescriptionClient(cfg),
		Status:               NewStatusClient(cfg),
		UnitOfMedicine:       NewUnitOfMedicineClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Annotation.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Annotation.Use(hooks...)
	c.Bill.Use(hooks...)
	c.Company.Use(hooks...)
	c.DispenseMedicine.Use(hooks...)
	c.Doctor.Use(hooks...)
	c.DrugAllergy.Use(hooks...)
	c.LevelOfDangerous.Use(hooks...)
	c.Medicine.Use(hooks...)
	c.MedicineType.Use(hooks...)
	c.Order.Use(hooks...)
	c.PatientInfo.Use(hooks...)
	c.Payment.Use(hooks...)
	c.Pharmacist.Use(hooks...)
	c.PositionInPharmacist.Use(hooks...)
	c.Prescription.Use(hooks...)
	c.Status.Use(hooks...)
	c.UnitOfMedicine.Use(hooks...)
}

// AnnotationClient is a client for the Annotation schema.
type AnnotationClient struct {
	config
}

// NewAnnotationClient returns a client for the Annotation from the given config.
func NewAnnotationClient(c config) *AnnotationClient {
	return &AnnotationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `annotation.Hooks(f(g(h())))`.
func (c *AnnotationClient) Use(hooks ...Hook) {
	c.hooks.Annotation = append(c.hooks.Annotation, hooks...)
}

// Create returns a create builder for Annotation.
func (c *AnnotationClient) Create() *AnnotationCreate {
	mutation := newAnnotationMutation(c.config, OpCreate)
	return &AnnotationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Annotation.
func (c *AnnotationClient) Update() *AnnotationUpdate {
	mutation := newAnnotationMutation(c.config, OpUpdate)
	return &AnnotationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AnnotationClient) UpdateOne(a *Annotation) *AnnotationUpdateOne {
	mutation := newAnnotationMutation(c.config, OpUpdateOne, withAnnotation(a))
	return &AnnotationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AnnotationClient) UpdateOneID(id int) *AnnotationUpdateOne {
	mutation := newAnnotationMutation(c.config, OpUpdateOne, withAnnotationID(id))
	return &AnnotationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Annotation.
func (c *AnnotationClient) Delete() *AnnotationDelete {
	mutation := newAnnotationMutation(c.config, OpDelete)
	return &AnnotationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AnnotationClient) DeleteOne(a *Annotation) *AnnotationDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AnnotationClient) DeleteOneID(id int) *AnnotationDeleteOne {
	builder := c.Delete().Where(annotation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AnnotationDeleteOne{builder}
}

// Create returns a query builder for Annotation.
func (c *AnnotationClient) Query() *AnnotationQuery {
	return &AnnotationQuery{config: c.config}
}

// Get returns a Annotation entity by its id.
func (c *AnnotationClient) Get(ctx context.Context, id int) (*Annotation, error) {
	return c.Query().Where(annotation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AnnotationClient) GetX(ctx context.Context, id int) *Annotation {
	a, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return a
}

// QueryDispensemedicine queries the dispensemedicine edge of a Annotation.
func (c *AnnotationClient) QueryDispensemedicine(a *Annotation) *DispenseMedicineQuery {
	query := &DispenseMedicineQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(annotation.Table, annotation.FieldID, id),
			sqlgraph.To(dispensemedicine.Table, dispensemedicine.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, annotation.DispensemedicineTable, annotation.DispensemedicineColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AnnotationClient) Hooks() []Hook {
	return c.hooks.Annotation
}

// BillClient is a client for the Bill schema.
type BillClient struct {
	config
}

// NewBillClient returns a client for the Bill from the given config.
func NewBillClient(c config) *BillClient {
	return &BillClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bill.Hooks(f(g(h())))`.
func (c *BillClient) Use(hooks ...Hook) {
	c.hooks.Bill = append(c.hooks.Bill, hooks...)
}

// Create returns a create builder for Bill.
func (c *BillClient) Create() *BillCreate {
	mutation := newBillMutation(c.config, OpCreate)
	return &BillCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Bill.
func (c *BillClient) Update() *BillUpdate {
	mutation := newBillMutation(c.config, OpUpdate)
	return &BillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillClient) UpdateOne(b *Bill) *BillUpdateOne {
	mutation := newBillMutation(c.config, OpUpdateOne, withBill(b))
	return &BillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillClient) UpdateOneID(id int) *BillUpdateOne {
	mutation := newBillMutation(c.config, OpUpdateOne, withBillID(id))
	return &BillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Bill.
func (c *BillClient) Delete() *BillDelete {
	mutation := newBillMutation(c.config, OpDelete)
	return &BillDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BillClient) DeleteOne(b *Bill) *BillDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BillClient) DeleteOneID(id int) *BillDeleteOne {
	builder := c.Delete().Where(bill.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillDeleteOne{builder}
}

// Create returns a query builder for Bill.
func (c *BillClient) Query() *BillQuery {
	return &BillQuery{config: c.config}
}

// Get returns a Bill entity by its id.
func (c *BillClient) Get(ctx context.Context, id int) (*Bill, error) {
	return c.Query().Where(bill.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillClient) GetX(ctx context.Context, id int) *Bill {
	b, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return b
}

// QueryPharmacists queries the pharmacists edge of a Bill.
func (c *BillClient) QueryPharmacists(b *Bill) *PharmacistQuery {
	query := &PharmacistQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bill.Table, bill.FieldID, id),
			sqlgraph.To(pharmacist.Table, pharmacist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bill.PharmacistsTable, bill.PharmacistsColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPayments queries the payments edge of a Bill.
func (c *BillClient) QueryPayments(b *Bill) *PaymentQuery {
	query := &PaymentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bill.Table, bill.FieldID, id),
			sqlgraph.To(payment.Table, payment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bill.PaymentsTable, bill.PaymentsColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDispenseMedicines queries the dispenseMedicines edge of a Bill.
func (c *BillClient) QueryDispenseMedicines(b *Bill) *DispenseMedicineQuery {
	query := &DispenseMedicineQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bill.Table, bill.FieldID, id),
			sqlgraph.To(dispensemedicine.Table, dispensemedicine.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, bill.DispenseMedicinesTable, bill.DispenseMedicinesColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BillClient) Hooks() []Hook {
	return c.hooks.Bill
}

// CompanyClient is a client for the Company schema.
type CompanyClient struct {
	config
}

// NewCompanyClient returns a client for the Company from the given config.
func NewCompanyClient(c config) *CompanyClient {
	return &CompanyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `company.Hooks(f(g(h())))`.
func (c *CompanyClient) Use(hooks ...Hook) {
	c.hooks.Company = append(c.hooks.Company, hooks...)
}

// Create returns a create builder for Company.
func (c *CompanyClient) Create() *CompanyCreate {
	mutation := newCompanyMutation(c.config, OpCreate)
	return &CompanyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Company.
func (c *CompanyClient) Update() *CompanyUpdate {
	mutation := newCompanyMutation(c.config, OpUpdate)
	return &CompanyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CompanyClient) UpdateOne(co *Company) *CompanyUpdateOne {
	mutation := newCompanyMutation(c.config, OpUpdateOne, withCompany(co))
	return &CompanyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CompanyClient) UpdateOneID(id int) *CompanyUpdateOne {
	mutation := newCompanyMutation(c.config, OpUpdateOne, withCompanyID(id))
	return &CompanyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Company.
func (c *CompanyClient) Delete() *CompanyDelete {
	mutation := newCompanyMutation(c.config, OpDelete)
	return &CompanyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CompanyClient) DeleteOne(co *Company) *CompanyDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CompanyClient) DeleteOneID(id int) *CompanyDeleteOne {
	builder := c.Delete().Where(company.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CompanyDeleteOne{builder}
}

// Create returns a query builder for Company.
func (c *CompanyClient) Query() *CompanyQuery {
	return &CompanyQuery{config: c.config}
}

// Get returns a Company entity by its id.
func (c *CompanyClient) Get(ctx context.Context, id int) (*Company, error) {
	return c.Query().Where(company.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CompanyClient) GetX(ctx context.Context, id int) *Company {
	co, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return co
}

// QueryOrdercompany queries the ordercompany edge of a Company.
func (c *CompanyClient) QueryOrdercompany(co *Company) *OrderQuery {
	query := &OrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, company.OrdercompanyTable, company.OrdercompanyColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CompanyClient) Hooks() []Hook {
	return c.hooks.Company
}

// DispenseMedicineClient is a client for the DispenseMedicine schema.
type DispenseMedicineClient struct {
	config
}

// NewDispenseMedicineClient returns a client for the DispenseMedicine from the given config.
func NewDispenseMedicineClient(c config) *DispenseMedicineClient {
	return &DispenseMedicineClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dispensemedicine.Hooks(f(g(h())))`.
func (c *DispenseMedicineClient) Use(hooks ...Hook) {
	c.hooks.DispenseMedicine = append(c.hooks.DispenseMedicine, hooks...)
}

// Create returns a create builder for DispenseMedicine.
func (c *DispenseMedicineClient) Create() *DispenseMedicineCreate {
	mutation := newDispenseMedicineMutation(c.config, OpCreate)
	return &DispenseMedicineCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for DispenseMedicine.
func (c *DispenseMedicineClient) Update() *DispenseMedicineUpdate {
	mutation := newDispenseMedicineMutation(c.config, OpUpdate)
	return &DispenseMedicineUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DispenseMedicineClient) UpdateOne(dm *DispenseMedicine) *DispenseMedicineUpdateOne {
	mutation := newDispenseMedicineMutation(c.config, OpUpdateOne, withDispenseMedicine(dm))
	return &DispenseMedicineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DispenseMedicineClient) UpdateOneID(id int) *DispenseMedicineUpdateOne {
	mutation := newDispenseMedicineMutation(c.config, OpUpdateOne, withDispenseMedicineID(id))
	return &DispenseMedicineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DispenseMedicine.
func (c *DispenseMedicineClient) Delete() *DispenseMedicineDelete {
	mutation := newDispenseMedicineMutation(c.config, OpDelete)
	return &DispenseMedicineDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DispenseMedicineClient) DeleteOne(dm *DispenseMedicine) *DispenseMedicineDeleteOne {
	return c.DeleteOneID(dm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DispenseMedicineClient) DeleteOneID(id int) *DispenseMedicineDeleteOne {
	builder := c.Delete().Where(dispensemedicine.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DispenseMedicineDeleteOne{builder}
}

// Create returns a query builder for DispenseMedicine.
func (c *DispenseMedicineClient) Query() *DispenseMedicineQuery {
	return &DispenseMedicineQuery{config: c.config}
}

// Get returns a DispenseMedicine entity by its id.
func (c *DispenseMedicineClient) Get(ctx context.Context, id int) (*DispenseMedicine, error) {
	return c.Query().Where(dispensemedicine.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DispenseMedicineClient) GetX(ctx context.Context, id int) *DispenseMedicine {
	dm, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return dm
}

// QueryPharmacist queries the pharmacist edge of a DispenseMedicine.
func (c *DispenseMedicineClient) QueryPharmacist(dm *DispenseMedicine) *PharmacistQuery {
	query := &PharmacistQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dispensemedicine.Table, dispensemedicine.FieldID, id),
			sqlgraph.To(pharmacist.Table, pharmacist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dispensemedicine.PharmacistTable, dispensemedicine.PharmacistColumn),
		)
		fromV = sqlgraph.Neighbors(dm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAnnotation queries the annotation edge of a DispenseMedicine.
func (c *DispenseMedicineClient) QueryAnnotation(dm *DispenseMedicine) *AnnotationQuery {
	query := &AnnotationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dispensemedicine.Table, dispensemedicine.FieldID, id),
			sqlgraph.To(annotation.Table, annotation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dispensemedicine.AnnotationTable, dispensemedicine.AnnotationColumn),
		)
		fromV = sqlgraph.Neighbors(dm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrescription queries the prescription edge of a DispenseMedicine.
func (c *DispenseMedicineClient) QueryPrescription(dm *DispenseMedicine) *PrescriptionQuery {
	query := &PrescriptionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dispensemedicine.Table, dispensemedicine.FieldID, id),
			sqlgraph.To(prescription.Table, prescription.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, dispensemedicine.PrescriptionTable, dispensemedicine.PrescriptionColumn),
		)
		fromV = sqlgraph.Neighbors(dm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBills queries the Bills edge of a DispenseMedicine.
func (c *DispenseMedicineClient) QueryBills(dm *DispenseMedicine) *BillQuery {
	query := &BillQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dispensemedicine.Table, dispensemedicine.FieldID, id),
			sqlgraph.To(bill.Table, bill.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, dispensemedicine.BillsTable, dispensemedicine.BillsColumn),
		)
		fromV = sqlgraph.Neighbors(dm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DispenseMedicineClient) Hooks() []Hook {
	return c.hooks.DispenseMedicine
}

// DoctorClient is a client for the Doctor schema.
type DoctorClient struct {
	config
}

// NewDoctorClient returns a client for the Doctor from the given config.
func NewDoctorClient(c config) *DoctorClient {
	return &DoctorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `doctor.Hooks(f(g(h())))`.
func (c *DoctorClient) Use(hooks ...Hook) {
	c.hooks.Doctor = append(c.hooks.Doctor, hooks...)
}

// Create returns a create builder for Doctor.
func (c *DoctorClient) Create() *DoctorCreate {
	mutation := newDoctorMutation(c.config, OpCreate)
	return &DoctorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Doctor.
func (c *DoctorClient) Update() *DoctorUpdate {
	mutation := newDoctorMutation(c.config, OpUpdate)
	return &DoctorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DoctorClient) UpdateOne(d *Doctor) *DoctorUpdateOne {
	mutation := newDoctorMutation(c.config, OpUpdateOne, withDoctor(d))
	return &DoctorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DoctorClient) UpdateOneID(id int) *DoctorUpdateOne {
	mutation := newDoctorMutation(c.config, OpUpdateOne, withDoctorID(id))
	return &DoctorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Doctor.
func (c *DoctorClient) Delete() *DoctorDelete {
	mutation := newDoctorMutation(c.config, OpDelete)
	return &DoctorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DoctorClient) DeleteOne(d *Doctor) *DoctorDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DoctorClient) DeleteOneID(id int) *DoctorDeleteOne {
	builder := c.Delete().Where(doctor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DoctorDeleteOne{builder}
}

// Create returns a query builder for Doctor.
func (c *DoctorClient) Query() *DoctorQuery {
	return &DoctorQuery{config: c.config}
}

// Get returns a Doctor entity by its id.
func (c *DoctorClient) Get(ctx context.Context, id int) (*Doctor, error) {
	return c.Query().Where(doctor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DoctorClient) GetX(ctx context.Context, id int) *Doctor {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryDoctorprescription queries the doctorprescription edge of a Doctor.
func (c *DoctorClient) QueryDoctorprescription(d *Doctor) *PrescriptionQuery {
	query := &PrescriptionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(doctor.Table, doctor.FieldID, id),
			sqlgraph.To(prescription.Table, prescription.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, doctor.DoctorprescriptionTable, doctor.DoctorprescriptionColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DoctorClient) Hooks() []Hook {
	return c.hooks.Doctor
}

// DrugAllergyClient is a client for the DrugAllergy schema.
type DrugAllergyClient struct {
	config
}

// NewDrugAllergyClient returns a client for the DrugAllergy from the given config.
func NewDrugAllergyClient(c config) *DrugAllergyClient {
	return &DrugAllergyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `drugallergy.Hooks(f(g(h())))`.
func (c *DrugAllergyClient) Use(hooks ...Hook) {
	c.hooks.DrugAllergy = append(c.hooks.DrugAllergy, hooks...)
}

// Create returns a create builder for DrugAllergy.
func (c *DrugAllergyClient) Create() *DrugAllergyCreate {
	mutation := newDrugAllergyMutation(c.config, OpCreate)
	return &DrugAllergyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for DrugAllergy.
func (c *DrugAllergyClient) Update() *DrugAllergyUpdate {
	mutation := newDrugAllergyMutation(c.config, OpUpdate)
	return &DrugAllergyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DrugAllergyClient) UpdateOne(da *DrugAllergy) *DrugAllergyUpdateOne {
	mutation := newDrugAllergyMutation(c.config, OpUpdateOne, withDrugAllergy(da))
	return &DrugAllergyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DrugAllergyClient) UpdateOneID(id int) *DrugAllergyUpdateOne {
	mutation := newDrugAllergyMutation(c.config, OpUpdateOne, withDrugAllergyID(id))
	return &DrugAllergyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DrugAllergy.
func (c *DrugAllergyClient) Delete() *DrugAllergyDelete {
	mutation := newDrugAllergyMutation(c.config, OpDelete)
	return &DrugAllergyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DrugAllergyClient) DeleteOne(da *DrugAllergy) *DrugAllergyDeleteOne {
	return c.DeleteOneID(da.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DrugAllergyClient) DeleteOneID(id int) *DrugAllergyDeleteOne {
	builder := c.Delete().Where(drugallergy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DrugAllergyDeleteOne{builder}
}

// Create returns a query builder for DrugAllergy.
func (c *DrugAllergyClient) Query() *DrugAllergyQuery {
	return &DrugAllergyQuery{config: c.config}
}

// Get returns a DrugAllergy entity by its id.
func (c *DrugAllergyClient) Get(ctx context.Context, id int) (*DrugAllergy, error) {
	return c.Query().Where(drugallergy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DrugAllergyClient) GetX(ctx context.Context, id int) *DrugAllergy {
	da, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return da
}

// QueryPatient queries the patient edge of a DrugAllergy.
func (c *DrugAllergyClient) QueryPatient(da *DrugAllergy) *PatientInfoQuery {
	query := &PatientInfoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := da.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(drugallergy.Table, drugallergy.FieldID, id),
			sqlgraph.To(patientinfo.Table, patientinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, drugallergy.PatientTable, drugallergy.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(da.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMedicine queries the medicine edge of a DrugAllergy.
func (c *DrugAllergyClient) QueryMedicine(da *DrugAllergy) *MedicineQuery {
	query := &MedicineQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := da.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(drugallergy.Table, drugallergy.FieldID, id),
			sqlgraph.To(medicine.Table, medicine.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, drugallergy.MedicineTable, drugallergy.MedicineColumn),
		)
		fromV = sqlgraph.Neighbors(da.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPharmacist queries the pharmacist edge of a DrugAllergy.
func (c *DrugAllergyClient) QueryPharmacist(da *DrugAllergy) *PharmacistQuery {
	query := &PharmacistQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := da.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(drugallergy.Table, drugallergy.FieldID, id),
			sqlgraph.To(pharmacist.Table, pharmacist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, drugallergy.PharmacistTable, drugallergy.PharmacistColumn),
		)
		fromV = sqlgraph.Neighbors(da.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DrugAllergyClient) Hooks() []Hook {
	return c.hooks.DrugAllergy
}

// LevelOfDangerousClient is a client for the LevelOfDangerous schema.
type LevelOfDangerousClient struct {
	config
}

// NewLevelOfDangerousClient returns a client for the LevelOfDangerous from the given config.
func NewLevelOfDangerousClient(c config) *LevelOfDangerousClient {
	return &LevelOfDangerousClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `levelofdangerous.Hooks(f(g(h())))`.
func (c *LevelOfDangerousClient) Use(hooks ...Hook) {
	c.hooks.LevelOfDangerous = append(c.hooks.LevelOfDangerous, hooks...)
}

// Create returns a create builder for LevelOfDangerous.
func (c *LevelOfDangerousClient) Create() *LevelOfDangerousCreate {
	mutation := newLevelOfDangerousMutation(c.config, OpCreate)
	return &LevelOfDangerousCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for LevelOfDangerous.
func (c *LevelOfDangerousClient) Update() *LevelOfDangerousUpdate {
	mutation := newLevelOfDangerousMutation(c.config, OpUpdate)
	return &LevelOfDangerousUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LevelOfDangerousClient) UpdateOne(lod *LevelOfDangerous) *LevelOfDangerousUpdateOne {
	mutation := newLevelOfDangerousMutation(c.config, OpUpdateOne, withLevelOfDangerous(lod))
	return &LevelOfDangerousUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LevelOfDangerousClient) UpdateOneID(id int) *LevelOfDangerousUpdateOne {
	mutation := newLevelOfDangerousMutation(c.config, OpUpdateOne, withLevelOfDangerousID(id))
	return &LevelOfDangerousUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LevelOfDangerous.
func (c *LevelOfDangerousClient) Delete() *LevelOfDangerousDelete {
	mutation := newLevelOfDangerousMutation(c.config, OpDelete)
	return &LevelOfDangerousDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LevelOfDangerousClient) DeleteOne(lod *LevelOfDangerous) *LevelOfDangerousDeleteOne {
	return c.DeleteOneID(lod.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LevelOfDangerousClient) DeleteOneID(id int) *LevelOfDangerousDeleteOne {
	builder := c.Delete().Where(levelofdangerous.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LevelOfDangerousDeleteOne{builder}
}

// Create returns a query builder for LevelOfDangerous.
func (c *LevelOfDangerousClient) Query() *LevelOfDangerousQuery {
	return &LevelOfDangerousQuery{config: c.config}
}

// Get returns a LevelOfDangerous entity by its id.
func (c *LevelOfDangerousClient) Get(ctx context.Context, id int) (*LevelOfDangerous, error) {
	return c.Query().Where(levelofdangerous.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LevelOfDangerousClient) GetX(ctx context.Context, id int) *LevelOfDangerous {
	lod, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return lod
}

// QueryMedicine queries the Medicine edge of a LevelOfDangerous.
func (c *LevelOfDangerousClient) QueryMedicine(lod *LevelOfDangerous) *MedicineQuery {
	query := &MedicineQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := lod.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(levelofdangerous.Table, levelofdangerous.FieldID, id),
			sqlgraph.To(medicine.Table, medicine.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, levelofdangerous.MedicineTable, levelofdangerous.MedicineColumn),
		)
		fromV = sqlgraph.Neighbors(lod.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LevelOfDangerousClient) Hooks() []Hook {
	return c.hooks.LevelOfDangerous
}

// MedicineClient is a client for the Medicine schema.
type MedicineClient struct {
	config
}

// NewMedicineClient returns a client for the Medicine from the given config.
func NewMedicineClient(c config) *MedicineClient {
	return &MedicineClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `medicine.Hooks(f(g(h())))`.
func (c *MedicineClient) Use(hooks ...Hook) {
	c.hooks.Medicine = append(c.hooks.Medicine, hooks...)
}

// Create returns a create builder for Medicine.
func (c *MedicineClient) Create() *MedicineCreate {
	mutation := newMedicineMutation(c.config, OpCreate)
	return &MedicineCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Medicine.
func (c *MedicineClient) Update() *MedicineUpdate {
	mutation := newMedicineMutation(c.config, OpUpdate)
	return &MedicineUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MedicineClient) UpdateOne(m *Medicine) *MedicineUpdateOne {
	mutation := newMedicineMutation(c.config, OpUpdateOne, withMedicine(m))
	return &MedicineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MedicineClient) UpdateOneID(id int) *MedicineUpdateOne {
	mutation := newMedicineMutation(c.config, OpUpdateOne, withMedicineID(id))
	return &MedicineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Medicine.
func (c *MedicineClient) Delete() *MedicineDelete {
	mutation := newMedicineMutation(c.config, OpDelete)
	return &MedicineDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MedicineClient) DeleteOne(m *Medicine) *MedicineDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MedicineClient) DeleteOneID(id int) *MedicineDeleteOne {
	builder := c.Delete().Where(medicine.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MedicineDeleteOne{builder}
}

// Create returns a query builder for Medicine.
func (c *MedicineClient) Query() *MedicineQuery {
	return &MedicineQuery{config: c.config}
}

// Get returns a Medicine entity by its id.
func (c *MedicineClient) Get(ctx context.Context, id int) (*Medicine, error) {
	return c.Query().Where(medicine.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MedicineClient) GetX(ctx context.Context, id int) *Medicine {
	m, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return m
}

// QueryLevelOfDangerous queries the LevelOfDangerous edge of a Medicine.
func (c *MedicineClient) QueryLevelOfDangerous(m *Medicine) *LevelOfDangerousQuery {
	query := &LevelOfDangerousQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(medicine.Table, medicine.FieldID, id),
			sqlgraph.To(levelofdangerous.Table, levelofdangerous.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, medicine.LevelOfDangerousTable, medicine.LevelOfDangerousColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMedicineType queries the MedicineType edge of a Medicine.
func (c *MedicineClient) QueryMedicineType(m *Medicine) *MedicineTypeQuery {
	query := &MedicineTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(medicine.Table, medicine.FieldID, id),
			sqlgraph.To(medicinetype.Table, medicinetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, medicine.MedicineTypeTable, medicine.MedicineTypeColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUnitOfMedicine queries the UnitOfMedicine edge of a Medicine.
func (c *MedicineClient) QueryUnitOfMedicine(m *Medicine) *UnitOfMedicineQuery {
	query := &UnitOfMedicineQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(medicine.Table, medicine.FieldID, id),
			sqlgraph.To(unitofmedicine.Table, unitofmedicine.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, medicine.UnitOfMedicineTable, medicine.UnitOfMedicineColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDrugallergys queries the drugallergys edge of a Medicine.
func (c *MedicineClient) QueryDrugallergys(m *Medicine) *DrugAllergyQuery {
	query := &DrugAllergyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(medicine.Table, medicine.FieldID, id),
			sqlgraph.To(drugallergy.Table, drugallergy.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, medicine.DrugallergysTable, medicine.DrugallergysColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMedicinepresciption queries the medicinepresciption edge of a Medicine.
func (c *MedicineClient) QueryMedicinepresciption(m *Medicine) *PrescriptionQuery {
	query := &PrescriptionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(medicine.Table, medicine.FieldID, id),
			sqlgraph.To(prescription.Table, prescription.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, medicine.MedicinepresciptionTable, medicine.MedicinepresciptionColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrdermedicine queries the ordermedicine edge of a Medicine.
func (c *MedicineClient) QueryOrdermedicine(m *Medicine) *OrderQuery {
	query := &OrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(medicine.Table, medicine.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, medicine.OrdermedicineTable, medicine.OrdermedicineColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MedicineClient) Hooks() []Hook {
	return c.hooks.Medicine
}

// MedicineTypeClient is a client for the MedicineType schema.
type MedicineTypeClient struct {
	config
}

// NewMedicineTypeClient returns a client for the MedicineType from the given config.
func NewMedicineTypeClient(c config) *MedicineTypeClient {
	return &MedicineTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `medicinetype.Hooks(f(g(h())))`.
func (c *MedicineTypeClient) Use(hooks ...Hook) {
	c.hooks.MedicineType = append(c.hooks.MedicineType, hooks...)
}

// Create returns a create builder for MedicineType.
func (c *MedicineTypeClient) Create() *MedicineTypeCreate {
	mutation := newMedicineTypeMutation(c.config, OpCreate)
	return &MedicineTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for MedicineType.
func (c *MedicineTypeClient) Update() *MedicineTypeUpdate {
	mutation := newMedicineTypeMutation(c.config, OpUpdate)
	return &MedicineTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MedicineTypeClient) UpdateOne(mt *MedicineType) *MedicineTypeUpdateOne {
	mutation := newMedicineTypeMutation(c.config, OpUpdateOne, withMedicineType(mt))
	return &MedicineTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MedicineTypeClient) UpdateOneID(id int) *MedicineTypeUpdateOne {
	mutation := newMedicineTypeMutation(c.config, OpUpdateOne, withMedicineTypeID(id))
	return &MedicineTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MedicineType.
func (c *MedicineTypeClient) Delete() *MedicineTypeDelete {
	mutation := newMedicineTypeMutation(c.config, OpDelete)
	return &MedicineTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MedicineTypeClient) DeleteOne(mt *MedicineType) *MedicineTypeDeleteOne {
	return c.DeleteOneID(mt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MedicineTypeClient) DeleteOneID(id int) *MedicineTypeDeleteOne {
	builder := c.Delete().Where(medicinetype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MedicineTypeDeleteOne{builder}
}

// Create returns a query builder for MedicineType.
func (c *MedicineTypeClient) Query() *MedicineTypeQuery {
	return &MedicineTypeQuery{config: c.config}
}

// Get returns a MedicineType entity by its id.
func (c *MedicineTypeClient) Get(ctx context.Context, id int) (*MedicineType, error) {
	return c.Query().Where(medicinetype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MedicineTypeClient) GetX(ctx context.Context, id int) *MedicineType {
	mt, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return mt
}

// QueryMedicine queries the Medicine edge of a MedicineType.
func (c *MedicineTypeClient) QueryMedicine(mt *MedicineType) *MedicineQuery {
	query := &MedicineQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := mt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(medicinetype.Table, medicinetype.FieldID, id),
			sqlgraph.To(medicine.Table, medicine.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, medicinetype.MedicineTable, medicinetype.MedicineColumn),
		)
		fromV = sqlgraph.Neighbors(mt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MedicineTypeClient) Hooks() []Hook {
	return c.hooks.MedicineType
}

// OrderClient is a client for the Order schema.
type OrderClient struct {
	config
}

// NewOrderClient returns a client for the Order from the given config.
func NewOrderClient(c config) *OrderClient {
	return &OrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `order.Hooks(f(g(h())))`.
func (c *OrderClient) Use(hooks ...Hook) {
	c.hooks.Order = append(c.hooks.Order, hooks...)
}

// Create returns a create builder for Order.
func (c *OrderClient) Create() *OrderCreate {
	mutation := newOrderMutation(c.config, OpCreate)
	return &OrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Order.
func (c *OrderClient) Update() *OrderUpdate {
	mutation := newOrderMutation(c.config, OpUpdate)
	return &OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderClient) UpdateOne(o *Order) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrder(o))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderClient) UpdateOneID(id int) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrderID(id))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Order.
func (c *OrderClient) Delete() *OrderDelete {
	mutation := newOrderMutation(c.config, OpDelete)
	return &OrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrderClient) DeleteOne(o *Order) *OrderDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrderClient) DeleteOneID(id int) *OrderDeleteOne {
	builder := c.Delete().Where(order.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderDeleteOne{builder}
}

// Create returns a query builder for Order.
func (c *OrderClient) Query() *OrderQuery {
	return &OrderQuery{config: c.config}
}

// Get returns a Order entity by its id.
func (c *OrderClient) Get(ctx context.Context, id int) (*Order, error) {
	return c.Query().Where(order.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderClient) GetX(ctx context.Context, id int) *Order {
	o, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return o
}

// QueryMedicine queries the medicine edge of a Order.
func (c *OrderClient) QueryMedicine(o *Order) *MedicineQuery {
	query := &MedicineQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(medicine.Table, medicine.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.MedicineTable, order.MedicineColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompany queries the company edge of a Order.
func (c *OrderClient) QueryCompany(o *Order) *CompanyQuery {
	query := &CompanyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(company.Table, company.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.CompanyTable, order.CompanyColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPharmacist queries the pharmacist edge of a Order.
func (c *OrderClient) QueryPharmacist(o *Order) *PharmacistQuery {
	query := &PharmacistQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(pharmacist.Table, pharmacist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.PharmacistTable, order.PharmacistColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderClient) Hooks() []Hook {
	return c.hooks.Order
}

// PatientInfoClient is a client for the PatientInfo schema.
type PatientInfoClient struct {
	config
}

// NewPatientInfoClient returns a client for the PatientInfo from the given config.
func NewPatientInfoClient(c config) *PatientInfoClient {
	return &PatientInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `patientinfo.Hooks(f(g(h())))`.
func (c *PatientInfoClient) Use(hooks ...Hook) {
	c.hooks.PatientInfo = append(c.hooks.PatientInfo, hooks...)
}

// Create returns a create builder for PatientInfo.
func (c *PatientInfoClient) Create() *PatientInfoCreate {
	mutation := newPatientInfoMutation(c.config, OpCreate)
	return &PatientInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for PatientInfo.
func (c *PatientInfoClient) Update() *PatientInfoUpdate {
	mutation := newPatientInfoMutation(c.config, OpUpdate)
	return &PatientInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PatientInfoClient) UpdateOne(pi *PatientInfo) *PatientInfoUpdateOne {
	mutation := newPatientInfoMutation(c.config, OpUpdateOne, withPatientInfo(pi))
	return &PatientInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PatientInfoClient) UpdateOneID(id int) *PatientInfoUpdateOne {
	mutation := newPatientInfoMutation(c.config, OpUpdateOne, withPatientInfoID(id))
	return &PatientInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PatientInfo.
func (c *PatientInfoClient) Delete() *PatientInfoDelete {
	mutation := newPatientInfoMutation(c.config, OpDelete)
	return &PatientInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PatientInfoClient) DeleteOne(pi *PatientInfo) *PatientInfoDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PatientInfoClient) DeleteOneID(id int) *PatientInfoDeleteOne {
	builder := c.Delete().Where(patientinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PatientInfoDeleteOne{builder}
}

// Create returns a query builder for PatientInfo.
func (c *PatientInfoClient) Query() *PatientInfoQuery {
	return &PatientInfoQuery{config: c.config}
}

// Get returns a PatientInfo entity by its id.
func (c *PatientInfoClient) Get(ctx context.Context, id int) (*PatientInfo, error) {
	return c.Query().Where(patientinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PatientInfoClient) GetX(ctx context.Context, id int) *PatientInfo {
	pi, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pi
}

// QueryDrugallergys queries the drugallergys edge of a PatientInfo.
func (c *PatientInfoClient) QueryDrugallergys(pi *PatientInfo) *DrugAllergyQuery {
	query := &DrugAllergyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patientinfo.Table, patientinfo.FieldID, id),
			sqlgraph.To(drugallergy.Table, drugallergy.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patientinfo.DrugallergysTable, patientinfo.DrugallergysColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatientprescription queries the patientprescription edge of a PatientInfo.
func (c *PatientInfoClient) QueryPatientprescription(pi *PatientInfo) *PrescriptionQuery {
	query := &PrescriptionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patientinfo.Table, patientinfo.FieldID, id),
			sqlgraph.To(prescription.Table, prescription.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patientinfo.PatientprescriptionTable, patientinfo.PatientprescriptionColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PatientInfoClient) Hooks() []Hook {
	return c.hooks.PatientInfo
}

// PaymentClient is a client for the Payment schema.
type PaymentClient struct {
	config
}

// NewPaymentClient returns a client for the Payment from the given config.
func NewPaymentClient(c config) *PaymentClient {
	return &PaymentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `payment.Hooks(f(g(h())))`.
func (c *PaymentClient) Use(hooks ...Hook) {
	c.hooks.Payment = append(c.hooks.Payment, hooks...)
}

// Create returns a create builder for Payment.
func (c *PaymentClient) Create() *PaymentCreate {
	mutation := newPaymentMutation(c.config, OpCreate)
	return &PaymentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Payment.
func (c *PaymentClient) Update() *PaymentUpdate {
	mutation := newPaymentMutation(c.config, OpUpdate)
	return &PaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentClient) UpdateOne(pa *Payment) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPayment(pa))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentClient) UpdateOneID(id int) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPaymentID(id))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Payment.
func (c *PaymentClient) Delete() *PaymentDelete {
	mutation := newPaymentMutation(c.config, OpDelete)
	return &PaymentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PaymentClient) DeleteOne(pa *Payment) *PaymentDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PaymentClient) DeleteOneID(id int) *PaymentDeleteOne {
	builder := c.Delete().Where(payment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentDeleteOne{builder}
}

// Create returns a query builder for Payment.
func (c *PaymentClient) Query() *PaymentQuery {
	return &PaymentQuery{config: c.config}
}

// Get returns a Payment entity by its id.
func (c *PaymentClient) Get(ctx context.Context, id int) (*Payment, error) {
	return c.Query().Where(payment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentClient) GetX(ctx context.Context, id int) *Payment {
	pa, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pa
}

// QueryBills queries the Bills edge of a Payment.
func (c *PaymentClient) QueryBills(pa *Payment) *BillQuery {
	query := &BillQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(payment.Table, payment.FieldID, id),
			sqlgraph.To(bill.Table, bill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, payment.BillsTable, payment.BillsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymentClient) Hooks() []Hook {
	return c.hooks.Payment
}

// PharmacistClient is a client for the Pharmacist schema.
type PharmacistClient struct {
	config
}

// NewPharmacistClient returns a client for the Pharmacist from the given config.
func NewPharmacistClient(c config) *PharmacistClient {
	return &PharmacistClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pharmacist.Hooks(f(g(h())))`.
func (c *PharmacistClient) Use(hooks ...Hook) {
	c.hooks.Pharmacist = append(c.hooks.Pharmacist, hooks...)
}

// Create returns a create builder for Pharmacist.
func (c *PharmacistClient) Create() *PharmacistCreate {
	mutation := newPharmacistMutation(c.config, OpCreate)
	return &PharmacistCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Pharmacist.
func (c *PharmacistClient) Update() *PharmacistUpdate {
	mutation := newPharmacistMutation(c.config, OpUpdate)
	return &PharmacistUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PharmacistClient) UpdateOne(ph *Pharmacist) *PharmacistUpdateOne {
	mutation := newPharmacistMutation(c.config, OpUpdateOne, withPharmacist(ph))
	return &PharmacistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PharmacistClient) UpdateOneID(id int) *PharmacistUpdateOne {
	mutation := newPharmacistMutation(c.config, OpUpdateOne, withPharmacistID(id))
	return &PharmacistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Pharmacist.
func (c *PharmacistClient) Delete() *PharmacistDelete {
	mutation := newPharmacistMutation(c.config, OpDelete)
	return &PharmacistDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PharmacistClient) DeleteOne(ph *Pharmacist) *PharmacistDeleteOne {
	return c.DeleteOneID(ph.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PharmacistClient) DeleteOneID(id int) *PharmacistDeleteOne {
	builder := c.Delete().Where(pharmacist.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PharmacistDeleteOne{builder}
}

// Create returns a query builder for Pharmacist.
func (c *PharmacistClient) Query() *PharmacistQuery {
	return &PharmacistQuery{config: c.config}
}

// Get returns a Pharmacist entity by its id.
func (c *PharmacistClient) Get(ctx context.Context, id int) (*Pharmacist, error) {
	return c.Query().Where(pharmacist.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PharmacistClient) GetX(ctx context.Context, id int) *Pharmacist {
	ph, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ph
}

// QueryPositioninpharmacist queries the positioninpharmacist edge of a Pharmacist.
func (c *PharmacistClient) QueryPositioninpharmacist(ph *Pharmacist) *PositionInPharmacistQuery {
	query := &PositionInPharmacistQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pharmacist.Table, pharmacist.FieldID, id),
			sqlgraph.To(positioninpharmacist.Table, positioninpharmacist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, pharmacist.PositioninpharmacistTable, pharmacist.PositioninpharmacistColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDispensemedicine queries the dispensemedicine edge of a Pharmacist.
func (c *PharmacistClient) QueryDispensemedicine(ph *Pharmacist) *DispenseMedicineQuery {
	query := &DispenseMedicineQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pharmacist.Table, pharmacist.FieldID, id),
			sqlgraph.To(dispensemedicine.Table, dispensemedicine.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, pharmacist.DispensemedicineTable, pharmacist.DispensemedicineColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDrugallergys queries the drugallergys edge of a Pharmacist.
func (c *PharmacistClient) QueryDrugallergys(ph *Pharmacist) *DrugAllergyQuery {
	query := &DrugAllergyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pharmacist.Table, pharmacist.FieldID, id),
			sqlgraph.To(drugallergy.Table, drugallergy.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, pharmacist.DrugallergysTable, pharmacist.DrugallergysColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderpharmacist queries the orderpharmacist edge of a Pharmacist.
func (c *PharmacistClient) QueryOrderpharmacist(ph *Pharmacist) *OrderQuery {
	query := &OrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pharmacist.Table, pharmacist.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, pharmacist.OrderpharmacistTable, pharmacist.OrderpharmacistColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBills queries the Bills edge of a Pharmacist.
func (c *PharmacistClient) QueryBills(ph *Pharmacist) *BillQuery {
	query := &BillQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pharmacist.Table, pharmacist.FieldID, id),
			sqlgraph.To(bill.Table, bill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, pharmacist.BillsTable, pharmacist.BillsColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PharmacistClient) Hooks() []Hook {
	return c.hooks.Pharmacist
}

// PositionInPharmacistClient is a client for the PositionInPharmacist schema.
type PositionInPharmacistClient struct {
	config
}

// NewPositionInPharmacistClient returns a client for the PositionInPharmacist from the given config.
func NewPositionInPharmacistClient(c config) *PositionInPharmacistClient {
	return &PositionInPharmacistClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `positioninpharmacist.Hooks(f(g(h())))`.
func (c *PositionInPharmacistClient) Use(hooks ...Hook) {
	c.hooks.PositionInPharmacist = append(c.hooks.PositionInPharmacist, hooks...)
}

// Create returns a create builder for PositionInPharmacist.
func (c *PositionInPharmacistClient) Create() *PositionInPharmacistCreate {
	mutation := newPositionInPharmacistMutation(c.config, OpCreate)
	return &PositionInPharmacistCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for PositionInPharmacist.
func (c *PositionInPharmacistClient) Update() *PositionInPharmacistUpdate {
	mutation := newPositionInPharmacistMutation(c.config, OpUpdate)
	return &PositionInPharmacistUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PositionInPharmacistClient) UpdateOne(pip *PositionInPharmacist) *PositionInPharmacistUpdateOne {
	mutation := newPositionInPharmacistMutation(c.config, OpUpdateOne, withPositionInPharmacist(pip))
	return &PositionInPharmacistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PositionInPharmacistClient) UpdateOneID(id int) *PositionInPharmacistUpdateOne {
	mutation := newPositionInPharmacistMutation(c.config, OpUpdateOne, withPositionInPharmacistID(id))
	return &PositionInPharmacistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PositionInPharmacist.
func (c *PositionInPharmacistClient) Delete() *PositionInPharmacistDelete {
	mutation := newPositionInPharmacistMutation(c.config, OpDelete)
	return &PositionInPharmacistDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PositionInPharmacistClient) DeleteOne(pip *PositionInPharmacist) *PositionInPharmacistDeleteOne {
	return c.DeleteOneID(pip.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PositionInPharmacistClient) DeleteOneID(id int) *PositionInPharmacistDeleteOne {
	builder := c.Delete().Where(positioninpharmacist.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PositionInPharmacistDeleteOne{builder}
}

// Create returns a query builder for PositionInPharmacist.
func (c *PositionInPharmacistClient) Query() *PositionInPharmacistQuery {
	return &PositionInPharmacistQuery{config: c.config}
}

// Get returns a PositionInPharmacist entity by its id.
func (c *PositionInPharmacistClient) Get(ctx context.Context, id int) (*PositionInPharmacist, error) {
	return c.Query().Where(positioninpharmacist.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PositionInPharmacistClient) GetX(ctx context.Context, id int) *PositionInPharmacist {
	pip, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pip
}

// QueryPharmacist queries the pharmacist edge of a PositionInPharmacist.
func (c *PositionInPharmacistClient) QueryPharmacist(pip *PositionInPharmacist) *PharmacistQuery {
	query := &PharmacistQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pip.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(positioninpharmacist.Table, positioninpharmacist.FieldID, id),
			sqlgraph.To(pharmacist.Table, pharmacist.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, positioninpharmacist.PharmacistTable, positioninpharmacist.PharmacistColumn),
		)
		fromV = sqlgraph.Neighbors(pip.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PositionInPharmacistClient) Hooks() []Hook {
	return c.hooks.PositionInPharmacist
}

// PrescriptionClient is a client for the Prescription schema.
type PrescriptionClient struct {
	config
}

// NewPrescriptionClient returns a client for the Prescription from the given config.
func NewPrescriptionClient(c config) *PrescriptionClient {
	return &PrescriptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `prescription.Hooks(f(g(h())))`.
func (c *PrescriptionClient) Use(hooks ...Hook) {
	c.hooks.Prescription = append(c.hooks.Prescription, hooks...)
}

// Create returns a create builder for Prescription.
func (c *PrescriptionClient) Create() *PrescriptionCreate {
	mutation := newPrescriptionMutation(c.config, OpCreate)
	return &PrescriptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Prescription.
func (c *PrescriptionClient) Update() *PrescriptionUpdate {
	mutation := newPrescriptionMutation(c.config, OpUpdate)
	return &PrescriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PrescriptionClient) UpdateOne(pr *Prescription) *PrescriptionUpdateOne {
	mutation := newPrescriptionMutation(c.config, OpUpdateOne, withPrescription(pr))
	return &PrescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PrescriptionClient) UpdateOneID(id int) *PrescriptionUpdateOne {
	mutation := newPrescriptionMutation(c.config, OpUpdateOne, withPrescriptionID(id))
	return &PrescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Prescription.
func (c *PrescriptionClient) Delete() *PrescriptionDelete {
	mutation := newPrescriptionMutation(c.config, OpDelete)
	return &PrescriptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PrescriptionClient) DeleteOne(pr *Prescription) *PrescriptionDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PrescriptionClient) DeleteOneID(id int) *PrescriptionDeleteOne {
	builder := c.Delete().Where(prescription.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PrescriptionDeleteOne{builder}
}

// Create returns a query builder for Prescription.
func (c *PrescriptionClient) Query() *PrescriptionQuery {
	return &PrescriptionQuery{config: c.config}
}

// Get returns a Prescription entity by its id.
func (c *PrescriptionClient) Get(ctx context.Context, id int) (*Prescription, error) {
	return c.Query().Where(prescription.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PrescriptionClient) GetX(ctx context.Context, id int) *Prescription {
	pr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pr
}

// QueryPrescriptionpatient queries the prescriptionpatient edge of a Prescription.
func (c *PrescriptionClient) QueryPrescriptionpatient(pr *Prescription) *PatientInfoQuery {
	query := &PatientInfoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prescription.Table, prescription.FieldID, id),
			sqlgraph.To(patientinfo.Table, patientinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, prescription.PrescriptionpatientTable, prescription.PrescriptionpatientColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrescriptiondoctor queries the prescriptiondoctor edge of a Prescription.
func (c *PrescriptionClient) QueryPrescriptiondoctor(pr *Prescription) *DoctorQuery {
	query := &DoctorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prescription.Table, prescription.FieldID, id),
			sqlgraph.To(doctor.Table, doctor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, prescription.PrescriptiondoctorTable, prescription.PrescriptiondoctorColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrescriptionmedicine queries the prescriptionmedicine edge of a Prescription.
func (c *PrescriptionClient) QueryPrescriptionmedicine(pr *Prescription) *MedicineQuery {
	query := &MedicineQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prescription.Table, prescription.FieldID, id),
			sqlgraph.To(medicine.Table, medicine.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, prescription.PrescriptionmedicineTable, prescription.PrescriptionmedicineColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrescriptonstatus queries the prescriptonstatus edge of a Prescription.
func (c *PrescriptionClient) QueryPrescriptonstatus(pr *Prescription) *StatusQuery {
	query := &StatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prescription.Table, prescription.FieldID, id),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, prescription.PrescriptonstatusTable, prescription.PrescriptonstatusColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDispensemedicine queries the dispensemedicine edge of a Prescription.
func (c *PrescriptionClient) QueryDispensemedicine(pr *Prescription) *DispenseMedicineQuery {
	query := &DispenseMedicineQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prescription.Table, prescription.FieldID, id),
			sqlgraph.To(dispensemedicine.Table, dispensemedicine.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, prescription.DispensemedicineTable, prescription.DispensemedicineColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PrescriptionClient) Hooks() []Hook {
	return c.hooks.Prescription
}

// StatusClient is a client for the Status schema.
type StatusClient struct {
	config
}

// NewStatusClient returns a client for the Status from the given config.
func NewStatusClient(c config) *StatusClient {
	return &StatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `status.Hooks(f(g(h())))`.
func (c *StatusClient) Use(hooks ...Hook) {
	c.hooks.Status = append(c.hooks.Status, hooks...)
}

// Create returns a create builder for Status.
func (c *StatusClient) Create() *StatusCreate {
	mutation := newStatusMutation(c.config, OpCreate)
	return &StatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Status.
func (c *StatusClient) Update() *StatusUpdate {
	mutation := newStatusMutation(c.config, OpUpdate)
	return &StatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatusClient) UpdateOne(s *Status) *StatusUpdateOne {
	mutation := newStatusMutation(c.config, OpUpdateOne, withStatus(s))
	return &StatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatusClient) UpdateOneID(id int) *StatusUpdateOne {
	mutation := newStatusMutation(c.config, OpUpdateOne, withStatusID(id))
	return &StatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Status.
func (c *StatusClient) Delete() *StatusDelete {
	mutation := newStatusMutation(c.config, OpDelete)
	return &StatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StatusClient) DeleteOne(s *Status) *StatusDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StatusClient) DeleteOneID(id int) *StatusDeleteOne {
	builder := c.Delete().Where(status.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatusDeleteOne{builder}
}

// Create returns a query builder for Status.
func (c *StatusClient) Query() *StatusQuery {
	return &StatusQuery{config: c.config}
}

// Get returns a Status entity by its id.
func (c *StatusClient) Get(ctx context.Context, id int) (*Status, error) {
	return c.Query().Where(status.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatusClient) GetX(ctx context.Context, id int) *Status {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryStatusprescription queries the statusprescription edge of a Status.
func (c *StatusClient) QueryStatusprescription(s *Status) *PrescriptionQuery {
	query := &PrescriptionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(status.Table, status.FieldID, id),
			sqlgraph.To(prescription.Table, prescription.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, status.StatusprescriptionTable, status.StatusprescriptionColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatusClient) Hooks() []Hook {
	return c.hooks.Status
}

// UnitOfMedicineClient is a client for the UnitOfMedicine schema.
type UnitOfMedicineClient struct {
	config
}

// NewUnitOfMedicineClient returns a client for the UnitOfMedicine from the given config.
func NewUnitOfMedicineClient(c config) *UnitOfMedicineClient {
	return &UnitOfMedicineClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `unitofmedicine.Hooks(f(g(h())))`.
func (c *UnitOfMedicineClient) Use(hooks ...Hook) {
	c.hooks.UnitOfMedicine = append(c.hooks.UnitOfMedicine, hooks...)
}

// Create returns a create builder for UnitOfMedicine.
func (c *UnitOfMedicineClient) Create() *UnitOfMedicineCreate {
	mutation := newUnitOfMedicineMutation(c.config, OpCreate)
	return &UnitOfMedicineCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for UnitOfMedicine.
func (c *UnitOfMedicineClient) Update() *UnitOfMedicineUpdate {
	mutation := newUnitOfMedicineMutation(c.config, OpUpdate)
	return &UnitOfMedicineUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UnitOfMedicineClient) UpdateOne(uom *UnitOfMedicine) *UnitOfMedicineUpdateOne {
	mutation := newUnitOfMedicineMutation(c.config, OpUpdateOne, withUnitOfMedicine(uom))
	return &UnitOfMedicineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UnitOfMedicineClient) UpdateOneID(id int) *UnitOfMedicineUpdateOne {
	mutation := newUnitOfMedicineMutation(c.config, OpUpdateOne, withUnitOfMedicineID(id))
	return &UnitOfMedicineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UnitOfMedicine.
func (c *UnitOfMedicineClient) Delete() *UnitOfMedicineDelete {
	mutation := newUnitOfMedicineMutation(c.config, OpDelete)
	return &UnitOfMedicineDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UnitOfMedicineClient) DeleteOne(uom *UnitOfMedicine) *UnitOfMedicineDeleteOne {
	return c.DeleteOneID(uom.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UnitOfMedicineClient) DeleteOneID(id int) *UnitOfMedicineDeleteOne {
	builder := c.Delete().Where(unitofmedicine.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UnitOfMedicineDeleteOne{builder}
}

// Create returns a query builder for UnitOfMedicine.
func (c *UnitOfMedicineClient) Query() *UnitOfMedicineQuery {
	return &UnitOfMedicineQuery{config: c.config}
}

// Get returns a UnitOfMedicine entity by its id.
func (c *UnitOfMedicineClient) Get(ctx context.Context, id int) (*UnitOfMedicine, error) {
	return c.Query().Where(unitofmedicine.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UnitOfMedicineClient) GetX(ctx context.Context, id int) *UnitOfMedicine {
	uom, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return uom
}

// QueryMedicine queries the Medicine edge of a UnitOfMedicine.
func (c *UnitOfMedicineClient) QueryMedicine(uom *UnitOfMedicine) *MedicineQuery {
	query := &MedicineQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := uom.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(unitofmedicine.Table, unitofmedicine.FieldID, id),
			sqlgraph.To(medicine.Table, medicine.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, unitofmedicine.MedicineTable, unitofmedicine.MedicineColumn),
		)
		fromV = sqlgraph.Neighbors(uom.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UnitOfMedicineClient) Hooks() []Hook {
	return c.hooks.UnitOfMedicine
}

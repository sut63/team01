// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team01/ent/annotation"
	"github.com/sut63/team01/ent/bill"
	"github.com/sut63/team01/ent/dispensemedicine"
	"github.com/sut63/team01/ent/pharmacist"
	"github.com/sut63/team01/ent/prescription"
)

// DispenseMedicineCreate is the builder for creating a DispenseMedicine entity.
type DispenseMedicineCreate struct {
	config
	mutation *DispenseMedicineMutation
	hooks    []Hook
}

// SetDatetime sets the datetime field.
func (dmc *DispenseMedicineCreate) SetDatetime(t time.Time) *DispenseMedicineCreate {
	dmc.mutation.SetDatetime(t)
	return dmc
}

// SetNote sets the note field.
func (dmc *DispenseMedicineCreate) SetNote(s string) *DispenseMedicineCreate {
	dmc.mutation.SetNote(s)
	return dmc
}

// SetAmountchangemedicine sets the amountchangemedicine field.
func (dmc *DispenseMedicineCreate) SetAmountchangemedicine(i int) *DispenseMedicineCreate {
	dmc.mutation.SetAmountchangemedicine(i)
	return dmc
}

// SetDetailchangemedicine sets the detailchangemedicine field.
func (dmc *DispenseMedicineCreate) SetDetailchangemedicine(s string) *DispenseMedicineCreate {
	dmc.mutation.SetDetailchangemedicine(s)
	return dmc
}

// SetPharmacistID sets the pharmacist edge to Pharmacist by id.
func (dmc *DispenseMedicineCreate) SetPharmacistID(id int) *DispenseMedicineCreate {
	dmc.mutation.SetPharmacistID(id)
	return dmc
}

// SetNillablePharmacistID sets the pharmacist edge to Pharmacist by id if the given value is not nil.
func (dmc *DispenseMedicineCreate) SetNillablePharmacistID(id *int) *DispenseMedicineCreate {
	if id != nil {
		dmc = dmc.SetPharmacistID(*id)
	}
	return dmc
}

// SetPharmacist sets the pharmacist edge to Pharmacist.
func (dmc *DispenseMedicineCreate) SetPharmacist(p *Pharmacist) *DispenseMedicineCreate {
	return dmc.SetPharmacistID(p.ID)
}

// SetAnnotationID sets the annotation edge to Annotation by id.
func (dmc *DispenseMedicineCreate) SetAnnotationID(id int) *DispenseMedicineCreate {
	dmc.mutation.SetAnnotationID(id)
	return dmc
}

// SetNillableAnnotationID sets the annotation edge to Annotation by id if the given value is not nil.
func (dmc *DispenseMedicineCreate) SetNillableAnnotationID(id *int) *DispenseMedicineCreate {
	if id != nil {
		dmc = dmc.SetAnnotationID(*id)
	}
	return dmc
}

// SetAnnotation sets the annotation edge to Annotation.
func (dmc *DispenseMedicineCreate) SetAnnotation(a *Annotation) *DispenseMedicineCreate {
	return dmc.SetAnnotationID(a.ID)
}

// SetPrescriptionID sets the prescription edge to Prescription by id.
func (dmc *DispenseMedicineCreate) SetPrescriptionID(id int) *DispenseMedicineCreate {
	dmc.mutation.SetPrescriptionID(id)
	return dmc
}

// SetNillablePrescriptionID sets the prescription edge to Prescription by id if the given value is not nil.
func (dmc *DispenseMedicineCreate) SetNillablePrescriptionID(id *int) *DispenseMedicineCreate {
	if id != nil {
		dmc = dmc.SetPrescriptionID(*id)
	}
	return dmc
}

// SetPrescription sets the prescription edge to Prescription.
func (dmc *DispenseMedicineCreate) SetPrescription(p *Prescription) *DispenseMedicineCreate {
	return dmc.SetPrescriptionID(p.ID)
}

// SetBillsID sets the Bills edge to Bill by id.
func (dmc *DispenseMedicineCreate) SetBillsID(id int) *DispenseMedicineCreate {
	dmc.mutation.SetBillsID(id)
	return dmc
}

// SetNillableBillsID sets the Bills edge to Bill by id if the given value is not nil.
func (dmc *DispenseMedicineCreate) SetNillableBillsID(id *int) *DispenseMedicineCreate {
	if id != nil {
		dmc = dmc.SetBillsID(*id)
	}
	return dmc
}

// SetBills sets the Bills edge to Bill.
func (dmc *DispenseMedicineCreate) SetBills(b *Bill) *DispenseMedicineCreate {
	return dmc.SetBillsID(b.ID)
}

// Mutation returns the DispenseMedicineMutation object of the builder.
func (dmc *DispenseMedicineCreate) Mutation() *DispenseMedicineMutation {
	return dmc.mutation
}

// Save creates the DispenseMedicine in the database.
func (dmc *DispenseMedicineCreate) Save(ctx context.Context) (*DispenseMedicine, error) {
	if _, ok := dmc.mutation.Datetime(); !ok {
		return nil, &ValidationError{Name: "datetime", err: errors.New("ent: missing required field \"datetime\"")}
	}
	if _, ok := dmc.mutation.Note(); !ok {
		return nil, &ValidationError{Name: "note", err: errors.New("ent: missing required field \"note\"")}
	}
	if v, ok := dmc.mutation.Note(); ok {
		if err := dispensemedicine.NoteValidator(v); err != nil {
			return nil, &ValidationError{Name: "note", err: fmt.Errorf("ent: validator failed for field \"note\": %w", err)}
		}
	}
	if _, ok := dmc.mutation.Amountchangemedicine(); !ok {
		return nil, &ValidationError{Name: "amountchangemedicine", err: errors.New("ent: missing required field \"amountchangemedicine\"")}
	}
	if v, ok := dmc.mutation.Amountchangemedicine(); ok {
		if err := dispensemedicine.AmountchangemedicineValidator(v); err != nil {
			return nil, &ValidationError{Name: "amountchangemedicine", err: fmt.Errorf("ent: validator failed for field \"amountchangemedicine\": %w", err)}
		}
	}
	if _, ok := dmc.mutation.Detailchangemedicine(); !ok {
		return nil, &ValidationError{Name: "detailchangemedicine", err: errors.New("ent: missing required field \"detailchangemedicine\"")}
	}
	if v, ok := dmc.mutation.Detailchangemedicine(); ok {
		if err := dispensemedicine.DetailchangemedicineValidator(v); err != nil {
			return nil, &ValidationError{Name: "detailchangemedicine", err: fmt.Errorf("ent: validator failed for field \"detailchangemedicine\": %w", err)}
		}
	}
	var (
		err  error
		node *DispenseMedicine
	)
	if len(dmc.hooks) == 0 {
		node, err = dmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DispenseMedicineMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dmc.mutation = mutation
			node, err = dmc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dmc.hooks) - 1; i >= 0; i-- {
			mut = dmc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dmc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dmc *DispenseMedicineCreate) SaveX(ctx context.Context) *DispenseMedicine {
	v, err := dmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dmc *DispenseMedicineCreate) sqlSave(ctx context.Context) (*DispenseMedicine, error) {
	dm, _spec := dmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dmc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	dm.ID = int(id)
	return dm, nil
}

func (dmc *DispenseMedicineCreate) createSpec() (*DispenseMedicine, *sqlgraph.CreateSpec) {
	var (
		dm    = &DispenseMedicine{config: dmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: dispensemedicine.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dispensemedicine.FieldID,
			},
		}
	)
	if value, ok := dmc.mutation.Datetime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dispensemedicine.FieldDatetime,
		})
		dm.Datetime = value
	}
	if value, ok := dmc.mutation.Note(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dispensemedicine.FieldNote,
		})
		dm.Note = value
	}
	if value, ok := dmc.mutation.Amountchangemedicine(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: dispensemedicine.FieldAmountchangemedicine,
		})
		dm.Amountchangemedicine = value
	}
	if value, ok := dmc.mutation.Detailchangemedicine(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dispensemedicine.FieldDetailchangemedicine,
		})
		dm.Detailchangemedicine = value
	}
	if nodes := dmc.mutation.PharmacistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dispensemedicine.PharmacistTable,
			Columns: []string{dispensemedicine.PharmacistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pharmacist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dmc.mutation.AnnotationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dispensemedicine.AnnotationTable,
			Columns: []string{dispensemedicine.AnnotationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: annotation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dmc.mutation.PrescriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   dispensemedicine.PrescriptionTable,
			Columns: []string{dispensemedicine.PrescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prescription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dmc.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   dispensemedicine.BillsTable,
			Columns: []string{dispensemedicine.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return dm, _spec
}

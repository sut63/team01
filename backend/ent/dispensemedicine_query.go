// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team01/ent/annotation"
	"github.com/sut63/team01/ent/bill"
	"github.com/sut63/team01/ent/dispensemedicine"
	"github.com/sut63/team01/ent/pharmacist"
	"github.com/sut63/team01/ent/predicate"
	"github.com/sut63/team01/ent/prescription"
)

// DispenseMedicineQuery is the builder for querying DispenseMedicine entities.
type DispenseMedicineQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.DispenseMedicine
	// eager-loading edges.
	withPharmacist   *PharmacistQuery
	withAnnotation   *AnnotationQuery
	withPrescription *PrescriptionQuery
	withBills        *BillQuery
	withFKs          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (dmq *DispenseMedicineQuery) Where(ps ...predicate.DispenseMedicine) *DispenseMedicineQuery {
	dmq.predicates = append(dmq.predicates, ps...)
	return dmq
}

// Limit adds a limit step to the query.
func (dmq *DispenseMedicineQuery) Limit(limit int) *DispenseMedicineQuery {
	dmq.limit = &limit
	return dmq
}

// Offset adds an offset step to the query.
func (dmq *DispenseMedicineQuery) Offset(offset int) *DispenseMedicineQuery {
	dmq.offset = &offset
	return dmq
}

// Order adds an order step to the query.
func (dmq *DispenseMedicineQuery) Order(o ...OrderFunc) *DispenseMedicineQuery {
	dmq.order = append(dmq.order, o...)
	return dmq
}

// QueryPharmacist chains the current query on the pharmacist edge.
func (dmq *DispenseMedicineQuery) QueryPharmacist() *PharmacistQuery {
	query := &PharmacistQuery{config: dmq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dispensemedicine.Table, dispensemedicine.FieldID, dmq.sqlQuery()),
			sqlgraph.To(pharmacist.Table, pharmacist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dispensemedicine.PharmacistTable, dispensemedicine.PharmacistColumn),
		)
		fromU = sqlgraph.SetNeighbors(dmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAnnotation chains the current query on the annotation edge.
func (dmq *DispenseMedicineQuery) QueryAnnotation() *AnnotationQuery {
	query := &AnnotationQuery{config: dmq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dispensemedicine.Table, dispensemedicine.FieldID, dmq.sqlQuery()),
			sqlgraph.To(annotation.Table, annotation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dispensemedicine.AnnotationTable, dispensemedicine.AnnotationColumn),
		)
		fromU = sqlgraph.SetNeighbors(dmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrescription chains the current query on the prescription edge.
func (dmq *DispenseMedicineQuery) QueryPrescription() *PrescriptionQuery {
	query := &PrescriptionQuery{config: dmq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dispensemedicine.Table, dispensemedicine.FieldID, dmq.sqlQuery()),
			sqlgraph.To(prescription.Table, prescription.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, dispensemedicine.PrescriptionTable, dispensemedicine.PrescriptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(dmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBills chains the current query on the Bills edge.
func (dmq *DispenseMedicineQuery) QueryBills() *BillQuery {
	query := &BillQuery{config: dmq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dispensemedicine.Table, dispensemedicine.FieldID, dmq.sqlQuery()),
			sqlgraph.To(bill.Table, bill.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, dispensemedicine.BillsTable, dispensemedicine.BillsColumn),
		)
		fromU = sqlgraph.SetNeighbors(dmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DispenseMedicine entity in the query. Returns *NotFoundError when no dispensemedicine was found.
func (dmq *DispenseMedicineQuery) First(ctx context.Context) (*DispenseMedicine, error) {
	dms, err := dmq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(dms) == 0 {
		return nil, &NotFoundError{dispensemedicine.Label}
	}
	return dms[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dmq *DispenseMedicineQuery) FirstX(ctx context.Context) *DispenseMedicine {
	dm, err := dmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return dm
}

// FirstID returns the first DispenseMedicine id in the query. Returns *NotFoundError when no id was found.
func (dmq *DispenseMedicineQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = dmq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{dispensemedicine.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (dmq *DispenseMedicineQuery) FirstXID(ctx context.Context) int {
	id, err := dmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only DispenseMedicine entity in the query, returns an error if not exactly one entity was returned.
func (dmq *DispenseMedicineQuery) Only(ctx context.Context) (*DispenseMedicine, error) {
	dms, err := dmq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(dms) {
	case 1:
		return dms[0], nil
	case 0:
		return nil, &NotFoundError{dispensemedicine.Label}
	default:
		return nil, &NotSingularError{dispensemedicine.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dmq *DispenseMedicineQuery) OnlyX(ctx context.Context) *DispenseMedicine {
	dm, err := dmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return dm
}

// OnlyID returns the only DispenseMedicine id in the query, returns an error if not exactly one id was returned.
func (dmq *DispenseMedicineQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = dmq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{dispensemedicine.Label}
	default:
		err = &NotSingularError{dispensemedicine.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dmq *DispenseMedicineQuery) OnlyIDX(ctx context.Context) int {
	id, err := dmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DispenseMedicines.
func (dmq *DispenseMedicineQuery) All(ctx context.Context) ([]*DispenseMedicine, error) {
	if err := dmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return dmq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (dmq *DispenseMedicineQuery) AllX(ctx context.Context) []*DispenseMedicine {
	dms, err := dmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return dms
}

// IDs executes the query and returns a list of DispenseMedicine ids.
func (dmq *DispenseMedicineQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := dmq.Select(dispensemedicine.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dmq *DispenseMedicineQuery) IDsX(ctx context.Context) []int {
	ids, err := dmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dmq *DispenseMedicineQuery) Count(ctx context.Context) (int, error) {
	if err := dmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return dmq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (dmq *DispenseMedicineQuery) CountX(ctx context.Context) int {
	count, err := dmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dmq *DispenseMedicineQuery) Exist(ctx context.Context) (bool, error) {
	if err := dmq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return dmq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (dmq *DispenseMedicineQuery) ExistX(ctx context.Context) bool {
	exist, err := dmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dmq *DispenseMedicineQuery) Clone() *DispenseMedicineQuery {
	return &DispenseMedicineQuery{
		config:     dmq.config,
		limit:      dmq.limit,
		offset:     dmq.offset,
		order:      append([]OrderFunc{}, dmq.order...),
		unique:     append([]string{}, dmq.unique...),
		predicates: append([]predicate.DispenseMedicine{}, dmq.predicates...),
		// clone intermediate query.
		sql:  dmq.sql.Clone(),
		path: dmq.path,
	}
}

//  WithPharmacist tells the query-builder to eager-loads the nodes that are connected to
// the "pharmacist" edge. The optional arguments used to configure the query builder of the edge.
func (dmq *DispenseMedicineQuery) WithPharmacist(opts ...func(*PharmacistQuery)) *DispenseMedicineQuery {
	query := &PharmacistQuery{config: dmq.config}
	for _, opt := range opts {
		opt(query)
	}
	dmq.withPharmacist = query
	return dmq
}

//  WithAnnotation tells the query-builder to eager-loads the nodes that are connected to
// the "annotation" edge. The optional arguments used to configure the query builder of the edge.
func (dmq *DispenseMedicineQuery) WithAnnotation(opts ...func(*AnnotationQuery)) *DispenseMedicineQuery {
	query := &AnnotationQuery{config: dmq.config}
	for _, opt := range opts {
		opt(query)
	}
	dmq.withAnnotation = query
	return dmq
}

//  WithPrescription tells the query-builder to eager-loads the nodes that are connected to
// the "prescription" edge. The optional arguments used to configure the query builder of the edge.
func (dmq *DispenseMedicineQuery) WithPrescription(opts ...func(*PrescriptionQuery)) *DispenseMedicineQuery {
	query := &PrescriptionQuery{config: dmq.config}
	for _, opt := range opts {
		opt(query)
	}
	dmq.withPrescription = query
	return dmq
}

//  WithBills tells the query-builder to eager-loads the nodes that are connected to
// the "Bills" edge. The optional arguments used to configure the query builder of the edge.
func (dmq *DispenseMedicineQuery) WithBills(opts ...func(*BillQuery)) *DispenseMedicineQuery {
	query := &BillQuery{config: dmq.config}
	for _, opt := range opts {
		opt(query)
	}
	dmq.withBills = query
	return dmq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Datetime time.Time `json:"datetime,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DispenseMedicine.Query().
//		GroupBy(dispensemedicine.FieldDatetime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (dmq *DispenseMedicineQuery) GroupBy(field string, fields ...string) *DispenseMedicineGroupBy {
	group := &DispenseMedicineGroupBy{config: dmq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := dmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return dmq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Datetime time.Time `json:"datetime,omitempty"`
//	}
//
//	client.DispenseMedicine.Query().
//		Select(dispensemedicine.FieldDatetime).
//		Scan(ctx, &v)
//
func (dmq *DispenseMedicineQuery) Select(field string, fields ...string) *DispenseMedicineSelect {
	selector := &DispenseMedicineSelect{config: dmq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := dmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return dmq.sqlQuery(), nil
	}
	return selector
}

func (dmq *DispenseMedicineQuery) prepareQuery(ctx context.Context) error {
	if dmq.path != nil {
		prev, err := dmq.path(ctx)
		if err != nil {
			return err
		}
		dmq.sql = prev
	}
	return nil
}

func (dmq *DispenseMedicineQuery) sqlAll(ctx context.Context) ([]*DispenseMedicine, error) {
	var (
		nodes       = []*DispenseMedicine{}
		withFKs     = dmq.withFKs
		_spec       = dmq.querySpec()
		loadedTypes = [4]bool{
			dmq.withPharmacist != nil,
			dmq.withAnnotation != nil,
			dmq.withPrescription != nil,
			dmq.withBills != nil,
		}
	)
	if dmq.withPharmacist != nil || dmq.withAnnotation != nil || dmq.withPrescription != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, dispensemedicine.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &DispenseMedicine{config: dmq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, dmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := dmq.withPharmacist; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*DispenseMedicine)
		for i := range nodes {
			if fk := nodes[i].pharmacist_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(pharmacist.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "pharmacist_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Pharmacist = n
			}
		}
	}

	if query := dmq.withAnnotation; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*DispenseMedicine)
		for i := range nodes {
			if fk := nodes[i].annotation_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(annotation.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "annotation_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Annotation = n
			}
		}
	}

	if query := dmq.withPrescription; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*DispenseMedicine)
		for i := range nodes {
			if fk := nodes[i].prescription_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(prescription.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "prescription_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Prescription = n
			}
		}
	}

	if query := dmq.withBills; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*DispenseMedicine)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Bill(func(s *sql.Selector) {
			s.Where(sql.InValues(dispensemedicine.BillsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.dispensemedicine_id
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "dispensemedicine_id" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "dispensemedicine_id" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Bills = n
		}
	}

	return nodes, nil
}

func (dmq *DispenseMedicineQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dmq.querySpec()
	return sqlgraph.CountNodes(ctx, dmq.driver, _spec)
}

func (dmq *DispenseMedicineQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := dmq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (dmq *DispenseMedicineQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dispensemedicine.Table,
			Columns: dispensemedicine.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dispensemedicine.FieldID,
			},
		},
		From:   dmq.sql,
		Unique: true,
	}
	if ps := dmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dmq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dmq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dmq *DispenseMedicineQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(dmq.driver.Dialect())
	t1 := builder.Table(dispensemedicine.Table)
	selector := builder.Select(t1.Columns(dispensemedicine.Columns...)...).From(t1)
	if dmq.sql != nil {
		selector = dmq.sql
		selector.Select(selector.Columns(dispensemedicine.Columns...)...)
	}
	for _, p := range dmq.predicates {
		p(selector)
	}
	for _, p := range dmq.order {
		p(selector)
	}
	if offset := dmq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dmq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DispenseMedicineGroupBy is the builder for group-by DispenseMedicine entities.
type DispenseMedicineGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dmgb *DispenseMedicineGroupBy) Aggregate(fns ...AggregateFunc) *DispenseMedicineGroupBy {
	dmgb.fns = append(dmgb.fns, fns...)
	return dmgb
}

// Scan applies the group-by query and scan the result into the given value.
func (dmgb *DispenseMedicineGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := dmgb.path(ctx)
	if err != nil {
		return err
	}
	dmgb.sql = query
	return dmgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (dmgb *DispenseMedicineGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := dmgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (dmgb *DispenseMedicineGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(dmgb.fields) > 1 {
		return nil, errors.New("ent: DispenseMedicineGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := dmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (dmgb *DispenseMedicineGroupBy) StringsX(ctx context.Context) []string {
	v, err := dmgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (dmgb *DispenseMedicineGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = dmgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dispensemedicine.Label}
	default:
		err = fmt.Errorf("ent: DispenseMedicineGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (dmgb *DispenseMedicineGroupBy) StringX(ctx context.Context) string {
	v, err := dmgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (dmgb *DispenseMedicineGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(dmgb.fields) > 1 {
		return nil, errors.New("ent: DispenseMedicineGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := dmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (dmgb *DispenseMedicineGroupBy) IntsX(ctx context.Context) []int {
	v, err := dmgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (dmgb *DispenseMedicineGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = dmgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dispensemedicine.Label}
	default:
		err = fmt.Errorf("ent: DispenseMedicineGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (dmgb *DispenseMedicineGroupBy) IntX(ctx context.Context) int {
	v, err := dmgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (dmgb *DispenseMedicineGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(dmgb.fields) > 1 {
		return nil, errors.New("ent: DispenseMedicineGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := dmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (dmgb *DispenseMedicineGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := dmgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (dmgb *DispenseMedicineGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = dmgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dispensemedicine.Label}
	default:
		err = fmt.Errorf("ent: DispenseMedicineGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (dmgb *DispenseMedicineGroupBy) Float64X(ctx context.Context) float64 {
	v, err := dmgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (dmgb *DispenseMedicineGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(dmgb.fields) > 1 {
		return nil, errors.New("ent: DispenseMedicineGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := dmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (dmgb *DispenseMedicineGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := dmgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (dmgb *DispenseMedicineGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = dmgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dispensemedicine.Label}
	default:
		err = fmt.Errorf("ent: DispenseMedicineGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (dmgb *DispenseMedicineGroupBy) BoolX(ctx context.Context) bool {
	v, err := dmgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dmgb *DispenseMedicineGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := dmgb.sqlQuery().Query()
	if err := dmgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (dmgb *DispenseMedicineGroupBy) sqlQuery() *sql.Selector {
	selector := dmgb.sql
	columns := make([]string, 0, len(dmgb.fields)+len(dmgb.fns))
	columns = append(columns, dmgb.fields...)
	for _, fn := range dmgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(dmgb.fields...)
}

// DispenseMedicineSelect is the builder for select fields of DispenseMedicine entities.
type DispenseMedicineSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (dms *DispenseMedicineSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := dms.path(ctx)
	if err != nil {
		return err
	}
	dms.sql = query
	return dms.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (dms *DispenseMedicineSelect) ScanX(ctx context.Context, v interface{}) {
	if err := dms.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (dms *DispenseMedicineSelect) Strings(ctx context.Context) ([]string, error) {
	if len(dms.fields) > 1 {
		return nil, errors.New("ent: DispenseMedicineSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := dms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (dms *DispenseMedicineSelect) StringsX(ctx context.Context) []string {
	v, err := dms.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (dms *DispenseMedicineSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = dms.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dispensemedicine.Label}
	default:
		err = fmt.Errorf("ent: DispenseMedicineSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (dms *DispenseMedicineSelect) StringX(ctx context.Context) string {
	v, err := dms.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (dms *DispenseMedicineSelect) Ints(ctx context.Context) ([]int, error) {
	if len(dms.fields) > 1 {
		return nil, errors.New("ent: DispenseMedicineSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := dms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (dms *DispenseMedicineSelect) IntsX(ctx context.Context) []int {
	v, err := dms.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (dms *DispenseMedicineSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = dms.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dispensemedicine.Label}
	default:
		err = fmt.Errorf("ent: DispenseMedicineSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (dms *DispenseMedicineSelect) IntX(ctx context.Context) int {
	v, err := dms.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (dms *DispenseMedicineSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(dms.fields) > 1 {
		return nil, errors.New("ent: DispenseMedicineSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := dms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (dms *DispenseMedicineSelect) Float64sX(ctx context.Context) []float64 {
	v, err := dms.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (dms *DispenseMedicineSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = dms.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dispensemedicine.Label}
	default:
		err = fmt.Errorf("ent: DispenseMedicineSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (dms *DispenseMedicineSelect) Float64X(ctx context.Context) float64 {
	v, err := dms.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (dms *DispenseMedicineSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(dms.fields) > 1 {
		return nil, errors.New("ent: DispenseMedicineSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := dms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (dms *DispenseMedicineSelect) BoolsX(ctx context.Context) []bool {
	v, err := dms.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (dms *DispenseMedicineSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = dms.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dispensemedicine.Label}
	default:
		err = fmt.Errorf("ent: DispenseMedicineSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (dms *DispenseMedicineSelect) BoolX(ctx context.Context) bool {
	v, err := dms.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dms *DispenseMedicineSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := dms.sqlQuery().Query()
	if err := dms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (dms *DispenseMedicineSelect) sqlQuery() sql.Querier {
	selector := dms.sql
	selector.Select(selector.Columns(dms.fields...)...)
	return selector
}

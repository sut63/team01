// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team01/ent/annotation"
	"github.com/sut63/team01/ent/bill"
	"github.com/sut63/team01/ent/dispensemedicine"
	"github.com/sut63/team01/ent/pharmacist"
	"github.com/sut63/team01/ent/predicate"
	"github.com/sut63/team01/ent/prescription"
)

// DispenseMedicineUpdate is the builder for updating DispenseMedicine entities.
type DispenseMedicineUpdate struct {
	config
	hooks      []Hook
	mutation   *DispenseMedicineMutation
	predicates []predicate.DispenseMedicine
}

// Where adds a new predicate for the builder.
func (dmu *DispenseMedicineUpdate) Where(ps ...predicate.DispenseMedicine) *DispenseMedicineUpdate {
	dmu.predicates = append(dmu.predicates, ps...)
	return dmu
}

// SetDatetime sets the datetime field.
func (dmu *DispenseMedicineUpdate) SetDatetime(t time.Time) *DispenseMedicineUpdate {
	dmu.mutation.SetDatetime(t)
	return dmu
}

// SetNote sets the note field.
func (dmu *DispenseMedicineUpdate) SetNote(s string) *DispenseMedicineUpdate {
	dmu.mutation.SetNote(s)
	return dmu
}

// SetAmountchangemedicine sets the amountchangemedicine field.
func (dmu *DispenseMedicineUpdate) SetAmountchangemedicine(i int) *DispenseMedicineUpdate {
	dmu.mutation.ResetAmountchangemedicine()
	dmu.mutation.SetAmountchangemedicine(i)
	return dmu
}

// AddAmountchangemedicine adds i to amountchangemedicine.
func (dmu *DispenseMedicineUpdate) AddAmountchangemedicine(i int) *DispenseMedicineUpdate {
	dmu.mutation.AddAmountchangemedicine(i)
	return dmu
}

// SetDetailchangemedicine sets the detailchangemedicine field.
func (dmu *DispenseMedicineUpdate) SetDetailchangemedicine(s string) *DispenseMedicineUpdate {
	dmu.mutation.SetDetailchangemedicine(s)
	return dmu
}

// SetPharmacistID sets the pharmacist edge to Pharmacist by id.
func (dmu *DispenseMedicineUpdate) SetPharmacistID(id int) *DispenseMedicineUpdate {
	dmu.mutation.SetPharmacistID(id)
	return dmu
}

// SetNillablePharmacistID sets the pharmacist edge to Pharmacist by id if the given value is not nil.
func (dmu *DispenseMedicineUpdate) SetNillablePharmacistID(id *int) *DispenseMedicineUpdate {
	if id != nil {
		dmu = dmu.SetPharmacistID(*id)
	}
	return dmu
}

// SetPharmacist sets the pharmacist edge to Pharmacist.
func (dmu *DispenseMedicineUpdate) SetPharmacist(p *Pharmacist) *DispenseMedicineUpdate {
	return dmu.SetPharmacistID(p.ID)
}

// SetAnnotationID sets the annotation edge to Annotation by id.
func (dmu *DispenseMedicineUpdate) SetAnnotationID(id int) *DispenseMedicineUpdate {
	dmu.mutation.SetAnnotationID(id)
	return dmu
}

// SetNillableAnnotationID sets the annotation edge to Annotation by id if the given value is not nil.
func (dmu *DispenseMedicineUpdate) SetNillableAnnotationID(id *int) *DispenseMedicineUpdate {
	if id != nil {
		dmu = dmu.SetAnnotationID(*id)
	}
	return dmu
}

// SetAnnotation sets the annotation edge to Annotation.
func (dmu *DispenseMedicineUpdate) SetAnnotation(a *Annotation) *DispenseMedicineUpdate {
	return dmu.SetAnnotationID(a.ID)
}

// SetPrescriptionID sets the prescription edge to Prescription by id.
func (dmu *DispenseMedicineUpdate) SetPrescriptionID(id int) *DispenseMedicineUpdate {
	dmu.mutation.SetPrescriptionID(id)
	return dmu
}

// SetNillablePrescriptionID sets the prescription edge to Prescription by id if the given value is not nil.
func (dmu *DispenseMedicineUpdate) SetNillablePrescriptionID(id *int) *DispenseMedicineUpdate {
	if id != nil {
		dmu = dmu.SetPrescriptionID(*id)
	}
	return dmu
}

// SetPrescription sets the prescription edge to Prescription.
func (dmu *DispenseMedicineUpdate) SetPrescription(p *Prescription) *DispenseMedicineUpdate {
	return dmu.SetPrescriptionID(p.ID)
}

// SetBillsID sets the Bills edge to Bill by id.
func (dmu *DispenseMedicineUpdate) SetBillsID(id int) *DispenseMedicineUpdate {
	dmu.mutation.SetBillsID(id)
	return dmu
}

// SetNillableBillsID sets the Bills edge to Bill by id if the given value is not nil.
func (dmu *DispenseMedicineUpdate) SetNillableBillsID(id *int) *DispenseMedicineUpdate {
	if id != nil {
		dmu = dmu.SetBillsID(*id)
	}
	return dmu
}

// SetBills sets the Bills edge to Bill.
func (dmu *DispenseMedicineUpdate) SetBills(b *Bill) *DispenseMedicineUpdate {
	return dmu.SetBillsID(b.ID)
}

// Mutation returns the DispenseMedicineMutation object of the builder.
func (dmu *DispenseMedicineUpdate) Mutation() *DispenseMedicineMutation {
	return dmu.mutation
}

// ClearPharmacist clears the pharmacist edge to Pharmacist.
func (dmu *DispenseMedicineUpdate) ClearPharmacist() *DispenseMedicineUpdate {
	dmu.mutation.ClearPharmacist()
	return dmu
}

// ClearAnnotation clears the annotation edge to Annotation.
func (dmu *DispenseMedicineUpdate) ClearAnnotation() *DispenseMedicineUpdate {
	dmu.mutation.ClearAnnotation()
	return dmu
}

// ClearPrescription clears the prescription edge to Prescription.
func (dmu *DispenseMedicineUpdate) ClearPrescription() *DispenseMedicineUpdate {
	dmu.mutation.ClearPrescription()
	return dmu
}

// ClearBills clears the Bills edge to Bill.
func (dmu *DispenseMedicineUpdate) ClearBills() *DispenseMedicineUpdate {
	dmu.mutation.ClearBills()
	return dmu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (dmu *DispenseMedicineUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := dmu.mutation.Note(); ok {
		if err := dispensemedicine.NoteValidator(v); err != nil {
			return 0, &ValidationError{Name: "note", err: fmt.Errorf("ent: validator failed for field \"note\": %w", err)}
		}
	}
	if v, ok := dmu.mutation.Amountchangemedicine(); ok {
		if err := dispensemedicine.AmountchangemedicineValidator(v); err != nil {
			return 0, &ValidationError{Name: "amountchangemedicine", err: fmt.Errorf("ent: validator failed for field \"amountchangemedicine\": %w", err)}
		}
	}
	if v, ok := dmu.mutation.Detailchangemedicine(); ok {
		if err := dispensemedicine.DetailchangemedicineValidator(v); err != nil {
			return 0, &ValidationError{Name: "detailchangemedicine", err: fmt.Errorf("ent: validator failed for field \"detailchangemedicine\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(dmu.hooks) == 0 {
		affected, err = dmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DispenseMedicineMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dmu.mutation = mutation
			affected, err = dmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dmu.hooks) - 1; i >= 0; i-- {
			mut = dmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dmu *DispenseMedicineUpdate) SaveX(ctx context.Context) int {
	affected, err := dmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dmu *DispenseMedicineUpdate) Exec(ctx context.Context) error {
	_, err := dmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmu *DispenseMedicineUpdate) ExecX(ctx context.Context) {
	if err := dmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dmu *DispenseMedicineUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dispensemedicine.Table,
			Columns: dispensemedicine.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dispensemedicine.FieldID,
			},
		},
	}
	if ps := dmu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dmu.mutation.Datetime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dispensemedicine.FieldDatetime,
		})
	}
	if value, ok := dmu.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dispensemedicine.FieldNote,
		})
	}
	if value, ok := dmu.mutation.Amountchangemedicine(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: dispensemedicine.FieldAmountchangemedicine,
		})
	}
	if value, ok := dmu.mutation.AddedAmountchangemedicine(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: dispensemedicine.FieldAmountchangemedicine,
		})
	}
	if value, ok := dmu.mutation.Detailchangemedicine(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dispensemedicine.FieldDetailchangemedicine,
		})
	}
	if dmu.mutation.PharmacistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dispensemedicine.PharmacistTable,
			Columns: []string{dispensemedicine.PharmacistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pharmacist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmu.mutation.PharmacistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dispensemedicine.PharmacistTable,
			Columns: []string{dispensemedicine.PharmacistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pharmacist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dmu.mutation.AnnotationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dispensemedicine.AnnotationTable,
			Columns: []string{dispensemedicine.AnnotationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: annotation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmu.mutation.AnnotationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dispensemedicine.AnnotationTable,
			Columns: []string{dispensemedicine.AnnotationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: annotation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dmu.mutation.PrescriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   dispensemedicine.PrescriptionTable,
			Columns: []string{dispensemedicine.PrescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prescription.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmu.mutation.PrescriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   dispensemedicine.PrescriptionTable,
			Columns: []string{dispensemedicine.PrescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prescription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dmu.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   dispensemedicine.BillsTable,
			Columns: []string{dispensemedicine.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bill.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmu.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   dispensemedicine.BillsTable,
			Columns: []string{dispensemedicine.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dispensemedicine.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DispenseMedicineUpdateOne is the builder for updating a single DispenseMedicine entity.
type DispenseMedicineUpdateOne struct {
	config
	hooks    []Hook
	mutation *DispenseMedicineMutation
}

// SetDatetime sets the datetime field.
func (dmuo *DispenseMedicineUpdateOne) SetDatetime(t time.Time) *DispenseMedicineUpdateOne {
	dmuo.mutation.SetDatetime(t)
	return dmuo
}

// SetNote sets the note field.
func (dmuo *DispenseMedicineUpdateOne) SetNote(s string) *DispenseMedicineUpdateOne {
	dmuo.mutation.SetNote(s)
	return dmuo
}

// SetAmountchangemedicine sets the amountchangemedicine field.
func (dmuo *DispenseMedicineUpdateOne) SetAmountchangemedicine(i int) *DispenseMedicineUpdateOne {
	dmuo.mutation.ResetAmountchangemedicine()
	dmuo.mutation.SetAmountchangemedicine(i)
	return dmuo
}

// AddAmountchangemedicine adds i to amountchangemedicine.
func (dmuo *DispenseMedicineUpdateOne) AddAmountchangemedicine(i int) *DispenseMedicineUpdateOne {
	dmuo.mutation.AddAmountchangemedicine(i)
	return dmuo
}

// SetDetailchangemedicine sets the detailchangemedicine field.
func (dmuo *DispenseMedicineUpdateOne) SetDetailchangemedicine(s string) *DispenseMedicineUpdateOne {
	dmuo.mutation.SetDetailchangemedicine(s)
	return dmuo
}

// SetPharmacistID sets the pharmacist edge to Pharmacist by id.
func (dmuo *DispenseMedicineUpdateOne) SetPharmacistID(id int) *DispenseMedicineUpdateOne {
	dmuo.mutation.SetPharmacistID(id)
	return dmuo
}

// SetNillablePharmacistID sets the pharmacist edge to Pharmacist by id if the given value is not nil.
func (dmuo *DispenseMedicineUpdateOne) SetNillablePharmacistID(id *int) *DispenseMedicineUpdateOne {
	if id != nil {
		dmuo = dmuo.SetPharmacistID(*id)
	}
	return dmuo
}

// SetPharmacist sets the pharmacist edge to Pharmacist.
func (dmuo *DispenseMedicineUpdateOne) SetPharmacist(p *Pharmacist) *DispenseMedicineUpdateOne {
	return dmuo.SetPharmacistID(p.ID)
}

// SetAnnotationID sets the annotation edge to Annotation by id.
func (dmuo *DispenseMedicineUpdateOne) SetAnnotationID(id int) *DispenseMedicineUpdateOne {
	dmuo.mutation.SetAnnotationID(id)
	return dmuo
}

// SetNillableAnnotationID sets the annotation edge to Annotation by id if the given value is not nil.
func (dmuo *DispenseMedicineUpdateOne) SetNillableAnnotationID(id *int) *DispenseMedicineUpdateOne {
	if id != nil {
		dmuo = dmuo.SetAnnotationID(*id)
	}
	return dmuo
}

// SetAnnotation sets the annotation edge to Annotation.
func (dmuo *DispenseMedicineUpdateOne) SetAnnotation(a *Annotation) *DispenseMedicineUpdateOne {
	return dmuo.SetAnnotationID(a.ID)
}

// SetPrescriptionID sets the prescription edge to Prescription by id.
func (dmuo *DispenseMedicineUpdateOne) SetPrescriptionID(id int) *DispenseMedicineUpdateOne {
	dmuo.mutation.SetPrescriptionID(id)
	return dmuo
}

// SetNillablePrescriptionID sets the prescription edge to Prescription by id if the given value is not nil.
func (dmuo *DispenseMedicineUpdateOne) SetNillablePrescriptionID(id *int) *DispenseMedicineUpdateOne {
	if id != nil {
		dmuo = dmuo.SetPrescriptionID(*id)
	}
	return dmuo
}

// SetPrescription sets the prescription edge to Prescription.
func (dmuo *DispenseMedicineUpdateOne) SetPrescription(p *Prescription) *DispenseMedicineUpdateOne {
	return dmuo.SetPrescriptionID(p.ID)
}

// SetBillsID sets the Bills edge to Bill by id.
func (dmuo *DispenseMedicineUpdateOne) SetBillsID(id int) *DispenseMedicineUpdateOne {
	dmuo.mutation.SetBillsID(id)
	return dmuo
}

// SetNillableBillsID sets the Bills edge to Bill by id if the given value is not nil.
func (dmuo *DispenseMedicineUpdateOne) SetNillableBillsID(id *int) *DispenseMedicineUpdateOne {
	if id != nil {
		dmuo = dmuo.SetBillsID(*id)
	}
	return dmuo
}

// SetBills sets the Bills edge to Bill.
func (dmuo *DispenseMedicineUpdateOne) SetBills(b *Bill) *DispenseMedicineUpdateOne {
	return dmuo.SetBillsID(b.ID)
}

// Mutation returns the DispenseMedicineMutation object of the builder.
func (dmuo *DispenseMedicineUpdateOne) Mutation() *DispenseMedicineMutation {
	return dmuo.mutation
}

// ClearPharmacist clears the pharmacist edge to Pharmacist.
func (dmuo *DispenseMedicineUpdateOne) ClearPharmacist() *DispenseMedicineUpdateOne {
	dmuo.mutation.ClearPharmacist()
	return dmuo
}

// ClearAnnotation clears the annotation edge to Annotation.
func (dmuo *DispenseMedicineUpdateOne) ClearAnnotation() *DispenseMedicineUpdateOne {
	dmuo.mutation.ClearAnnotation()
	return dmuo
}

// ClearPrescription clears the prescription edge to Prescription.
func (dmuo *DispenseMedicineUpdateOne) ClearPrescription() *DispenseMedicineUpdateOne {
	dmuo.mutation.ClearPrescription()
	return dmuo
}

// ClearBills clears the Bills edge to Bill.
func (dmuo *DispenseMedicineUpdateOne) ClearBills() *DispenseMedicineUpdateOne {
	dmuo.mutation.ClearBills()
	return dmuo
}

// Save executes the query and returns the updated entity.
func (dmuo *DispenseMedicineUpdateOne) Save(ctx context.Context) (*DispenseMedicine, error) {
	if v, ok := dmuo.mutation.Note(); ok {
		if err := dispensemedicine.NoteValidator(v); err != nil {
			return nil, &ValidationError{Name: "note", err: fmt.Errorf("ent: validator failed for field \"note\": %w", err)}
		}
	}
	if v, ok := dmuo.mutation.Amountchangemedicine(); ok {
		if err := dispensemedicine.AmountchangemedicineValidator(v); err != nil {
			return nil, &ValidationError{Name: "amountchangemedicine", err: fmt.Errorf("ent: validator failed for field \"amountchangemedicine\": %w", err)}
		}
	}
	if v, ok := dmuo.mutation.Detailchangemedicine(); ok {
		if err := dispensemedicine.DetailchangemedicineValidator(v); err != nil {
			return nil, &ValidationError{Name: "detailchangemedicine", err: fmt.Errorf("ent: validator failed for field \"detailchangemedicine\": %w", err)}
		}
	}

	var (
		err  error
		node *DispenseMedicine
	)
	if len(dmuo.hooks) == 0 {
		node, err = dmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DispenseMedicineMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dmuo.mutation = mutation
			node, err = dmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dmuo.hooks) - 1; i >= 0; i-- {
			mut = dmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dmuo *DispenseMedicineUpdateOne) SaveX(ctx context.Context) *DispenseMedicine {
	dm, err := dmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return dm
}

// Exec executes the query on the entity.
func (dmuo *DispenseMedicineUpdateOne) Exec(ctx context.Context) error {
	_, err := dmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmuo *DispenseMedicineUpdateOne) ExecX(ctx context.Context) {
	if err := dmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dmuo *DispenseMedicineUpdateOne) sqlSave(ctx context.Context) (dm *DispenseMedicine, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dispensemedicine.Table,
			Columns: dispensemedicine.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dispensemedicine.FieldID,
			},
		},
	}
	id, ok := dmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing DispenseMedicine.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := dmuo.mutation.Datetime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dispensemedicine.FieldDatetime,
		})
	}
	if value, ok := dmuo.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dispensemedicine.FieldNote,
		})
	}
	if value, ok := dmuo.mutation.Amountchangemedicine(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: dispensemedicine.FieldAmountchangemedicine,
		})
	}
	if value, ok := dmuo.mutation.AddedAmountchangemedicine(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: dispensemedicine.FieldAmountchangemedicine,
		})
	}
	if value, ok := dmuo.mutation.Detailchangemedicine(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dispensemedicine.FieldDetailchangemedicine,
		})
	}
	if dmuo.mutation.PharmacistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dispensemedicine.PharmacistTable,
			Columns: []string{dispensemedicine.PharmacistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pharmacist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmuo.mutation.PharmacistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dispensemedicine.PharmacistTable,
			Columns: []string{dispensemedicine.PharmacistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pharmacist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dmuo.mutation.AnnotationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dispensemedicine.AnnotationTable,
			Columns: []string{dispensemedicine.AnnotationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: annotation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmuo.mutation.AnnotationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dispensemedicine.AnnotationTable,
			Columns: []string{dispensemedicine.AnnotationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: annotation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dmuo.mutation.PrescriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   dispensemedicine.PrescriptionTable,
			Columns: []string{dispensemedicine.PrescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prescription.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmuo.mutation.PrescriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   dispensemedicine.PrescriptionTable,
			Columns: []string{dispensemedicine.PrescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prescription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dmuo.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   dispensemedicine.BillsTable,
			Columns: []string{dispensemedicine.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bill.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmuo.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   dispensemedicine.BillsTable,
			Columns: []string{dispensemedicine.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	dm = &DispenseMedicine{config: dmuo.config}
	_spec.Assign = dm.assignValues
	_spec.ScanValues = dm.scanValues()
	if err = sqlgraph.UpdateNode(ctx, dmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dispensemedicine.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return dm, nil
}

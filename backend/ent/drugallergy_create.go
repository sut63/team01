// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team01/ent/drugallergy"
	"github.com/sut63/team01/ent/medicine"
	"github.com/sut63/team01/ent/patientinfo"
	"github.com/sut63/team01/ent/pharmacist"
)

// DrugAllergyCreate is the builder for creating a DrugAllergy entity.
type DrugAllergyCreate struct {
	config
	mutation *DrugAllergyMutation
	hooks    []Hook
}

// SetSymptom sets the symptom field.
func (dac *DrugAllergyCreate) SetSymptom(s string) *DrugAllergyCreate {
	dac.mutation.SetSymptom(s)
	return dac
}

// SetCongenitalDisease sets the congenitalDisease field.
func (dac *DrugAllergyCreate) SetCongenitalDisease(s string) *DrugAllergyCreate {
	dac.mutation.SetCongenitalDisease(s)
	return dac
}

// SetAnnotation sets the annotation field.
func (dac *DrugAllergyCreate) SetAnnotation(s string) *DrugAllergyCreate {
	dac.mutation.SetAnnotation(s)
	return dac
}

// SetDateTime sets the dateTime field.
func (dac *DrugAllergyCreate) SetDateTime(t time.Time) *DrugAllergyCreate {
	dac.mutation.SetDateTime(t)
	return dac
}

// SetPatientID sets the patient edge to PatientInfo by id.
func (dac *DrugAllergyCreate) SetPatientID(id int) *DrugAllergyCreate {
	dac.mutation.SetPatientID(id)
	return dac
}

// SetNillablePatientID sets the patient edge to PatientInfo by id if the given value is not nil.
func (dac *DrugAllergyCreate) SetNillablePatientID(id *int) *DrugAllergyCreate {
	if id != nil {
		dac = dac.SetPatientID(*id)
	}
	return dac
}

// SetPatient sets the patient edge to PatientInfo.
func (dac *DrugAllergyCreate) SetPatient(p *PatientInfo) *DrugAllergyCreate {
	return dac.SetPatientID(p.ID)
}

// SetMedicineID sets the medicine edge to Medicine by id.
func (dac *DrugAllergyCreate) SetMedicineID(id int) *DrugAllergyCreate {
	dac.mutation.SetMedicineID(id)
	return dac
}

// SetNillableMedicineID sets the medicine edge to Medicine by id if the given value is not nil.
func (dac *DrugAllergyCreate) SetNillableMedicineID(id *int) *DrugAllergyCreate {
	if id != nil {
		dac = dac.SetMedicineID(*id)
	}
	return dac
}

// SetMedicine sets the medicine edge to Medicine.
func (dac *DrugAllergyCreate) SetMedicine(m *Medicine) *DrugAllergyCreate {
	return dac.SetMedicineID(m.ID)
}

// SetPharmacistID sets the pharmacist edge to Pharmacist by id.
func (dac *DrugAllergyCreate) SetPharmacistID(id int) *DrugAllergyCreate {
	dac.mutation.SetPharmacistID(id)
	return dac
}

// SetNillablePharmacistID sets the pharmacist edge to Pharmacist by id if the given value is not nil.
func (dac *DrugAllergyCreate) SetNillablePharmacistID(id *int) *DrugAllergyCreate {
	if id != nil {
		dac = dac.SetPharmacistID(*id)
	}
	return dac
}

// SetPharmacist sets the pharmacist edge to Pharmacist.
func (dac *DrugAllergyCreate) SetPharmacist(p *Pharmacist) *DrugAllergyCreate {
	return dac.SetPharmacistID(p.ID)
}

// Mutation returns the DrugAllergyMutation object of the builder.
func (dac *DrugAllergyCreate) Mutation() *DrugAllergyMutation {
	return dac.mutation
}

// Save creates the DrugAllergy in the database.
func (dac *DrugAllergyCreate) Save(ctx context.Context) (*DrugAllergy, error) {
	if _, ok := dac.mutation.Symptom(); !ok {
		return nil, &ValidationError{Name: "symptom", err: errors.New("ent: missing required field \"symptom\"")}
	}
	if v, ok := dac.mutation.Symptom(); ok {
		if err := drugallergy.SymptomValidator(v); err != nil {
			return nil, &ValidationError{Name: "symptom", err: fmt.Errorf("ent: validator failed for field \"symptom\": %w", err)}
		}
	}
	if _, ok := dac.mutation.CongenitalDisease(); !ok {
		return nil, &ValidationError{Name: "congenitalDisease", err: errors.New("ent: missing required field \"congenitalDisease\"")}
	}
	if v, ok := dac.mutation.CongenitalDisease(); ok {
		if err := drugallergy.CongenitalDiseaseValidator(v); err != nil {
			return nil, &ValidationError{Name: "congenitalDisease", err: fmt.Errorf("ent: validator failed for field \"congenitalDisease\": %w", err)}
		}
	}
	if _, ok := dac.mutation.Annotation(); !ok {
		return nil, &ValidationError{Name: "annotation", err: errors.New("ent: missing required field \"annotation\"")}
	}
	if v, ok := dac.mutation.Annotation(); ok {
		if err := drugallergy.AnnotationValidator(v); err != nil {
			return nil, &ValidationError{Name: "annotation", err: fmt.Errorf("ent: validator failed for field \"annotation\": %w", err)}
		}
	}
	if _, ok := dac.mutation.DateTime(); !ok {
		return nil, &ValidationError{Name: "dateTime", err: errors.New("ent: missing required field \"dateTime\"")}
	}
	var (
		err  error
		node *DrugAllergy
	)
	if len(dac.hooks) == 0 {
		node, err = dac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DrugAllergyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dac.mutation = mutation
			node, err = dac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dac.hooks) - 1; i >= 0; i-- {
			mut = dac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dac *DrugAllergyCreate) SaveX(ctx context.Context) *DrugAllergy {
	v, err := dac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dac *DrugAllergyCreate) sqlSave(ctx context.Context) (*DrugAllergy, error) {
	da, _spec := dac.createSpec()
	if err := sqlgraph.CreateNode(ctx, dac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	da.ID = int(id)
	return da, nil
}

func (dac *DrugAllergyCreate) createSpec() (*DrugAllergy, *sqlgraph.CreateSpec) {
	var (
		da    = &DrugAllergy{config: dac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: drugallergy.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: drugallergy.FieldID,
			},
		}
	)
	if value, ok := dac.mutation.Symptom(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: drugallergy.FieldSymptom,
		})
		da.Symptom = value
	}
	if value, ok := dac.mutation.CongenitalDisease(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: drugallergy.FieldCongenitalDisease,
		})
		da.CongenitalDisease = value
	}
	if value, ok := dac.mutation.Annotation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: drugallergy.FieldAnnotation,
		})
		da.Annotation = value
	}
	if value, ok := dac.mutation.DateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: drugallergy.FieldDateTime,
		})
		da.DateTime = value
	}
	if nodes := dac.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drugallergy.PatientTable,
			Columns: []string{drugallergy.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dac.mutation.MedicineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drugallergy.MedicineTable,
			Columns: []string{drugallergy.MedicineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicine.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dac.mutation.PharmacistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drugallergy.PharmacistTable,
			Columns: []string{drugallergy.PharmacistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pharmacist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return da, _spec
}

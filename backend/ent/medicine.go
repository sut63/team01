// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team01/ent/levelofdangerous"
	"github.com/sut63/team01/ent/medicine"
	"github.com/sut63/team01/ent/medicinetype"
	"github.com/sut63/team01/ent/unitofmedicine"
)

// Medicine is the model entity for the Medicine schema.
type Medicine struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Serial holds the value of the "serial" field.
	Serial string `json:"serial,omitempty"`
	// Brand holds the value of the "brand" field.
	Brand string `json:"brand,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount int `json:"amount,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// Howtouse holds the value of the "howtouse" field.
	Howtouse string `json:"howtouse,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MedicineQuery when eager-loading is set.
	Edges                       MedicineEdges `json:"edges"`
	level_of_dangerous_medicine *int
	medicine_type_medicine      *int
	unit_of_medicine_medicine   *int
}

// MedicineEdges holds the relations/edges for other nodes in the graph.
type MedicineEdges struct {
	// LevelOfDangerous holds the value of the LevelOfDangerous edge.
	LevelOfDangerous *LevelOfDangerous
	// MedicineType holds the value of the MedicineType edge.
	MedicineType *MedicineType
	// UnitOfMedicine holds the value of the UnitOfMedicine edge.
	UnitOfMedicine *UnitOfMedicine
	// Drugallergys holds the value of the drugallergys edge.
	Drugallergys []*DrugAllergy
	// Medicinepresciption holds the value of the medicinepresciption edge.
	Medicinepresciption []*Prescription
	// Order holds the value of the order edge.
	Order []*Order
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// LevelOfDangerousOrErr returns the LevelOfDangerous value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MedicineEdges) LevelOfDangerousOrErr() (*LevelOfDangerous, error) {
	if e.loadedTypes[0] {
		if e.LevelOfDangerous == nil {
			// The edge LevelOfDangerous was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: levelofdangerous.Label}
		}
		return e.LevelOfDangerous, nil
	}
	return nil, &NotLoadedError{edge: "LevelOfDangerous"}
}

// MedicineTypeOrErr returns the MedicineType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MedicineEdges) MedicineTypeOrErr() (*MedicineType, error) {
	if e.loadedTypes[1] {
		if e.MedicineType == nil {
			// The edge MedicineType was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: medicinetype.Label}
		}
		return e.MedicineType, nil
	}
	return nil, &NotLoadedError{edge: "MedicineType"}
}

// UnitOfMedicineOrErr returns the UnitOfMedicine value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MedicineEdges) UnitOfMedicineOrErr() (*UnitOfMedicine, error) {
	if e.loadedTypes[2] {
		if e.UnitOfMedicine == nil {
			// The edge UnitOfMedicine was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: unitofmedicine.Label}
		}
		return e.UnitOfMedicine, nil
	}
	return nil, &NotLoadedError{edge: "UnitOfMedicine"}
}

// DrugallergysOrErr returns the Drugallergys value or an error if the edge
// was not loaded in eager-loading.
func (e MedicineEdges) DrugallergysOrErr() ([]*DrugAllergy, error) {
	if e.loadedTypes[3] {
		return e.Drugallergys, nil
	}
	return nil, &NotLoadedError{edge: "drugallergys"}
}

// MedicinepresciptionOrErr returns the Medicinepresciption value or an error if the edge
// was not loaded in eager-loading.
func (e MedicineEdges) MedicinepresciptionOrErr() ([]*Prescription, error) {
	if e.loadedTypes[4] {
		return e.Medicinepresciption, nil
	}
	return nil, &NotLoadedError{edge: "medicinepresciption"}
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading.
func (e MedicineEdges) OrderOrErr() ([]*Order, error) {
	if e.loadedTypes[5] {
		return e.Order, nil
	}
	return nil, &NotLoadedError{edge: "order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Medicine) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},   // id
		&sql.NullString{},  // name
		&sql.NullString{},  // serial
		&sql.NullString{},  // brand
		&sql.NullInt64{},   // amount
		&sql.NullFloat64{}, // price
		&sql.NullString{},  // howtouse
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Medicine) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // level_of_dangerous_medicine
		&sql.NullInt64{}, // medicine_type_medicine
		&sql.NullInt64{}, // unit_of_medicine_medicine
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Medicine fields.
func (m *Medicine) assignValues(values ...interface{}) error {
	if m, n := len(values), len(medicine.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	m.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		m.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field serial", values[1])
	} else if value.Valid {
		m.Serial = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field brand", values[2])
	} else if value.Valid {
		m.Brand = value.String
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field amount", values[3])
	} else if value.Valid {
		m.Amount = int(value.Int64)
	}
	if value, ok := values[4].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field price", values[4])
	} else if value.Valid {
		m.Price = value.Float64
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field howtouse", values[5])
	} else if value.Valid {
		m.Howtouse = value.String
	}
	values = values[6:]
	if len(values) == len(medicine.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field level_of_dangerous_medicine", value)
		} else if value.Valid {
			m.level_of_dangerous_medicine = new(int)
			*m.level_of_dangerous_medicine = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field medicine_type_medicine", value)
		} else if value.Valid {
			m.medicine_type_medicine = new(int)
			*m.medicine_type_medicine = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field unit_of_medicine_medicine", value)
		} else if value.Valid {
			m.unit_of_medicine_medicine = new(int)
			*m.unit_of_medicine_medicine = int(value.Int64)
		}
	}
	return nil
}

// QueryLevelOfDangerous queries the LevelOfDangerous edge of the Medicine.
func (m *Medicine) QueryLevelOfDangerous() *LevelOfDangerousQuery {
	return (&MedicineClient{config: m.config}).QueryLevelOfDangerous(m)
}

// QueryMedicineType queries the MedicineType edge of the Medicine.
func (m *Medicine) QueryMedicineType() *MedicineTypeQuery {
	return (&MedicineClient{config: m.config}).QueryMedicineType(m)
}

// QueryUnitOfMedicine queries the UnitOfMedicine edge of the Medicine.
func (m *Medicine) QueryUnitOfMedicine() *UnitOfMedicineQuery {
	return (&MedicineClient{config: m.config}).QueryUnitOfMedicine(m)
}

// QueryDrugallergys queries the drugallergys edge of the Medicine.
func (m *Medicine) QueryDrugallergys() *DrugAllergyQuery {
	return (&MedicineClient{config: m.config}).QueryDrugallergys(m)
}

// QueryMedicinepresciption queries the medicinepresciption edge of the Medicine.
func (m *Medicine) QueryMedicinepresciption() *PrescriptionQuery {
	return (&MedicineClient{config: m.config}).QueryMedicinepresciption(m)
}

// QueryOrder queries the order edge of the Medicine.
func (m *Medicine) QueryOrder() *OrderQuery {
	return (&MedicineClient{config: m.config}).QueryOrder(m)
}

// Update returns a builder for updating this Medicine.
// Note that, you need to call Medicine.Unwrap() before calling this method, if this Medicine
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Medicine) Update() *MedicineUpdateOne {
	return (&MedicineClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (m *Medicine) Unwrap() *Medicine {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Medicine is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Medicine) String() string {
	var builder strings.Builder
	builder.WriteString("Medicine(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", name=")
	builder.WriteString(m.Name)
	builder.WriteString(", serial=")
	builder.WriteString(m.Serial)
	builder.WriteString(", brand=")
	builder.WriteString(m.Brand)
	builder.WriteString(", amount=")
	builder.WriteString(fmt.Sprintf("%v", m.Amount))
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", m.Price))
	builder.WriteString(", howtouse=")
	builder.WriteString(m.Howtouse)
	builder.WriteByte(')')
	return builder.String()
}

// Medicines is a parsable slice of Medicine.
type Medicines []*Medicine

func (m Medicines) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}

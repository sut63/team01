// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team01/ent/medicine"
	"github.com/sut63/team01/ent/medicinetype"
)

// MedicineTypeCreate is the builder for creating a MedicineType entity.
type MedicineTypeCreate struct {
	config
	mutation *MedicineTypeMutation
	hooks    []Hook
}

// SetName sets the name field.
func (mtc *MedicineTypeCreate) SetName(s string) *MedicineTypeCreate {
	mtc.mutation.SetName(s)
	return mtc
}

// AddMedicineIDs adds the Medicine edge to Medicine by ids.
func (mtc *MedicineTypeCreate) AddMedicineIDs(ids ...int) *MedicineTypeCreate {
	mtc.mutation.AddMedicineIDs(ids...)
	return mtc
}

// AddMedicine adds the Medicine edges to Medicine.
func (mtc *MedicineTypeCreate) AddMedicine(m ...*Medicine) *MedicineTypeCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mtc.AddMedicineIDs(ids...)
}

// Mutation returns the MedicineTypeMutation object of the builder.
func (mtc *MedicineTypeCreate) Mutation() *MedicineTypeMutation {
	return mtc.mutation
}

// Save creates the MedicineType in the database.
func (mtc *MedicineTypeCreate) Save(ctx context.Context) (*MedicineType, error) {
	if _, ok := mtc.mutation.Name(); !ok {
		return nil, &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	var (
		err  error
		node *MedicineType
	)
	if len(mtc.hooks) == 0 {
		node, err = mtc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MedicineTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mtc.mutation = mutation
			node, err = mtc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mtc.hooks) - 1; i >= 0; i-- {
			mut = mtc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mtc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mtc *MedicineTypeCreate) SaveX(ctx context.Context) *MedicineType {
	v, err := mtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mtc *MedicineTypeCreate) sqlSave(ctx context.Context) (*MedicineType, error) {
	mt, _spec := mtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mtc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	mt.ID = int(id)
	return mt, nil
}

func (mtc *MedicineTypeCreate) createSpec() (*MedicineType, *sqlgraph.CreateSpec) {
	var (
		mt    = &MedicineType{config: mtc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: medicinetype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: medicinetype.FieldID,
			},
		}
	)
	if value, ok := mtc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicinetype.FieldName,
		})
		mt.Name = value
	}
	if nodes := mtc.mutation.MedicineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicinetype.MedicineTable,
			Columns: []string{medicinetype.MedicineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicine.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return mt, _spec
}

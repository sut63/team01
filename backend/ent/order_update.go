// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team01/ent/company"
	"github.com/sut63/team01/ent/medicine"
	"github.com/sut63/team01/ent/order"
	"github.com/sut63/team01/ent/pharmacist"
	"github.com/sut63/team01/ent/predicate"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks      []Hook
	mutation   *OrderMutation
	predicates []predicate.Order
}

// Where adds a new predicate for the builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.predicates = append(ou.predicates, ps...)
	return ou
}

// SetHospitalid sets the hospitalid field.
func (ou *OrderUpdate) SetHospitalid(s string) *OrderUpdate {
	ou.mutation.SetHospitalid(s)
	return ou
}

// SetAddedtime sets the addedtime field.
func (ou *OrderUpdate) SetAddedtime(t time.Time) *OrderUpdate {
	ou.mutation.SetAddedtime(t)
	return ou
}

// SetPrice sets the price field.
func (ou *OrderUpdate) SetPrice(i int) *OrderUpdate {
	ou.mutation.ResetPrice()
	ou.mutation.SetPrice(i)
	return ou
}

// AddPrice adds i to price.
func (ou *OrderUpdate) AddPrice(i int) *OrderUpdate {
	ou.mutation.AddPrice(i)
	return ou
}

// SetAmount sets the amount field.
func (ou *OrderUpdate) SetAmount(i int) *OrderUpdate {
	ou.mutation.ResetAmount()
	ou.mutation.SetAmount(i)
	return ou
}

// AddAmount adds i to amount.
func (ou *OrderUpdate) AddAmount(i int) *OrderUpdate {
	ou.mutation.AddAmount(i)
	return ou
}

// SetMedicineID sets the medicine edge to Medicine by id.
func (ou *OrderUpdate) SetMedicineID(id int) *OrderUpdate {
	ou.mutation.SetMedicineID(id)
	return ou
}

// SetNillableMedicineID sets the medicine edge to Medicine by id if the given value is not nil.
func (ou *OrderUpdate) SetNillableMedicineID(id *int) *OrderUpdate {
	if id != nil {
		ou = ou.SetMedicineID(*id)
	}
	return ou
}

// SetMedicine sets the medicine edge to Medicine.
func (ou *OrderUpdate) SetMedicine(m *Medicine) *OrderUpdate {
	return ou.SetMedicineID(m.ID)
}

// SetCompanyID sets the company edge to Company by id.
func (ou *OrderUpdate) SetCompanyID(id int) *OrderUpdate {
	ou.mutation.SetCompanyID(id)
	return ou
}

// SetNillableCompanyID sets the company edge to Company by id if the given value is not nil.
func (ou *OrderUpdate) SetNillableCompanyID(id *int) *OrderUpdate {
	if id != nil {
		ou = ou.SetCompanyID(*id)
	}
	return ou
}

// SetCompany sets the company edge to Company.
func (ou *OrderUpdate) SetCompany(c *Company) *OrderUpdate {
	return ou.SetCompanyID(c.ID)
}

// SetPharmacistID sets the pharmacist edge to Pharmacist by id.
func (ou *OrderUpdate) SetPharmacistID(id int) *OrderUpdate {
	ou.mutation.SetPharmacistID(id)
	return ou
}

// SetNillablePharmacistID sets the pharmacist edge to Pharmacist by id if the given value is not nil.
func (ou *OrderUpdate) SetNillablePharmacistID(id *int) *OrderUpdate {
	if id != nil {
		ou = ou.SetPharmacistID(*id)
	}
	return ou
}

// SetPharmacist sets the pharmacist edge to Pharmacist.
func (ou *OrderUpdate) SetPharmacist(p *Pharmacist) *OrderUpdate {
	return ou.SetPharmacistID(p.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearMedicine clears the medicine edge to Medicine.
func (ou *OrderUpdate) ClearMedicine() *OrderUpdate {
	ou.mutation.ClearMedicine()
	return ou
}

// ClearCompany clears the company edge to Company.
func (ou *OrderUpdate) ClearCompany() *OrderUpdate {
	ou.mutation.ClearCompany()
	return ou
}

// ClearPharmacist clears the pharmacist edge to Pharmacist.
func (ou *OrderUpdate) ClearPharmacist() *OrderUpdate {
	ou.mutation.ClearPharmacist()
	return ou
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := ou.mutation.Hospitalid(); ok {
		if err := order.HospitalidValidator(v); err != nil {
			return 0, &ValidationError{Name: "hospitalid", err: fmt.Errorf("ent: validator failed for field \"hospitalid\": %w", err)}
		}
	}
	if v, ok := ou.mutation.Price(); ok {
		if err := order.PriceValidator(v); err != nil {
			return 0, &ValidationError{Name: "price", err: fmt.Errorf("ent: validator failed for field \"price\": %w", err)}
		}
	}
	if v, ok := ou.mutation.Amount(); ok {
		if err := order.AmountValidator(v); err != nil {
			return 0, &ValidationError{Name: "amount", err: fmt.Errorf("ent: validator failed for field \"amount\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(ou.hooks) == 0 {
		affected, err = ou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ou.mutation = mutation
			affected, err = ou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ou.hooks) - 1; i >= 0; i-- {
			mut = ou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: order.FieldID,
			},
		},
	}
	if ps := ou.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Hospitalid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldHospitalid,
		})
	}
	if value, ok := ou.mutation.Addedtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldAddedtime,
		})
	}
	if value, ok := ou.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: order.FieldPrice,
		})
	}
	if value, ok := ou.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: order.FieldPrice,
		})
	}
	if value, ok := ou.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: order.FieldAmount,
		})
	}
	if value, ok := ou.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: order.FieldAmount,
		})
	}
	if ou.mutation.MedicineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.MedicineTable,
			Columns: []string{order.MedicineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicine.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.MedicineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.MedicineTable,
			Columns: []string{order.MedicineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicine.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CompanyTable,
			Columns: []string{order.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: company.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CompanyTable,
			Columns: []string{order.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.PharmacistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PharmacistTable,
			Columns: []string{order.PharmacistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pharmacist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.PharmacistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PharmacistTable,
			Columns: []string{order.PharmacistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pharmacist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// SetHospitalid sets the hospitalid field.
func (ouo *OrderUpdateOne) SetHospitalid(s string) *OrderUpdateOne {
	ouo.mutation.SetHospitalid(s)
	return ouo
}

// SetAddedtime sets the addedtime field.
func (ouo *OrderUpdateOne) SetAddedtime(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetAddedtime(t)
	return ouo
}

// SetPrice sets the price field.
func (ouo *OrderUpdateOne) SetPrice(i int) *OrderUpdateOne {
	ouo.mutation.ResetPrice()
	ouo.mutation.SetPrice(i)
	return ouo
}

// AddPrice adds i to price.
func (ouo *OrderUpdateOne) AddPrice(i int) *OrderUpdateOne {
	ouo.mutation.AddPrice(i)
	return ouo
}

// SetAmount sets the amount field.
func (ouo *OrderUpdateOne) SetAmount(i int) *OrderUpdateOne {
	ouo.mutation.ResetAmount()
	ouo.mutation.SetAmount(i)
	return ouo
}

// AddAmount adds i to amount.
func (ouo *OrderUpdateOne) AddAmount(i int) *OrderUpdateOne {
	ouo.mutation.AddAmount(i)
	return ouo
}

// SetMedicineID sets the medicine edge to Medicine by id.
func (ouo *OrderUpdateOne) SetMedicineID(id int) *OrderUpdateOne {
	ouo.mutation.SetMedicineID(id)
	return ouo
}

// SetNillableMedicineID sets the medicine edge to Medicine by id if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableMedicineID(id *int) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetMedicineID(*id)
	}
	return ouo
}

// SetMedicine sets the medicine edge to Medicine.
func (ouo *OrderUpdateOne) SetMedicine(m *Medicine) *OrderUpdateOne {
	return ouo.SetMedicineID(m.ID)
}

// SetCompanyID sets the company edge to Company by id.
func (ouo *OrderUpdateOne) SetCompanyID(id int) *OrderUpdateOne {
	ouo.mutation.SetCompanyID(id)
	return ouo
}

// SetNillableCompanyID sets the company edge to Company by id if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCompanyID(id *int) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetCompanyID(*id)
	}
	return ouo
}

// SetCompany sets the company edge to Company.
func (ouo *OrderUpdateOne) SetCompany(c *Company) *OrderUpdateOne {
	return ouo.SetCompanyID(c.ID)
}

// SetPharmacistID sets the pharmacist edge to Pharmacist by id.
func (ouo *OrderUpdateOne) SetPharmacistID(id int) *OrderUpdateOne {
	ouo.mutation.SetPharmacistID(id)
	return ouo
}

// SetNillablePharmacistID sets the pharmacist edge to Pharmacist by id if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePharmacistID(id *int) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetPharmacistID(*id)
	}
	return ouo
}

// SetPharmacist sets the pharmacist edge to Pharmacist.
func (ouo *OrderUpdateOne) SetPharmacist(p *Pharmacist) *OrderUpdateOne {
	return ouo.SetPharmacistID(p.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearMedicine clears the medicine edge to Medicine.
func (ouo *OrderUpdateOne) ClearMedicine() *OrderUpdateOne {
	ouo.mutation.ClearMedicine()
	return ouo
}

// ClearCompany clears the company edge to Company.
func (ouo *OrderUpdateOne) ClearCompany() *OrderUpdateOne {
	ouo.mutation.ClearCompany()
	return ouo
}

// ClearPharmacist clears the pharmacist edge to Pharmacist.
func (ouo *OrderUpdateOne) ClearPharmacist() *OrderUpdateOne {
	ouo.mutation.ClearPharmacist()
	return ouo
}

// Save executes the query and returns the updated entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	if v, ok := ouo.mutation.Hospitalid(); ok {
		if err := order.HospitalidValidator(v); err != nil {
			return nil, &ValidationError{Name: "hospitalid", err: fmt.Errorf("ent: validator failed for field \"hospitalid\": %w", err)}
		}
	}
	if v, ok := ouo.mutation.Price(); ok {
		if err := order.PriceValidator(v); err != nil {
			return nil, &ValidationError{Name: "price", err: fmt.Errorf("ent: validator failed for field \"price\": %w", err)}
		}
	}
	if v, ok := ouo.mutation.Amount(); ok {
		if err := order.AmountValidator(v); err != nil {
			return nil, &ValidationError{Name: "amount", err: fmt.Errorf("ent: validator failed for field \"amount\": %w", err)}
		}
	}

	var (
		err  error
		node *Order
	)
	if len(ouo.hooks) == 0 {
		node, err = ouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ouo.mutation = mutation
			node, err = ouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouo.hooks) - 1; i >= 0; i-- {
			mut = ouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	o, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return o
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (o *Order, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: order.FieldID,
			},
		},
	}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Order.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ouo.mutation.Hospitalid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldHospitalid,
		})
	}
	if value, ok := ouo.mutation.Addedtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldAddedtime,
		})
	}
	if value, ok := ouo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: order.FieldPrice,
		})
	}
	if value, ok := ouo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: order.FieldPrice,
		})
	}
	if value, ok := ouo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: order.FieldAmount,
		})
	}
	if value, ok := ouo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: order.FieldAmount,
		})
	}
	if ouo.mutation.MedicineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.MedicineTable,
			Columns: []string{order.MedicineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicine.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.MedicineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.MedicineTable,
			Columns: []string{order.MedicineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicine.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CompanyTable,
			Columns: []string{order.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: company.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CompanyTable,
			Columns: []string{order.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.PharmacistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PharmacistTable,
			Columns: []string{order.PharmacistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pharmacist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.PharmacistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PharmacistTable,
			Columns: []string{order.PharmacistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pharmacist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	o = &Order{config: ouo.config}
	_spec.Assign = o.assignValues
	_spec.ScanValues = o.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return o, nil
}

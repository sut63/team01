// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team01/ent/drugallergy"
	"github.com/sut63/team01/ent/patientinfo"
	"github.com/sut63/team01/ent/prescription"
)

// PatientInfoCreate is the builder for creating a PatientInfo entity.
type PatientInfoCreate struct {
	config
	mutation *PatientInfoMutation
	hooks    []Hook
}

// SetCardNumber sets the cardNumber field.
func (pic *PatientInfoCreate) SetCardNumber(s string) *PatientInfoCreate {
	pic.mutation.SetCardNumber(s)
	return pic
}

// SetName sets the name field.
func (pic *PatientInfoCreate) SetName(s string) *PatientInfoCreate {
	pic.mutation.SetName(s)
	return pic
}

// SetGender sets the gender field.
func (pic *PatientInfoCreate) SetGender(s string) *PatientInfoCreate {
	pic.mutation.SetGender(s)
	return pic
}

// SetAge sets the age field.
func (pic *PatientInfoCreate) SetAge(i int) *PatientInfoCreate {
	pic.mutation.SetAge(i)
	return pic
}

// AddDrugallergyIDs adds the drugallergys edge to DrugAllergy by ids.
func (pic *PatientInfoCreate) AddDrugallergyIDs(ids ...int) *PatientInfoCreate {
	pic.mutation.AddDrugallergyIDs(ids...)
	return pic
}

// AddDrugallergys adds the drugallergys edges to DrugAllergy.
func (pic *PatientInfoCreate) AddDrugallergys(d ...*DrugAllergy) *PatientInfoCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pic.AddDrugallergyIDs(ids...)
}

// AddPatientprescriptionIDs adds the patientprescription edge to Prescription by ids.
func (pic *PatientInfoCreate) AddPatientprescriptionIDs(ids ...int) *PatientInfoCreate {
	pic.mutation.AddPatientprescriptionIDs(ids...)
	return pic
}

// AddPatientprescription adds the patientprescription edges to Prescription.
func (pic *PatientInfoCreate) AddPatientprescription(p ...*Prescription) *PatientInfoCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pic.AddPatientprescriptionIDs(ids...)
}

// Mutation returns the PatientInfoMutation object of the builder.
func (pic *PatientInfoCreate) Mutation() *PatientInfoMutation {
	return pic.mutation
}

// Save creates the PatientInfo in the database.
func (pic *PatientInfoCreate) Save(ctx context.Context) (*PatientInfo, error) {
	if _, ok := pic.mutation.CardNumber(); !ok {
		return nil, &ValidationError{Name: "cardNumber", err: errors.New("ent: missing required field \"cardNumber\"")}
	}
	if v, ok := pic.mutation.CardNumber(); ok {
		if err := patientinfo.CardNumberValidator(v); err != nil {
			return nil, &ValidationError{Name: "cardNumber", err: fmt.Errorf("ent: validator failed for field \"cardNumber\": %w", err)}
		}
	}
	if _, ok := pic.mutation.Name(); !ok {
		return nil, &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := pic.mutation.Name(); ok {
		if err := patientinfo.NameValidator(v); err != nil {
			return nil, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := pic.mutation.Gender(); !ok {
		return nil, &ValidationError{Name: "gender", err: errors.New("ent: missing required field \"gender\"")}
	}
	if v, ok := pic.mutation.Gender(); ok {
		if err := patientinfo.GenderValidator(v); err != nil {
			return nil, &ValidationError{Name: "gender", err: fmt.Errorf("ent: validator failed for field \"gender\": %w", err)}
		}
	}
	if _, ok := pic.mutation.Age(); !ok {
		return nil, &ValidationError{Name: "age", err: errors.New("ent: missing required field \"age\"")}
	}
	if v, ok := pic.mutation.Age(); ok {
		if err := patientinfo.AgeValidator(v); err != nil {
			return nil, &ValidationError{Name: "age", err: fmt.Errorf("ent: validator failed for field \"age\": %w", err)}
		}
	}
	var (
		err  error
		node *PatientInfo
	)
	if len(pic.hooks) == 0 {
		node, err = pic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PatientInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pic.mutation = mutation
			node, err = pic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pic.hooks) - 1; i >= 0; i-- {
			mut = pic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pic *PatientInfoCreate) SaveX(ctx context.Context) *PatientInfo {
	v, err := pic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pic *PatientInfoCreate) sqlSave(ctx context.Context) (*PatientInfo, error) {
	pi, _spec := pic.createSpec()
	if err := sqlgraph.CreateNode(ctx, pic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pi.ID = int(id)
	return pi, nil
}

func (pic *PatientInfoCreate) createSpec() (*PatientInfo, *sqlgraph.CreateSpec) {
	var (
		pi    = &PatientInfo{config: pic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: patientinfo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: patientinfo.FieldID,
			},
		}
	)
	if value, ok := pic.mutation.CardNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientinfo.FieldCardNumber,
		})
		pi.CardNumber = value
	}
	if value, ok := pic.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientinfo.FieldName,
		})
		pi.Name = value
	}
	if value, ok := pic.mutation.Gender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientinfo.FieldGender,
		})
		pi.Gender = value
	}
	if value, ok := pic.mutation.Age(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: patientinfo.FieldAge,
		})
		pi.Age = value
	}
	if nodes := pic.mutation.DrugallergysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patientinfo.DrugallergysTable,
			Columns: []string{patientinfo.DrugallergysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drugallergy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pic.mutation.PatientprescriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patientinfo.PatientprescriptionTable,
			Columns: []string{patientinfo.PatientprescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prescription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pi, _spec
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team01/ent/drugallergy"
	"github.com/sut63/team01/ent/patientinfo"
	"github.com/sut63/team01/ent/predicate"
	"github.com/sut63/team01/ent/prescription"
)

// PatientInfoUpdate is the builder for updating PatientInfo entities.
type PatientInfoUpdate struct {
	config
	hooks      []Hook
	mutation   *PatientInfoMutation
	predicates []predicate.PatientInfo
}

// Where adds a new predicate for the builder.
func (piu *PatientInfoUpdate) Where(ps ...predicate.PatientInfo) *PatientInfoUpdate {
	piu.predicates = append(piu.predicates, ps...)
	return piu
}

// SetCardNumber sets the cardNumber field.
func (piu *PatientInfoUpdate) SetCardNumber(s string) *PatientInfoUpdate {
	piu.mutation.SetCardNumber(s)
	return piu
}

// SetName sets the name field.
func (piu *PatientInfoUpdate) SetName(s string) *PatientInfoUpdate {
	piu.mutation.SetName(s)
	return piu
}

// SetGender sets the gender field.
func (piu *PatientInfoUpdate) SetGender(s string) *PatientInfoUpdate {
	piu.mutation.SetGender(s)
	return piu
}

// SetAge sets the age field.
func (piu *PatientInfoUpdate) SetAge(i int) *PatientInfoUpdate {
	piu.mutation.ResetAge()
	piu.mutation.SetAge(i)
	return piu
}

// AddAge adds i to age.
func (piu *PatientInfoUpdate) AddAge(i int) *PatientInfoUpdate {
	piu.mutation.AddAge(i)
	return piu
}

// AddDrugallergyIDs adds the drugallergys edge to DrugAllergy by ids.
func (piu *PatientInfoUpdate) AddDrugallergyIDs(ids ...int) *PatientInfoUpdate {
	piu.mutation.AddDrugallergyIDs(ids...)
	return piu
}

// AddDrugallergys adds the drugallergys edges to DrugAllergy.
func (piu *PatientInfoUpdate) AddDrugallergys(d ...*DrugAllergy) *PatientInfoUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return piu.AddDrugallergyIDs(ids...)
}

// AddPatientprescriptionIDs adds the patientprescription edge to Prescription by ids.
func (piu *PatientInfoUpdate) AddPatientprescriptionIDs(ids ...int) *PatientInfoUpdate {
	piu.mutation.AddPatientprescriptionIDs(ids...)
	return piu
}

// AddPatientprescription adds the patientprescription edges to Prescription.
func (piu *PatientInfoUpdate) AddPatientprescription(p ...*Prescription) *PatientInfoUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piu.AddPatientprescriptionIDs(ids...)
}

// Mutation returns the PatientInfoMutation object of the builder.
func (piu *PatientInfoUpdate) Mutation() *PatientInfoMutation {
	return piu.mutation
}

// RemoveDrugallergyIDs removes the drugallergys edge to DrugAllergy by ids.
func (piu *PatientInfoUpdate) RemoveDrugallergyIDs(ids ...int) *PatientInfoUpdate {
	piu.mutation.RemoveDrugallergyIDs(ids...)
	return piu
}

// RemoveDrugallergys removes drugallergys edges to DrugAllergy.
func (piu *PatientInfoUpdate) RemoveDrugallergys(d ...*DrugAllergy) *PatientInfoUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return piu.RemoveDrugallergyIDs(ids...)
}

// RemovePatientprescriptionIDs removes the patientprescription edge to Prescription by ids.
func (piu *PatientInfoUpdate) RemovePatientprescriptionIDs(ids ...int) *PatientInfoUpdate {
	piu.mutation.RemovePatientprescriptionIDs(ids...)
	return piu
}

// RemovePatientprescription removes patientprescription edges to Prescription.
func (piu *PatientInfoUpdate) RemovePatientprescription(p ...*Prescription) *PatientInfoUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piu.RemovePatientprescriptionIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (piu *PatientInfoUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := piu.mutation.CardNumber(); ok {
		if err := patientinfo.CardNumberValidator(v); err != nil {
			return 0, &ValidationError{Name: "cardNumber", err: fmt.Errorf("ent: validator failed for field \"cardNumber\": %w", err)}
		}
	}
	if v, ok := piu.mutation.Name(); ok {
		if err := patientinfo.NameValidator(v); err != nil {
			return 0, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := piu.mutation.Gender(); ok {
		if err := patientinfo.GenderValidator(v); err != nil {
			return 0, &ValidationError{Name: "gender", err: fmt.Errorf("ent: validator failed for field \"gender\": %w", err)}
		}
	}
	if v, ok := piu.mutation.Age(); ok {
		if err := patientinfo.AgeValidator(v); err != nil {
			return 0, &ValidationError{Name: "age", err: fmt.Errorf("ent: validator failed for field \"age\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(piu.hooks) == 0 {
		affected, err = piu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PatientInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			piu.mutation = mutation
			affected, err = piu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(piu.hooks) - 1; i >= 0; i-- {
			mut = piu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, piu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (piu *PatientInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *PatientInfoUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *PatientInfoUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (piu *PatientInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   patientinfo.Table,
			Columns: patientinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: patientinfo.FieldID,
			},
		},
	}
	if ps := piu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.CardNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientinfo.FieldCardNumber,
		})
	}
	if value, ok := piu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientinfo.FieldName,
		})
	}
	if value, ok := piu.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientinfo.FieldGender,
		})
	}
	if value, ok := piu.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: patientinfo.FieldAge,
		})
	}
	if value, ok := piu.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: patientinfo.FieldAge,
		})
	}
	if nodes := piu.mutation.RemovedDrugallergysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patientinfo.DrugallergysTable,
			Columns: []string{patientinfo.DrugallergysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drugallergy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.DrugallergysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patientinfo.DrugallergysTable,
			Columns: []string{patientinfo.DrugallergysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drugallergy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := piu.mutation.RemovedPatientprescriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patientinfo.PatientprescriptionTable,
			Columns: []string{patientinfo.PatientprescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prescription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.PatientprescriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patientinfo.PatientprescriptionTable,
			Columns: []string{patientinfo.PatientprescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prescription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patientinfo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PatientInfoUpdateOne is the builder for updating a single PatientInfo entity.
type PatientInfoUpdateOne struct {
	config
	hooks    []Hook
	mutation *PatientInfoMutation
}

// SetCardNumber sets the cardNumber field.
func (piuo *PatientInfoUpdateOne) SetCardNumber(s string) *PatientInfoUpdateOne {
	piuo.mutation.SetCardNumber(s)
	return piuo
}

// SetName sets the name field.
func (piuo *PatientInfoUpdateOne) SetName(s string) *PatientInfoUpdateOne {
	piuo.mutation.SetName(s)
	return piuo
}

// SetGender sets the gender field.
func (piuo *PatientInfoUpdateOne) SetGender(s string) *PatientInfoUpdateOne {
	piuo.mutation.SetGender(s)
	return piuo
}

// SetAge sets the age field.
func (piuo *PatientInfoUpdateOne) SetAge(i int) *PatientInfoUpdateOne {
	piuo.mutation.ResetAge()
	piuo.mutation.SetAge(i)
	return piuo
}

// AddAge adds i to age.
func (piuo *PatientInfoUpdateOne) AddAge(i int) *PatientInfoUpdateOne {
	piuo.mutation.AddAge(i)
	return piuo
}

// AddDrugallergyIDs adds the drugallergys edge to DrugAllergy by ids.
func (piuo *PatientInfoUpdateOne) AddDrugallergyIDs(ids ...int) *PatientInfoUpdateOne {
	piuo.mutation.AddDrugallergyIDs(ids...)
	return piuo
}

// AddDrugallergys adds the drugallergys edges to DrugAllergy.
func (piuo *PatientInfoUpdateOne) AddDrugallergys(d ...*DrugAllergy) *PatientInfoUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return piuo.AddDrugallergyIDs(ids...)
}

// AddPatientprescriptionIDs adds the patientprescription edge to Prescription by ids.
func (piuo *PatientInfoUpdateOne) AddPatientprescriptionIDs(ids ...int) *PatientInfoUpdateOne {
	piuo.mutation.AddPatientprescriptionIDs(ids...)
	return piuo
}

// AddPatientprescription adds the patientprescription edges to Prescription.
func (piuo *PatientInfoUpdateOne) AddPatientprescription(p ...*Prescription) *PatientInfoUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piuo.AddPatientprescriptionIDs(ids...)
}

// Mutation returns the PatientInfoMutation object of the builder.
func (piuo *PatientInfoUpdateOne) Mutation() *PatientInfoMutation {
	return piuo.mutation
}

// RemoveDrugallergyIDs removes the drugallergys edge to DrugAllergy by ids.
func (piuo *PatientInfoUpdateOne) RemoveDrugallergyIDs(ids ...int) *PatientInfoUpdateOne {
	piuo.mutation.RemoveDrugallergyIDs(ids...)
	return piuo
}

// RemoveDrugallergys removes drugallergys edges to DrugAllergy.
func (piuo *PatientInfoUpdateOne) RemoveDrugallergys(d ...*DrugAllergy) *PatientInfoUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return piuo.RemoveDrugallergyIDs(ids...)
}

// RemovePatientprescriptionIDs removes the patientprescription edge to Prescription by ids.
func (piuo *PatientInfoUpdateOne) RemovePatientprescriptionIDs(ids ...int) *PatientInfoUpdateOne {
	piuo.mutation.RemovePatientprescriptionIDs(ids...)
	return piuo
}

// RemovePatientprescription removes patientprescription edges to Prescription.
func (piuo *PatientInfoUpdateOne) RemovePatientprescription(p ...*Prescription) *PatientInfoUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piuo.RemovePatientprescriptionIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (piuo *PatientInfoUpdateOne) Save(ctx context.Context) (*PatientInfo, error) {
	if v, ok := piuo.mutation.CardNumber(); ok {
		if err := patientinfo.CardNumberValidator(v); err != nil {
			return nil, &ValidationError{Name: "cardNumber", err: fmt.Errorf("ent: validator failed for field \"cardNumber\": %w", err)}
		}
	}
	if v, ok := piuo.mutation.Name(); ok {
		if err := patientinfo.NameValidator(v); err != nil {
			return nil, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := piuo.mutation.Gender(); ok {
		if err := patientinfo.GenderValidator(v); err != nil {
			return nil, &ValidationError{Name: "gender", err: fmt.Errorf("ent: validator failed for field \"gender\": %w", err)}
		}
	}
	if v, ok := piuo.mutation.Age(); ok {
		if err := patientinfo.AgeValidator(v); err != nil {
			return nil, &ValidationError{Name: "age", err: fmt.Errorf("ent: validator failed for field \"age\": %w", err)}
		}
	}

	var (
		err  error
		node *PatientInfo
	)
	if len(piuo.hooks) == 0 {
		node, err = piuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PatientInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			piuo.mutation = mutation
			node, err = piuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(piuo.hooks) - 1; i >= 0; i-- {
			mut = piuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, piuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *PatientInfoUpdateOne) SaveX(ctx context.Context) *PatientInfo {
	pi, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pi
}

// Exec executes the query on the entity.
func (piuo *PatientInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *PatientInfoUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (piuo *PatientInfoUpdateOne) sqlSave(ctx context.Context) (pi *PatientInfo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   patientinfo.Table,
			Columns: patientinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: patientinfo.FieldID,
			},
		},
	}
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing PatientInfo.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := piuo.mutation.CardNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientinfo.FieldCardNumber,
		})
	}
	if value, ok := piuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientinfo.FieldName,
		})
	}
	if value, ok := piuo.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientinfo.FieldGender,
		})
	}
	if value, ok := piuo.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: patientinfo.FieldAge,
		})
	}
	if value, ok := piuo.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: patientinfo.FieldAge,
		})
	}
	if nodes := piuo.mutation.RemovedDrugallergysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patientinfo.DrugallergysTable,
			Columns: []string{patientinfo.DrugallergysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drugallergy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.DrugallergysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patientinfo.DrugallergysTable,
			Columns: []string{patientinfo.DrugallergysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drugallergy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := piuo.mutation.RemovedPatientprescriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patientinfo.PatientprescriptionTable,
			Columns: []string{patientinfo.PatientprescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prescription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.PatientprescriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patientinfo.PatientprescriptionTable,
			Columns: []string{patientinfo.PatientprescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prescription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pi = &PatientInfo{config: piuo.config}
	_spec.Assign = pi.assignValues
	_spec.ScanValues = pi.scanValues()
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patientinfo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pi, nil
}

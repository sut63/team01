// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team01/ent/pharmacist"
)

// Pharmacist is the model entity for the Pharmacist schema.
type Pharmacist struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PharmacistQuery when eager-loading is set.
	Edges PharmacistEdges `json:"edges"`
}

// PharmacistEdges holds the relations/edges for other nodes in the graph.
type PharmacistEdges struct {
	// Dispensemedicine holds the value of the dispensemedicine edge.
	Dispensemedicine []*DispenseMedicine
	// Drugallergys holds the value of the drugallergys edge.
	Drugallergys []*DrugAllergy
	// Order holds the value of the order edge.
	Order []*Order
	// Bills holds the value of the Bills edge.
	Bills []*Bill
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// DispensemedicineOrErr returns the Dispensemedicine value or an error if the edge
// was not loaded in eager-loading.
func (e PharmacistEdges) DispensemedicineOrErr() ([]*DispenseMedicine, error) {
	if e.loadedTypes[0] {
		return e.Dispensemedicine, nil
	}
	return nil, &NotLoadedError{edge: "dispensemedicine"}
}

// DrugallergysOrErr returns the Drugallergys value or an error if the edge
// was not loaded in eager-loading.
func (e PharmacistEdges) DrugallergysOrErr() ([]*DrugAllergy, error) {
	if e.loadedTypes[1] {
		return e.Drugallergys, nil
	}
	return nil, &NotLoadedError{edge: "drugallergys"}
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading.
func (e PharmacistEdges) OrderOrErr() ([]*Order, error) {
	if e.loadedTypes[2] {
		return e.Order, nil
	}
	return nil, &NotLoadedError{edge: "order"}
}

// BillsOrErr returns the Bills value or an error if the edge
// was not loaded in eager-loading.
func (e PharmacistEdges) BillsOrErr() ([]*Bill, error) {
	if e.loadedTypes[3] {
		return e.Bills, nil
	}
	return nil, &NotLoadedError{edge: "Bills"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Pharmacist) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // email
		&sql.NullString{}, // password
		&sql.NullString{}, // name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Pharmacist fields.
func (ph *Pharmacist) assignValues(values ...interface{}) error {
	if m, n := len(values), len(pharmacist.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ph.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field email", values[0])
	} else if value.Valid {
		ph.Email = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field password", values[1])
	} else if value.Valid {
		ph.Password = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[2])
	} else if value.Valid {
		ph.Name = value.String
	}
	return nil
}

// QueryDispensemedicine queries the dispensemedicine edge of the Pharmacist.
func (ph *Pharmacist) QueryDispensemedicine() *DispenseMedicineQuery {
	return (&PharmacistClient{config: ph.config}).QueryDispensemedicine(ph)
}

// QueryDrugallergys queries the drugallergys edge of the Pharmacist.
func (ph *Pharmacist) QueryDrugallergys() *DrugAllergyQuery {
	return (&PharmacistClient{config: ph.config}).QueryDrugallergys(ph)
}

// QueryOrder queries the order edge of the Pharmacist.
func (ph *Pharmacist) QueryOrder() *OrderQuery {
	return (&PharmacistClient{config: ph.config}).QueryOrder(ph)
}

// QueryBills queries the Bills edge of the Pharmacist.
func (ph *Pharmacist) QueryBills() *BillQuery {
	return (&PharmacistClient{config: ph.config}).QueryBills(ph)
}

// Update returns a builder for updating this Pharmacist.
// Note that, you need to call Pharmacist.Unwrap() before calling this method, if this Pharmacist
// was returned from a transaction, and the transaction was committed or rolled back.
func (ph *Pharmacist) Update() *PharmacistUpdateOne {
	return (&PharmacistClient{config: ph.config}).UpdateOne(ph)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ph *Pharmacist) Unwrap() *Pharmacist {
	tx, ok := ph.config.driver.(*txDriver)
	if !ok {
		panic("ent: Pharmacist is not a transactional entity")
	}
	ph.config.driver = tx.drv
	return ph
}

// String implements the fmt.Stringer.
func (ph *Pharmacist) String() string {
	var builder strings.Builder
	builder.WriteString("Pharmacist(")
	builder.WriteString(fmt.Sprintf("id=%v", ph.ID))
	builder.WriteString(", email=")
	builder.WriteString(ph.Email)
	builder.WriteString(", password=")
	builder.WriteString(ph.Password)
	builder.WriteString(", name=")
	builder.WriteString(ph.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Pharmacists is a parsable slice of Pharmacist.
type Pharmacists []*Pharmacist

func (ph Pharmacists) config(cfg config) {
	for _i := range ph {
		ph[_i].config = cfg
	}
}

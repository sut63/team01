// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team01/ent/bill"
	"github.com/sut63/team01/ent/dispensemedicine"
	"github.com/sut63/team01/ent/drugallergy"
	"github.com/sut63/team01/ent/order"
	"github.com/sut63/team01/ent/pharmacist"
	"github.com/sut63/team01/ent/predicate"
)

// PharmacistUpdate is the builder for updating Pharmacist entities.
type PharmacistUpdate struct {
	config
	hooks      []Hook
	mutation   *PharmacistMutation
	predicates []predicate.Pharmacist
}

// Where adds a new predicate for the builder.
func (pu *PharmacistUpdate) Where(ps ...predicate.Pharmacist) *PharmacistUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetEmail sets the email field.
func (pu *PharmacistUpdate) SetEmail(s string) *PharmacistUpdate {
	pu.mutation.SetEmail(s)
	return pu
}

// SetPassword sets the password field.
func (pu *PharmacistUpdate) SetPassword(s string) *PharmacistUpdate {
	pu.mutation.SetPassword(s)
	return pu
}

// SetName sets the name field.
func (pu *PharmacistUpdate) SetName(s string) *PharmacistUpdate {
	pu.mutation.SetName(s)
	return pu
}

// AddDispensemedicineIDs adds the dispensemedicine edge to DispenseMedicine by ids.
func (pu *PharmacistUpdate) AddDispensemedicineIDs(ids ...int) *PharmacistUpdate {
	pu.mutation.AddDispensemedicineIDs(ids...)
	return pu
}

// AddDispensemedicine adds the dispensemedicine edges to DispenseMedicine.
func (pu *PharmacistUpdate) AddDispensemedicine(d ...*DispenseMedicine) *PharmacistUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.AddDispensemedicineIDs(ids...)
}

// AddDrugallergyIDs adds the drugallergys edge to DrugAllergy by ids.
func (pu *PharmacistUpdate) AddDrugallergyIDs(ids ...int) *PharmacistUpdate {
	pu.mutation.AddDrugallergyIDs(ids...)
	return pu
}

// AddDrugallergys adds the drugallergys edges to DrugAllergy.
func (pu *PharmacistUpdate) AddDrugallergys(d ...*DrugAllergy) *PharmacistUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.AddDrugallergyIDs(ids...)
}

// AddOrderpharmacistIDs adds the orderpharmacist edge to Order by ids.
func (pu *PharmacistUpdate) AddOrderpharmacistIDs(ids ...int) *PharmacistUpdate {
	pu.mutation.AddOrderpharmacistIDs(ids...)
	return pu
}

// AddOrderpharmacist adds the orderpharmacist edges to Order.
func (pu *PharmacistUpdate) AddOrderpharmacist(o ...*Order) *PharmacistUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.AddOrderpharmacistIDs(ids...)
}

// AddBillIDs adds the Bills edge to Bill by ids.
func (pu *PharmacistUpdate) AddBillIDs(ids ...int) *PharmacistUpdate {
	pu.mutation.AddBillIDs(ids...)
	return pu
}

// AddBills adds the Bills edges to Bill.
func (pu *PharmacistUpdate) AddBills(b ...*Bill) *PharmacistUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.AddBillIDs(ids...)
}

// Mutation returns the PharmacistMutation object of the builder.
func (pu *PharmacistUpdate) Mutation() *PharmacistMutation {
	return pu.mutation
}

// RemoveDispensemedicineIDs removes the dispensemedicine edge to DispenseMedicine by ids.
func (pu *PharmacistUpdate) RemoveDispensemedicineIDs(ids ...int) *PharmacistUpdate {
	pu.mutation.RemoveDispensemedicineIDs(ids...)
	return pu
}

// RemoveDispensemedicine removes dispensemedicine edges to DispenseMedicine.
func (pu *PharmacistUpdate) RemoveDispensemedicine(d ...*DispenseMedicine) *PharmacistUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.RemoveDispensemedicineIDs(ids...)
}

// RemoveDrugallergyIDs removes the drugallergys edge to DrugAllergy by ids.
func (pu *PharmacistUpdate) RemoveDrugallergyIDs(ids ...int) *PharmacistUpdate {
	pu.mutation.RemoveDrugallergyIDs(ids...)
	return pu
}

// RemoveDrugallergys removes drugallergys edges to DrugAllergy.
func (pu *PharmacistUpdate) RemoveDrugallergys(d ...*DrugAllergy) *PharmacistUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.RemoveDrugallergyIDs(ids...)
}

// RemoveOrderpharmacistIDs removes the orderpharmacist edge to Order by ids.
func (pu *PharmacistUpdate) RemoveOrderpharmacistIDs(ids ...int) *PharmacistUpdate {
	pu.mutation.RemoveOrderpharmacistIDs(ids...)
	return pu
}

// RemoveOrderpharmacist removes orderpharmacist edges to Order.
func (pu *PharmacistUpdate) RemoveOrderpharmacist(o ...*Order) *PharmacistUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.RemoveOrderpharmacistIDs(ids...)
}

// RemoveBillIDs removes the Bills edge to Bill by ids.
func (pu *PharmacistUpdate) RemoveBillIDs(ids ...int) *PharmacistUpdate {
	pu.mutation.RemoveBillIDs(ids...)
	return pu
}

// RemoveBills removes Bills edges to Bill.
func (pu *PharmacistUpdate) RemoveBills(b ...*Bill) *PharmacistUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.RemoveBillIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PharmacistUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := pu.mutation.Email(); ok {
		if err := pharmacist.EmailValidator(v); err != nil {
			return 0, &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Password(); ok {
		if err := pharmacist.PasswordValidator(v); err != nil {
			return 0, &ValidationError{Name: "password", err: fmt.Errorf("ent: validator failed for field \"password\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Name(); ok {
		if err := pharmacist.NameValidator(v); err != nil {
			return 0, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PharmacistMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PharmacistUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PharmacistUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PharmacistUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PharmacistUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pharmacist.Table,
			Columns: pharmacist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pharmacist.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pharmacist.FieldEmail,
		})
	}
	if value, ok := pu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pharmacist.FieldPassword,
		})
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pharmacist.FieldName,
		})
	}
	if nodes := pu.mutation.RemovedDispensemedicineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pharmacist.DispensemedicineTable,
			Columns: []string{pharmacist.DispensemedicineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dispensemedicine.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DispensemedicineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pharmacist.DispensemedicineTable,
			Columns: []string{pharmacist.DispensemedicineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dispensemedicine.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := pu.mutation.RemovedDrugallergysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pharmacist.DrugallergysTable,
			Columns: []string{pharmacist.DrugallergysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drugallergy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DrugallergysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pharmacist.DrugallergysTable,
			Columns: []string{pharmacist.DrugallergysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drugallergy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := pu.mutation.RemovedOrderpharmacistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pharmacist.OrderpharmacistTable,
			Columns: []string{pharmacist.OrderpharmacistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OrderpharmacistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pharmacist.OrderpharmacistTable,
			Columns: []string{pharmacist.OrderpharmacistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := pu.mutation.RemovedBillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pharmacist.BillsTable,
			Columns: []string{pharmacist.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pharmacist.BillsTable,
			Columns: []string{pharmacist.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pharmacist.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PharmacistUpdateOne is the builder for updating a single Pharmacist entity.
type PharmacistUpdateOne struct {
	config
	hooks    []Hook
	mutation *PharmacistMutation
}

// SetEmail sets the email field.
func (puo *PharmacistUpdateOne) SetEmail(s string) *PharmacistUpdateOne {
	puo.mutation.SetEmail(s)
	return puo
}

// SetPassword sets the password field.
func (puo *PharmacistUpdateOne) SetPassword(s string) *PharmacistUpdateOne {
	puo.mutation.SetPassword(s)
	return puo
}

// SetName sets the name field.
func (puo *PharmacistUpdateOne) SetName(s string) *PharmacistUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// AddDispensemedicineIDs adds the dispensemedicine edge to DispenseMedicine by ids.
func (puo *PharmacistUpdateOne) AddDispensemedicineIDs(ids ...int) *PharmacistUpdateOne {
	puo.mutation.AddDispensemedicineIDs(ids...)
	return puo
}

// AddDispensemedicine adds the dispensemedicine edges to DispenseMedicine.
func (puo *PharmacistUpdateOne) AddDispensemedicine(d ...*DispenseMedicine) *PharmacistUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.AddDispensemedicineIDs(ids...)
}

// AddDrugallergyIDs adds the drugallergys edge to DrugAllergy by ids.
func (puo *PharmacistUpdateOne) AddDrugallergyIDs(ids ...int) *PharmacistUpdateOne {
	puo.mutation.AddDrugallergyIDs(ids...)
	return puo
}

// AddDrugallergys adds the drugallergys edges to DrugAllergy.
func (puo *PharmacistUpdateOne) AddDrugallergys(d ...*DrugAllergy) *PharmacistUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.AddDrugallergyIDs(ids...)
}

// AddOrderpharmacistIDs adds the orderpharmacist edge to Order by ids.
func (puo *PharmacistUpdateOne) AddOrderpharmacistIDs(ids ...int) *PharmacistUpdateOne {
	puo.mutation.AddOrderpharmacistIDs(ids...)
	return puo
}

// AddOrderpharmacist adds the orderpharmacist edges to Order.
func (puo *PharmacistUpdateOne) AddOrderpharmacist(o ...*Order) *PharmacistUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.AddOrderpharmacistIDs(ids...)
}

// AddBillIDs adds the Bills edge to Bill by ids.
func (puo *PharmacistUpdateOne) AddBillIDs(ids ...int) *PharmacistUpdateOne {
	puo.mutation.AddBillIDs(ids...)
	return puo
}

// AddBills adds the Bills edges to Bill.
func (puo *PharmacistUpdateOne) AddBills(b ...*Bill) *PharmacistUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.AddBillIDs(ids...)
}

// Mutation returns the PharmacistMutation object of the builder.
func (puo *PharmacistUpdateOne) Mutation() *PharmacistMutation {
	return puo.mutation
}

// RemoveDispensemedicineIDs removes the dispensemedicine edge to DispenseMedicine by ids.
func (puo *PharmacistUpdateOne) RemoveDispensemedicineIDs(ids ...int) *PharmacistUpdateOne {
	puo.mutation.RemoveDispensemedicineIDs(ids...)
	return puo
}

// RemoveDispensemedicine removes dispensemedicine edges to DispenseMedicine.
func (puo *PharmacistUpdateOne) RemoveDispensemedicine(d ...*DispenseMedicine) *PharmacistUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.RemoveDispensemedicineIDs(ids...)
}

// RemoveDrugallergyIDs removes the drugallergys edge to DrugAllergy by ids.
func (puo *PharmacistUpdateOne) RemoveDrugallergyIDs(ids ...int) *PharmacistUpdateOne {
	puo.mutation.RemoveDrugallergyIDs(ids...)
	return puo
}

// RemoveDrugallergys removes drugallergys edges to DrugAllergy.
func (puo *PharmacistUpdateOne) RemoveDrugallergys(d ...*DrugAllergy) *PharmacistUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.RemoveDrugallergyIDs(ids...)
}

// RemoveOrderpharmacistIDs removes the orderpharmacist edge to Order by ids.
func (puo *PharmacistUpdateOne) RemoveOrderpharmacistIDs(ids ...int) *PharmacistUpdateOne {
	puo.mutation.RemoveOrderpharmacistIDs(ids...)
	return puo
}

// RemoveOrderpharmacist removes orderpharmacist edges to Order.
func (puo *PharmacistUpdateOne) RemoveOrderpharmacist(o ...*Order) *PharmacistUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.RemoveOrderpharmacistIDs(ids...)
}

// RemoveBillIDs removes the Bills edge to Bill by ids.
func (puo *PharmacistUpdateOne) RemoveBillIDs(ids ...int) *PharmacistUpdateOne {
	puo.mutation.RemoveBillIDs(ids...)
	return puo
}

// RemoveBills removes Bills edges to Bill.
func (puo *PharmacistUpdateOne) RemoveBills(b ...*Bill) *PharmacistUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.RemoveBillIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (puo *PharmacistUpdateOne) Save(ctx context.Context) (*Pharmacist, error) {
	if v, ok := puo.mutation.Email(); ok {
		if err := pharmacist.EmailValidator(v); err != nil {
			return nil, &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Password(); ok {
		if err := pharmacist.PasswordValidator(v); err != nil {
			return nil, &ValidationError{Name: "password", err: fmt.Errorf("ent: validator failed for field \"password\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Name(); ok {
		if err := pharmacist.NameValidator(v); err != nil {
			return nil, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}

	var (
		err  error
		node *Pharmacist
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PharmacistMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PharmacistUpdateOne) SaveX(ctx context.Context) *Pharmacist {
	ph, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return ph
}

// Exec executes the query on the entity.
func (puo *PharmacistUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PharmacistUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PharmacistUpdateOne) sqlSave(ctx context.Context) (ph *Pharmacist, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pharmacist.Table,
			Columns: pharmacist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pharmacist.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Pharmacist.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pharmacist.FieldEmail,
		})
	}
	if value, ok := puo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pharmacist.FieldPassword,
		})
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pharmacist.FieldName,
		})
	}
	if nodes := puo.mutation.RemovedDispensemedicineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pharmacist.DispensemedicineTable,
			Columns: []string{pharmacist.DispensemedicineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dispensemedicine.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DispensemedicineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pharmacist.DispensemedicineTable,
			Columns: []string{pharmacist.DispensemedicineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dispensemedicine.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := puo.mutation.RemovedDrugallergysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pharmacist.DrugallergysTable,
			Columns: []string{pharmacist.DrugallergysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drugallergy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DrugallergysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pharmacist.DrugallergysTable,
			Columns: []string{pharmacist.DrugallergysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drugallergy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := puo.mutation.RemovedOrderpharmacistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pharmacist.OrderpharmacistTable,
			Columns: []string{pharmacist.OrderpharmacistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OrderpharmacistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pharmacist.OrderpharmacistTable,
			Columns: []string{pharmacist.OrderpharmacistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := puo.mutation.RemovedBillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pharmacist.BillsTable,
			Columns: []string{pharmacist.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pharmacist.BillsTable,
			Columns: []string{pharmacist.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	ph = &Pharmacist{config: puo.config}
	_spec.Assign = ph.assignValues
	_spec.ScanValues = ph.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pharmacist.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return ph, nil
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team01/ent/positioninpharmacist"
)

// PositionInPharmacist is the model entity for the PositionInPharmacist schema.
type PositionInPharmacist struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Position holds the value of the "position" field.
	Position string `json:"position,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PositionInPharmacistQuery when eager-loading is set.
	Edges PositionInPharmacistEdges `json:"edges"`
}

// PositionInPharmacistEdges holds the relations/edges for other nodes in the graph.
type PositionInPharmacistEdges struct {
	// Pharmacist holds the value of the pharmacist edge.
	Pharmacist []*Pharmacist
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PharmacistOrErr returns the Pharmacist value or an error if the edge
// was not loaded in eager-loading.
func (e PositionInPharmacistEdges) PharmacistOrErr() ([]*Pharmacist, error) {
	if e.loadedTypes[0] {
		return e.Pharmacist, nil
	}
	return nil, &NotLoadedError{edge: "pharmacist"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PositionInPharmacist) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // position
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PositionInPharmacist fields.
func (pip *PositionInPharmacist) assignValues(values ...interface{}) error {
	if m, n := len(values), len(positioninpharmacist.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pip.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field position", values[0])
	} else if value.Valid {
		pip.Position = value.String
	}
	return nil
}

// QueryPharmacist queries the pharmacist edge of the PositionInPharmacist.
func (pip *PositionInPharmacist) QueryPharmacist() *PharmacistQuery {
	return (&PositionInPharmacistClient{config: pip.config}).QueryPharmacist(pip)
}

// Update returns a builder for updating this PositionInPharmacist.
// Note that, you need to call PositionInPharmacist.Unwrap() before calling this method, if this PositionInPharmacist
// was returned from a transaction, and the transaction was committed or rolled back.
func (pip *PositionInPharmacist) Update() *PositionInPharmacistUpdateOne {
	return (&PositionInPharmacistClient{config: pip.config}).UpdateOne(pip)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pip *PositionInPharmacist) Unwrap() *PositionInPharmacist {
	tx, ok := pip.config.driver.(*txDriver)
	if !ok {
		panic("ent: PositionInPharmacist is not a transactional entity")
	}
	pip.config.driver = tx.drv
	return pip
}

// String implements the fmt.Stringer.
func (pip *PositionInPharmacist) String() string {
	var builder strings.Builder
	builder.WriteString("PositionInPharmacist(")
	builder.WriteString(fmt.Sprintf("id=%v", pip.ID))
	builder.WriteString(", position=")
	builder.WriteString(pip.Position)
	builder.WriteByte(')')
	return builder.String()
}

// PositionInPharmacists is a parsable slice of PositionInPharmacist.
type PositionInPharmacists []*PositionInPharmacist

func (pip PositionInPharmacists) config(cfg config) {
	for _i := range pip {
		pip[_i].config = cfg
	}
}

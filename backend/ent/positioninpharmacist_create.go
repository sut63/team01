// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team01/ent/pharmacist"
	"github.com/sut63/team01/ent/positioninpharmacist"
)

// PositionInPharmacistCreate is the builder for creating a PositionInPharmacist entity.
type PositionInPharmacistCreate struct {
	config
	mutation *PositionInPharmacistMutation
	hooks    []Hook
}

// SetPosition sets the position field.
func (pipc *PositionInPharmacistCreate) SetPosition(s string) *PositionInPharmacistCreate {
	pipc.mutation.SetPosition(s)
	return pipc
}

// AddPharmacistIDs adds the pharmacist edge to Pharmacist by ids.
func (pipc *PositionInPharmacistCreate) AddPharmacistIDs(ids ...int) *PositionInPharmacistCreate {
	pipc.mutation.AddPharmacistIDs(ids...)
	return pipc
}

// AddPharmacist adds the pharmacist edges to Pharmacist.
func (pipc *PositionInPharmacistCreate) AddPharmacist(p ...*Pharmacist) *PositionInPharmacistCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pipc.AddPharmacistIDs(ids...)
}

// Mutation returns the PositionInPharmacistMutation object of the builder.
func (pipc *PositionInPharmacistCreate) Mutation() *PositionInPharmacistMutation {
	return pipc.mutation
}

// Save creates the PositionInPharmacist in the database.
func (pipc *PositionInPharmacistCreate) Save(ctx context.Context) (*PositionInPharmacist, error) {
	if _, ok := pipc.mutation.Position(); !ok {
		return nil, &ValidationError{Name: "position", err: errors.New("ent: missing required field \"position\"")}
	}
	if v, ok := pipc.mutation.Position(); ok {
		if err := positioninpharmacist.PositionValidator(v); err != nil {
			return nil, &ValidationError{Name: "position", err: fmt.Errorf("ent: validator failed for field \"position\": %w", err)}
		}
	}
	var (
		err  error
		node *PositionInPharmacist
	)
	if len(pipc.hooks) == 0 {
		node, err = pipc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PositionInPharmacistMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pipc.mutation = mutation
			node, err = pipc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pipc.hooks) - 1; i >= 0; i-- {
			mut = pipc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pipc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pipc *PositionInPharmacistCreate) SaveX(ctx context.Context) *PositionInPharmacist {
	v, err := pipc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pipc *PositionInPharmacistCreate) sqlSave(ctx context.Context) (*PositionInPharmacist, error) {
	pip, _spec := pipc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pipc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pip.ID = int(id)
	return pip, nil
}

func (pipc *PositionInPharmacistCreate) createSpec() (*PositionInPharmacist, *sqlgraph.CreateSpec) {
	var (
		pip   = &PositionInPharmacist{config: pipc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: positioninpharmacist.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: positioninpharmacist.FieldID,
			},
		}
	)
	if value, ok := pipc.mutation.Position(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: positioninpharmacist.FieldPosition,
		})
		pip.Position = value
	}
	if nodes := pipc.mutation.PharmacistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   positioninpharmacist.PharmacistTable,
			Columns: []string{positioninpharmacist.PharmacistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pharmacist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pip, _spec
}

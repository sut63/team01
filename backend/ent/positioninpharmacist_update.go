// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team01/ent/pharmacist"
	"github.com/sut63/team01/ent/positioninpharmacist"
	"github.com/sut63/team01/ent/predicate"
)

// PositionInPharmacistUpdate is the builder for updating PositionInPharmacist entities.
type PositionInPharmacistUpdate struct {
	config
	hooks      []Hook
	mutation   *PositionInPharmacistMutation
	predicates []predicate.PositionInPharmacist
}

// Where adds a new predicate for the builder.
func (pipu *PositionInPharmacistUpdate) Where(ps ...predicate.PositionInPharmacist) *PositionInPharmacistUpdate {
	pipu.predicates = append(pipu.predicates, ps...)
	return pipu
}

// SetPosition sets the position field.
func (pipu *PositionInPharmacistUpdate) SetPosition(s string) *PositionInPharmacistUpdate {
	pipu.mutation.SetPosition(s)
	return pipu
}

// AddPharmacistIDs adds the pharmacist edge to Pharmacist by ids.
func (pipu *PositionInPharmacistUpdate) AddPharmacistIDs(ids ...int) *PositionInPharmacistUpdate {
	pipu.mutation.AddPharmacistIDs(ids...)
	return pipu
}

// AddPharmacist adds the pharmacist edges to Pharmacist.
func (pipu *PositionInPharmacistUpdate) AddPharmacist(p ...*Pharmacist) *PositionInPharmacistUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pipu.AddPharmacistIDs(ids...)
}

// Mutation returns the PositionInPharmacistMutation object of the builder.
func (pipu *PositionInPharmacistUpdate) Mutation() *PositionInPharmacistMutation {
	return pipu.mutation
}

// RemovePharmacistIDs removes the pharmacist edge to Pharmacist by ids.
func (pipu *PositionInPharmacistUpdate) RemovePharmacistIDs(ids ...int) *PositionInPharmacistUpdate {
	pipu.mutation.RemovePharmacistIDs(ids...)
	return pipu
}

// RemovePharmacist removes pharmacist edges to Pharmacist.
func (pipu *PositionInPharmacistUpdate) RemovePharmacist(p ...*Pharmacist) *PositionInPharmacistUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pipu.RemovePharmacistIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pipu *PositionInPharmacistUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := pipu.mutation.Position(); ok {
		if err := positioninpharmacist.PositionValidator(v); err != nil {
			return 0, &ValidationError{Name: "position", err: fmt.Errorf("ent: validator failed for field \"position\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(pipu.hooks) == 0 {
		affected, err = pipu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PositionInPharmacistMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pipu.mutation = mutation
			affected, err = pipu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pipu.hooks) - 1; i >= 0; i-- {
			mut = pipu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pipu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pipu *PositionInPharmacistUpdate) SaveX(ctx context.Context) int {
	affected, err := pipu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pipu *PositionInPharmacistUpdate) Exec(ctx context.Context) error {
	_, err := pipu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pipu *PositionInPharmacistUpdate) ExecX(ctx context.Context) {
	if err := pipu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pipu *PositionInPharmacistUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   positioninpharmacist.Table,
			Columns: positioninpharmacist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: positioninpharmacist.FieldID,
			},
		},
	}
	if ps := pipu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pipu.mutation.Position(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: positioninpharmacist.FieldPosition,
		})
	}
	if nodes := pipu.mutation.RemovedPharmacistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   positioninpharmacist.PharmacistTable,
			Columns: []string{positioninpharmacist.PharmacistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pharmacist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pipu.mutation.PharmacistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   positioninpharmacist.PharmacistTable,
			Columns: []string{positioninpharmacist.PharmacistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pharmacist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pipu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{positioninpharmacist.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PositionInPharmacistUpdateOne is the builder for updating a single PositionInPharmacist entity.
type PositionInPharmacistUpdateOne struct {
	config
	hooks    []Hook
	mutation *PositionInPharmacistMutation
}

// SetPosition sets the position field.
func (pipuo *PositionInPharmacistUpdateOne) SetPosition(s string) *PositionInPharmacistUpdateOne {
	pipuo.mutation.SetPosition(s)
	return pipuo
}

// AddPharmacistIDs adds the pharmacist edge to Pharmacist by ids.
func (pipuo *PositionInPharmacistUpdateOne) AddPharmacistIDs(ids ...int) *PositionInPharmacistUpdateOne {
	pipuo.mutation.AddPharmacistIDs(ids...)
	return pipuo
}

// AddPharmacist adds the pharmacist edges to Pharmacist.
func (pipuo *PositionInPharmacistUpdateOne) AddPharmacist(p ...*Pharmacist) *PositionInPharmacistUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pipuo.AddPharmacistIDs(ids...)
}

// Mutation returns the PositionInPharmacistMutation object of the builder.
func (pipuo *PositionInPharmacistUpdateOne) Mutation() *PositionInPharmacistMutation {
	return pipuo.mutation
}

// RemovePharmacistIDs removes the pharmacist edge to Pharmacist by ids.
func (pipuo *PositionInPharmacistUpdateOne) RemovePharmacistIDs(ids ...int) *PositionInPharmacistUpdateOne {
	pipuo.mutation.RemovePharmacistIDs(ids...)
	return pipuo
}

// RemovePharmacist removes pharmacist edges to Pharmacist.
func (pipuo *PositionInPharmacistUpdateOne) RemovePharmacist(p ...*Pharmacist) *PositionInPharmacistUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pipuo.RemovePharmacistIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (pipuo *PositionInPharmacistUpdateOne) Save(ctx context.Context) (*PositionInPharmacist, error) {
	if v, ok := pipuo.mutation.Position(); ok {
		if err := positioninpharmacist.PositionValidator(v); err != nil {
			return nil, &ValidationError{Name: "position", err: fmt.Errorf("ent: validator failed for field \"position\": %w", err)}
		}
	}

	var (
		err  error
		node *PositionInPharmacist
	)
	if len(pipuo.hooks) == 0 {
		node, err = pipuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PositionInPharmacistMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pipuo.mutation = mutation
			node, err = pipuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pipuo.hooks) - 1; i >= 0; i-- {
			mut = pipuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pipuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pipuo *PositionInPharmacistUpdateOne) SaveX(ctx context.Context) *PositionInPharmacist {
	pip, err := pipuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pip
}

// Exec executes the query on the entity.
func (pipuo *PositionInPharmacistUpdateOne) Exec(ctx context.Context) error {
	_, err := pipuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pipuo *PositionInPharmacistUpdateOne) ExecX(ctx context.Context) {
	if err := pipuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pipuo *PositionInPharmacistUpdateOne) sqlSave(ctx context.Context) (pip *PositionInPharmacist, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   positioninpharmacist.Table,
			Columns: positioninpharmacist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: positioninpharmacist.FieldID,
			},
		},
	}
	id, ok := pipuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing PositionInPharmacist.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := pipuo.mutation.Position(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: positioninpharmacist.FieldPosition,
		})
	}
	if nodes := pipuo.mutation.RemovedPharmacistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   positioninpharmacist.PharmacistTable,
			Columns: []string{positioninpharmacist.PharmacistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pharmacist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pipuo.mutation.PharmacistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   positioninpharmacist.PharmacistTable,
			Columns: []string{positioninpharmacist.PharmacistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pharmacist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pip = &PositionInPharmacist{config: pipuo.config}
	_spec.Assign = pip.assignValues
	_spec.ScanValues = pip.scanValues()
	if err = sqlgraph.UpdateNode(ctx, pipuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{positioninpharmacist.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pip, nil
}

// Code generated by entc, DO NOT EDIT.

package prescription

const (
	// Label holds the string label denoting the prescription type in the database.
	Label = "prescription"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldSymptom holds the string denoting the symptom field in the database.
	FieldSymptom = "symptom"
	// FieldAnnotation holds the string denoting the annotation field in the database.
	FieldAnnotation = "annotation"

	// EdgePrescriptionpatient holds the string denoting the prescriptionpatient edge name in mutations.
	EdgePrescriptionpatient = "prescriptionpatient"
	// EdgePrescriptiondoctor holds the string denoting the prescriptiondoctor edge name in mutations.
	EdgePrescriptiondoctor = "prescriptiondoctor"
	// EdgePrescriptionmedicine holds the string denoting the prescriptionmedicine edge name in mutations.
	EdgePrescriptionmedicine = "prescriptionmedicine"
	// EdgeDispensemedicine holds the string denoting the dispensemedicine edge name in mutations.
	EdgeDispensemedicine = "dispensemedicine"

	// Table holds the table name of the prescription in the database.
	Table = "prescriptions"
	// PrescriptionpatientTable is the table the holds the prescriptionpatient relation/edge.
	PrescriptionpatientTable = "prescriptions"
	// PrescriptionpatientInverseTable is the table name for the PatientInfo entity.
	// It exists in this package in order to avoid circular dependency with the "patientinfo" package.
	PrescriptionpatientInverseTable = "patient_infos"
	// PrescriptionpatientColumn is the table column denoting the prescriptionpatient relation/edge.
	PrescriptionpatientColumn = "patient_id"
	// PrescriptiondoctorTable is the table the holds the prescriptiondoctor relation/edge.
	PrescriptiondoctorTable = "prescriptions"
	// PrescriptiondoctorInverseTable is the table name for the Doctor entity.
	// It exists in this package in order to avoid circular dependency with the "doctor" package.
	PrescriptiondoctorInverseTable = "doctors"
	// PrescriptiondoctorColumn is the table column denoting the prescriptiondoctor relation/edge.
	PrescriptiondoctorColumn = "doctor_id"
	// PrescriptionmedicineTable is the table the holds the prescriptionmedicine relation/edge.
	PrescriptionmedicineTable = "prescriptions"
	// PrescriptionmedicineInverseTable is the table name for the Medicine entity.
	// It exists in this package in order to avoid circular dependency with the "medicine" package.
	PrescriptionmedicineInverseTable = "medicines"
	// PrescriptionmedicineColumn is the table column denoting the prescriptionmedicine relation/edge.
	PrescriptionmedicineColumn = "medicine_id"
	// DispensemedicineTable is the table the holds the dispensemedicine relation/edge.
	DispensemedicineTable = "dispense_medicines"
	// DispensemedicineInverseTable is the table name for the DispenseMedicine entity.
	// It exists in this package in order to avoid circular dependency with the "dispensemedicine" package.
	DispensemedicineInverseTable = "dispense_medicines"
	// DispensemedicineColumn is the table column denoting the dispensemedicine relation/edge.
	DispensemedicineColumn = "prescription_id"
)

// Columns holds all SQL columns for prescription fields.
var Columns = []string{
	FieldID,
	FieldValue,
	FieldSymptom,
	FieldAnnotation,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Prescription type.
var ForeignKeys = []string{
	"doctor_id",
	"medicine_id",
	"patient_id",
}

var (
	// ValueValidator is a validator for the "Value" field. It is called by the builders before save.
	ValueValidator func(int) error
	// SymptomValidator is a validator for the "Symptom" field. It is called by the builders before save.
	SymptomValidator func(string) error
	// AnnotationValidator is a validator for the "Annotation" field. It is called by the builders before save.
	AnnotationValidator func(string) error
)

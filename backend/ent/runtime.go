// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/sut63/team01/ent/annotation"
	"github.com/sut63/team01/ent/bill"
	"github.com/sut63/team01/ent/company"
	"github.com/sut63/team01/ent/doctor"
	"github.com/sut63/team01/ent/order"
	"github.com/sut63/team01/ent/patientinfo"
	"github.com/sut63/team01/ent/pharmacist"
	"github.com/sut63/team01/ent/schema"
)

// The init function reads all schema descriptors with runtime
// code (default values, validators or hooks) and stitches it
// to their package variables.
func init() {
	annotationFields := schema.Annotation{}.Fields()
	_ = annotationFields
	// annotationDescMessages is the schema descriptor for messages field.
	annotationDescMessages := annotationFields[0].Descriptor()
	// annotation.MessagesValidator is a validator for the "messages" field. It is called by the builders before save.
	annotation.MessagesValidator = annotationDescMessages.Validators[0].(func(string) error)
	billFields := schema.Bill{}.Fields()
	_ = billFields
	// billDescAmount is the schema descriptor for amount field.
	billDescAmount := billFields[0].Descriptor()
	// bill.AmountValidator is a validator for the "amount" field. It is called by the builders before save.
	bill.AmountValidator = billDescAmount.Validators[0].(func(int) error)
	companyFields := schema.Company{}.Fields()
	_ = companyFields
	// companyDescCompanyname is the schema descriptor for companyname field.
	companyDescCompanyname := companyFields[0].Descriptor()
	// company.CompanynameValidator is a validator for the "companyname" field. It is called by the builders before save.
	company.CompanynameValidator = companyDescCompanyname.Validators[0].(func(string) error)
	doctorFields := schema.Doctor{}.Fields()
	_ = doctorFields
	// doctorDescEmail is the schema descriptor for email field.
	doctorDescEmail := doctorFields[0].Descriptor()
	// doctor.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	doctor.EmailValidator = doctorDescEmail.Validators[0].(func(string) error)
	// doctorDescPassword is the schema descriptor for password field.
	doctorDescPassword := doctorFields[1].Descriptor()
	// doctor.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	doctor.PasswordValidator = doctorDescPassword.Validators[0].(func(string) error)
	// doctorDescName is the schema descriptor for name field.
	doctorDescName := doctorFields[2].Descriptor()
	// doctor.NameValidator is a validator for the "name" field. It is called by the builders before save.
	doctor.NameValidator = doctorDescName.Validators[0].(func(string) error)
	orderFields := schema.Order{}.Fields()
	_ = orderFields
	// orderDescAmount is the schema descriptor for amount field.
	orderDescAmount := orderFields[0].Descriptor()
	// order.AmountValidator is a validator for the "amount" field. It is called by the builders before save.
	order.AmountValidator = orderDescAmount.Validators[0].(func(int) error)
	patientinfoFields := schema.PatientInfo{}.Fields()
	_ = patientinfoFields
	// patientinfoDescCardNumber is the schema descriptor for cardNumber field.
	patientinfoDescCardNumber := patientinfoFields[0].Descriptor()
	// patientinfo.CardNumberValidator is a validator for the "cardNumber" field. It is called by the builders before save.
	patientinfo.CardNumberValidator = patientinfoDescCardNumber.Validators[0].(func(string) error)
	// patientinfoDescName is the schema descriptor for name field.
	patientinfoDescName := patientinfoFields[1].Descriptor()
	// patientinfo.NameValidator is a validator for the "name" field. It is called by the builders before save.
	patientinfo.NameValidator = patientinfoDescName.Validators[0].(func(string) error)
	// patientinfoDescGender is the schema descriptor for gender field.
	patientinfoDescGender := patientinfoFields[2].Descriptor()
	// patientinfo.GenderValidator is a validator for the "gender" field. It is called by the builders before save.
	patientinfo.GenderValidator = patientinfoDescGender.Validators[0].(func(string) error)
	// patientinfoDescAge is the schema descriptor for age field.
	patientinfoDescAge := patientinfoFields[3].Descriptor()
	// patientinfo.AgeValidator is a validator for the "age" field. It is called by the builders before save.
	patientinfo.AgeValidator = patientinfoDescAge.Validators[0].(func(int) error)
	pharmacistFields := schema.Pharmacist{}.Fields()
	_ = pharmacistFields
	// pharmacistDescEmail is the schema descriptor for email field.
	pharmacistDescEmail := pharmacistFields[0].Descriptor()
	// pharmacist.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	pharmacist.EmailValidator = pharmacistDescEmail.Validators[0].(func(string) error)
	// pharmacistDescPassword is the schema descriptor for password field.
	pharmacistDescPassword := pharmacistFields[1].Descriptor()
	// pharmacist.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	pharmacist.PasswordValidator = pharmacistDescPassword.Validators[0].(func(string) error)
	// pharmacistDescName is the schema descriptor for name field.
	pharmacistDescName := pharmacistFields[2].Descriptor()
	// pharmacist.NameValidator is a validator for the "name" field. It is called by the builders before save.
	pharmacist.NameValidator = pharmacistDescName.Validators[0].(func(string) error)
}

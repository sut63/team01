// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team01/ent/unitofmedicine"
)

// UnitOfMedicine is the model entity for the UnitOfMedicine schema.
type UnitOfMedicine struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UnitOfMedicineQuery when eager-loading is set.
	Edges UnitOfMedicineEdges `json:"edges"`
}

// UnitOfMedicineEdges holds the relations/edges for other nodes in the graph.
type UnitOfMedicineEdges struct {
	// Medicine holds the value of the Medicine edge.
	Medicine []*Medicine
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MedicineOrErr returns the Medicine value or an error if the edge
// was not loaded in eager-loading.
func (e UnitOfMedicineEdges) MedicineOrErr() ([]*Medicine, error) {
	if e.loadedTypes[0] {
		return e.Medicine, nil
	}
	return nil, &NotLoadedError{edge: "Medicine"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UnitOfMedicine) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UnitOfMedicine fields.
func (uom *UnitOfMedicine) assignValues(values ...interface{}) error {
	if m, n := len(values), len(unitofmedicine.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	uom.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		uom.Name = value.String
	}
	return nil
}

// QueryMedicine queries the Medicine edge of the UnitOfMedicine.
func (uom *UnitOfMedicine) QueryMedicine() *MedicineQuery {
	return (&UnitOfMedicineClient{config: uom.config}).QueryMedicine(uom)
}

// Update returns a builder for updating this UnitOfMedicine.
// Note that, you need to call UnitOfMedicine.Unwrap() before calling this method, if this UnitOfMedicine
// was returned from a transaction, and the transaction was committed or rolled back.
func (uom *UnitOfMedicine) Update() *UnitOfMedicineUpdateOne {
	return (&UnitOfMedicineClient{config: uom.config}).UpdateOne(uom)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (uom *UnitOfMedicine) Unwrap() *UnitOfMedicine {
	tx, ok := uom.config.driver.(*txDriver)
	if !ok {
		panic("ent: UnitOfMedicine is not a transactional entity")
	}
	uom.config.driver = tx.drv
	return uom
}

// String implements the fmt.Stringer.
func (uom *UnitOfMedicine) String() string {
	var builder strings.Builder
	builder.WriteString("UnitOfMedicine(")
	builder.WriteString(fmt.Sprintf("id=%v", uom.ID))
	builder.WriteString(", name=")
	builder.WriteString(uom.Name)
	builder.WriteByte(')')
	return builder.String()
}

// UnitOfMedicines is a parsable slice of UnitOfMedicine.
type UnitOfMedicines []*UnitOfMedicine

func (uom UnitOfMedicines) config(cfg config) {
	for _i := range uom {
		uom[_i].config = cfg
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team01/ent/medicine"
	"github.com/sut63/team01/ent/unitofmedicine"
)

// UnitOfMedicineCreate is the builder for creating a UnitOfMedicine entity.
type UnitOfMedicineCreate struct {
	config
	mutation *UnitOfMedicineMutation
	hooks    []Hook
}

// SetName sets the name field.
func (uomc *UnitOfMedicineCreate) SetName(s string) *UnitOfMedicineCreate {
	uomc.mutation.SetName(s)
	return uomc
}

// AddMedicineIDs adds the Medicine edge to Medicine by ids.
func (uomc *UnitOfMedicineCreate) AddMedicineIDs(ids ...int) *UnitOfMedicineCreate {
	uomc.mutation.AddMedicineIDs(ids...)
	return uomc
}

// AddMedicine adds the Medicine edges to Medicine.
func (uomc *UnitOfMedicineCreate) AddMedicine(m ...*Medicine) *UnitOfMedicineCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uomc.AddMedicineIDs(ids...)
}

// Mutation returns the UnitOfMedicineMutation object of the builder.
func (uomc *UnitOfMedicineCreate) Mutation() *UnitOfMedicineMutation {
	return uomc.mutation
}

// Save creates the UnitOfMedicine in the database.
func (uomc *UnitOfMedicineCreate) Save(ctx context.Context) (*UnitOfMedicine, error) {
	if _, ok := uomc.mutation.Name(); !ok {
		return nil, &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	var (
		err  error
		node *UnitOfMedicine
	)
	if len(uomc.hooks) == 0 {
		node, err = uomc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UnitOfMedicineMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uomc.mutation = mutation
			node, err = uomc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uomc.hooks) - 1; i >= 0; i-- {
			mut = uomc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uomc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uomc *UnitOfMedicineCreate) SaveX(ctx context.Context) *UnitOfMedicine {
	v, err := uomc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uomc *UnitOfMedicineCreate) sqlSave(ctx context.Context) (*UnitOfMedicine, error) {
	uom, _spec := uomc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uomc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	uom.ID = int(id)
	return uom, nil
}

func (uomc *UnitOfMedicineCreate) createSpec() (*UnitOfMedicine, *sqlgraph.CreateSpec) {
	var (
		uom   = &UnitOfMedicine{config: uomc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: unitofmedicine.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: unitofmedicine.FieldID,
			},
		}
	)
	if value, ok := uomc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unitofmedicine.FieldName,
		})
		uom.Name = value
	}
	if nodes := uomc.mutation.MedicineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   unitofmedicine.MedicineTable,
			Columns: []string{unitofmedicine.MedicineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicine.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return uom, _spec
}

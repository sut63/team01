/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API Playlist Vidoe
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersBill,
    ControllersBillFromJSON,
    ControllersBillToJSON,
    ControllersDispenseMedicine,
    ControllersDispenseMedicineFromJSON,
    ControllersDispenseMedicineToJSON,
    ControllersMedicine,
    ControllersMedicineFromJSON,
    ControllersMedicineToJSON,
    ControllersOrder,
    ControllersOrderFromJSON,
    ControllersOrderToJSON,
    ControllersPrescription,
    ControllersPrescriptionFromJSON,
    ControllersPrescriptionToJSON,
    EntAnnotation,
    EntAnnotationFromJSON,
    EntAnnotationToJSON,
    EntBill,
    EntBillFromJSON,
    EntBillToJSON,
    EntCompany,
    EntCompanyFromJSON,
    EntCompanyToJSON,
    EntDispenseMedicine,
    EntDispenseMedicineFromJSON,
    EntDispenseMedicineToJSON,
    EntDoctor,
    EntDoctorFromJSON,
    EntDoctorToJSON,
    EntDrugAllergy,
    EntDrugAllergyFromJSON,
    EntDrugAllergyToJSON,
    EntLevelOfDangerous,
    EntLevelOfDangerousFromJSON,
    EntLevelOfDangerousToJSON,
    EntMedicine,
    EntMedicineFromJSON,
    EntMedicineToJSON,
    EntMedicineType,
    EntMedicineTypeFromJSON,
    EntMedicineTypeToJSON,
    EntOrder,
    EntOrderFromJSON,
    EntOrderToJSON,
    EntPatientInfo,
    EntPatientInfoFromJSON,
    EntPatientInfoToJSON,
    EntPayment,
    EntPaymentFromJSON,
    EntPaymentToJSON,
    EntPharmacist,
    EntPharmacistFromJSON,
    EntPharmacistToJSON,
    EntPositionInPharmacist,
    EntPositionInPharmacistFromJSON,
    EntPositionInPharmacistToJSON,
    EntPrescription,
    EntPrescriptionFromJSON,
    EntPrescriptionToJSON,
    EntUnitOfMedicine,
    EntUnitOfMedicineFromJSON,
    EntUnitOfMedicineToJSON,
} from '../models';

export interface CreateAnnotationRequest {
    annotation: EntAnnotation;
}

export interface CreateBillRequest {
    bill: ControllersBill;
}

export interface CreateCompanyRequest {
    company: EntCompany;
}

export interface CreateDispensemedicineRequest {
    dispensemedicine: ControllersDispenseMedicine;
}

export interface CreateDoctorRequest {
    doctor: EntDoctor;
}

export interface CreateDrugAllergyRequest {
    drugAllergy: EntDrugAllergy;
}

export interface CreateLevelOfDangerousRequest {
    levelOfDangerous: EntLevelOfDangerous;
}

export interface CreateMedicineRequest {
    medicine: ControllersMedicine;
}

export interface CreateMedicineTypeRequest {
    medicineType: EntMedicineType;
}

export interface CreateOrderRequest {
    order: ControllersOrder;
}

export interface CreatePaymentRequest {
    payment: EntPayment;
}

export interface CreatePharmacistRequest {
    pharmacist: EntPharmacist;
}

export interface CreatePositioninpharmacistRequest {
    positioninpharmacist: EntPositionInPharmacist;
}

export interface CreatePpatientInfoRequest {
    patientInfo: EntPatientInfo;
}

export interface CreatePrescriptionRequest {
    prescription: ControllersPrescription;
}

export interface CreateUnitOfMedicineRequest {
    unitOfMedicine: EntUnitOfMedicine;
}

export interface DeleteAnnotationRequest {
    id: number;
}

export interface DeleteBillRequest {
    id: number;
}

export interface DeleteDispensemedicineRequest {
    id: number;
}

export interface DeleteDrugAllergyRequest {
    id: number;
}

export interface DeleteLevelOfDangerousRequest {
    id: number;
}

export interface DeleteMedicineTypeRequest {
    id: number;
}

export interface DeleteOrderRequest {
    id: number;
}

export interface DeletePatientInfoRequest {
    id: number;
}

export interface DeletePaymentRequest {
    id: number;
}

export interface DeletePharmacistRequest {
    id: number;
}

export interface DeletePositioninpharmacistRequest {
    id: number;
}

export interface DeleteUnitOfMedicineRequest {
    id: number;
}

export interface GetAnnotationRequest {
    id: number;
}

export interface GetBillRequest {
    id: number;
}

export interface GetCompanyRequest {
    id: number;
}

export interface GetDispensemedicineRequest {
    id: string;
}

export interface GetDoctorRequest {
    id: number;
}

export interface GetDrugAllergyRequest {
    card: string;
}

export interface GetLevelOfDangerousRequest {
    id: number;
}

export interface GetMedicineTypeRequest {
    id: number;
}

export interface GetOrderRequest {
    id: number;
}

export interface GetPatientInfoRequest {
    id: number;
}

export interface GetPaymentRequest {
    id: number;
}

export interface GetPharmacistRequest {
    id: number;
}

export interface GetPositioninpharmacistRequest {
    id: number;
}

export interface GetPrescriptionRequest {
    id: number;
}

export interface GetUnitOfMedicineRequest {
    id: number;
}

export interface ListAnnotationRequest {
    limit?: number;
    offset?: number;
}

export interface ListBillRequest {
    limit?: number;
    offset?: number;
}

export interface ListCompanyRequest {
    limit?: number;
    offset?: number;
}

export interface ListDispensemedicineRequest {
    limit?: number;
    offset?: number;
}

export interface ListDoctorRequest {
    limit?: number;
    offset?: number;
}

export interface ListDrugAllergyRequest {
    limit?: number;
    offset?: number;
}

export interface ListLevelOfDangerousRequest {
    limit?: number;
    offset?: number;
}

export interface ListMedicineRequest {
    limit?: number;
    offset?: number;
}

export interface ListMedicineTypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListOrderRequest {
    limit?: number;
    offset?: number;
}

export interface ListPatientInfoRequest {
    limit?: number;
    offset?: number;
}

export interface ListPaymentRequest {
    limit?: number;
    offset?: number;
}

export interface ListPharmacistRequest {
    limit?: number;
    offset?: number;
}

export interface ListPositioninpharmacistRequest {
    limit?: number;
    offset?: number;
}

export interface ListPrescriptionRequest {
    limit?: number;
    offset?: number;
}

export interface ListUnitOfMedicineRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateAnnotationRequest {
    id: number;
    annotation: EntAnnotation;
}

export interface UpdateBillRequest {
    id: number;
    bill: EntBill;
}

export interface UpdateDispensemedicineRequest {
    id: number;
    dispensemedicine: EntDispenseMedicine;
}

export interface UpdateDoctorRequest {
    id: number;
    doctor: EntDoctor;
}

export interface UpdateDrugAllergyRequest {
    id: number;
    drugallergy: EntDrugAllergy;
}

export interface UpdateLevelOfDangerousRequest {
    id: number;
    levelOfDangerous: EntLevelOfDangerous;
}

export interface UpdateMedicineTypeRequest {
    id: number;
    medicineType: EntMedicineType;
}

export interface UpdatePatientInfoRequest {
    id: number;
    patientInfo: EntPatientInfo;
}

export interface UpdatePaymentRequest {
    id: number;
    payment: EntPayment;
}

export interface UpdatePharmacistRequest {
    id: number;
    pharmacist: EntPharmacist;
}

export interface UpdatePositioninpharmacistRequest {
    id: number;
    positioninpharmacist: EntPositionInPharmacist;
}

export interface UpdatePrescriptionRequest {
    id: number;
    prescription: EntPrescription;
}

export interface UpdateUnitOfMedicineRequest {
    id: number;
    unitOfMedicine: EntUnitOfMedicine;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create annotation
     * Create annotation
     */
    async createAnnotationRaw(requestParameters: CreateAnnotationRequest): Promise<runtime.ApiResponse<EntAnnotation>> {
        if (requestParameters.annotation === null || requestParameters.annotation === undefined) {
            throw new runtime.RequiredError('annotation','Required parameter requestParameters.annotation was null or undefined when calling createAnnotation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/annotations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntAnnotationToJSON(requestParameters.annotation),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAnnotationFromJSON(jsonValue));
    }

    /**
     * Create annotation
     * Create annotation
     */
    async createAnnotation(requestParameters: CreateAnnotationRequest): Promise<EntAnnotation> {
        const response = await this.createAnnotationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create bill
     * Create bill
     */
    async createBillRaw(requestParameters: CreateBillRequest): Promise<runtime.ApiResponse<EntBill>> {
        if (requestParameters.bill === null || requestParameters.bill === undefined) {
            throw new runtime.RequiredError('bill','Required parameter requestParameters.bill was null or undefined when calling createBill.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bills`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersBillToJSON(requestParameters.bill),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBillFromJSON(jsonValue));
    }

    /**
     * Create bill
     * Create bill
     */
    async createBill(requestParameters: CreateBillRequest): Promise<EntBill> {
        const response = await this.createBillRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create company
     * Create company
     */
    async createCompanyRaw(requestParameters: CreateCompanyRequest): Promise<runtime.ApiResponse<EntCompany>> {
        if (requestParameters.company === null || requestParameters.company === undefined) {
            throw new runtime.RequiredError('company','Required parameter requestParameters.company was null or undefined when calling createCompany.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/companys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntCompanyToJSON(requestParameters.company),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCompanyFromJSON(jsonValue));
    }

    /**
     * Create company
     * Create company
     */
    async createCompany(requestParameters: CreateCompanyRequest): Promise<EntCompany> {
        const response = await this.createCompanyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create dispensemedicine
     * Create dispensemedicine
     */
    async createDispensemedicineRaw(requestParameters: CreateDispensemedicineRequest): Promise<runtime.ApiResponse<EntDispenseMedicine>> {
        if (requestParameters.dispensemedicine === null || requestParameters.dispensemedicine === undefined) {
            throw new runtime.RequiredError('dispensemedicine','Required parameter requestParameters.dispensemedicine was null or undefined when calling createDispensemedicine.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/dispensemedicines`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersDispenseMedicineToJSON(requestParameters.dispensemedicine),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDispenseMedicineFromJSON(jsonValue));
    }

    /**
     * Create dispensemedicine
     * Create dispensemedicine
     */
    async createDispensemedicine(requestParameters: CreateDispensemedicineRequest): Promise<EntDispenseMedicine> {
        const response = await this.createDispensemedicineRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create Doctor
     * Create Doctor
     */
    async createDoctorRaw(requestParameters: CreateDoctorRequest): Promise<runtime.ApiResponse<EntDoctor>> {
        if (requestParameters.doctor === null || requestParameters.doctor === undefined) {
            throw new runtime.RequiredError('doctor','Required parameter requestParameters.doctor was null or undefined when calling createDoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Doctor`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDoctorToJSON(requestParameters.doctor),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDoctorFromJSON(jsonValue));
    }

    /**
     * Create Doctor
     * Create Doctor
     */
    async createDoctor(requestParameters: CreateDoctorRequest): Promise<EntDoctor> {
        const response = await this.createDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create drug-allergy
     * Create drug-allergy
     */
    async createDrugAllergyRaw(requestParameters: CreateDrugAllergyRequest): Promise<runtime.ApiResponse<EntDrugAllergy>> {
        if (requestParameters.drugAllergy === null || requestParameters.drugAllergy === undefined) {
            throw new runtime.RequiredError('drugAllergy','Required parameter requestParameters.drugAllergy was null or undefined when calling createDrugAllergy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/drugallergys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDrugAllergyToJSON(requestParameters.drugAllergy),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDrugAllergyFromJSON(jsonValue));
    }

    /**
     * Create drug-allergy
     * Create drug-allergy
     */
    async createDrugAllergy(requestParameters: CreateDrugAllergyRequest): Promise<EntDrugAllergy> {
        const response = await this.createDrugAllergyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create LevelOfDangerous
     * Create LevelOfDangerous
     */
    async createLevelOfDangerousRaw(requestParameters: CreateLevelOfDangerousRequest): Promise<runtime.ApiResponse<EntLevelOfDangerous>> {
        if (requestParameters.levelOfDangerous === null || requestParameters.levelOfDangerous === undefined) {
            throw new runtime.RequiredError('levelOfDangerous','Required parameter requestParameters.levelOfDangerous was null or undefined when calling createLevelOfDangerous.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/LevelOfDangerous`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntLevelOfDangerousToJSON(requestParameters.levelOfDangerous),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntLevelOfDangerousFromJSON(jsonValue));
    }

    /**
     * Create LevelOfDangerous
     * Create LevelOfDangerous
     */
    async createLevelOfDangerous(requestParameters: CreateLevelOfDangerousRequest): Promise<EntLevelOfDangerous> {
        const response = await this.createLevelOfDangerousRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create Medicine
     * Create Medicine
     */
    async createMedicineRaw(requestParameters: CreateMedicineRequest): Promise<runtime.ApiResponse<EntMedicine>> {
        if (requestParameters.medicine === null || requestParameters.medicine === undefined) {
            throw new runtime.RequiredError('medicine','Required parameter requestParameters.medicine was null or undefined when calling createMedicine.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Medicine`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersMedicineToJSON(requestParameters.medicine),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMedicineFromJSON(jsonValue));
    }

    /**
     * Create Medicine
     * Create Medicine
     */
    async createMedicine(requestParameters: CreateMedicineRequest): Promise<EntMedicine> {
        const response = await this.createMedicineRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create MedicineType
     * Create MedicineType
     */
    async createMedicineTypeRaw(requestParameters: CreateMedicineTypeRequest): Promise<runtime.ApiResponse<EntMedicineType>> {
        if (requestParameters.medicineType === null || requestParameters.medicineType === undefined) {
            throw new runtime.RequiredError('medicineType','Required parameter requestParameters.medicineType was null or undefined when calling createMedicineType.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/MedicineType`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntMedicineTypeToJSON(requestParameters.medicineType),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMedicineTypeFromJSON(jsonValue));
    }

    /**
     * Create MedicineType
     * Create MedicineType
     */
    async createMedicineType(requestParameters: CreateMedicineTypeRequest): Promise<EntMedicineType> {
        const response = await this.createMedicineTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create order
     * Create order
     */
    async createOrderRaw(requestParameters: CreateOrderRequest): Promise<runtime.ApiResponse<ControllersOrder>> {
        if (requestParameters.order === null || requestParameters.order === undefined) {
            throw new runtime.RequiredError('order','Required parameter requestParameters.order was null or undefined when calling createOrder.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/orders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersOrderToJSON(requestParameters.order),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersOrderFromJSON(jsonValue));
    }

    /**
     * Create order
     * Create order
     */
    async createOrder(requestParameters: CreateOrderRequest): Promise<ControllersOrder> {
        const response = await this.createOrderRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create payment
     * Create payment
     */
    async createPaymentRaw(requestParameters: CreatePaymentRequest): Promise<runtime.ApiResponse<EntPayment>> {
        if (requestParameters.payment === null || requestParameters.payment === undefined) {
            throw new runtime.RequiredError('payment','Required parameter requestParameters.payment was null or undefined when calling createPayment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/payments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPaymentToJSON(requestParameters.payment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPaymentFromJSON(jsonValue));
    }

    /**
     * Create payment
     * Create payment
     */
    async createPayment(requestParameters: CreatePaymentRequest): Promise<EntPayment> {
        const response = await this.createPaymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create pharmacist
     * Create pharmacist
     */
    async createPharmacistRaw(requestParameters: CreatePharmacistRequest): Promise<runtime.ApiResponse<EntPharmacist>> {
        if (requestParameters.pharmacist === null || requestParameters.pharmacist === undefined) {
            throw new runtime.RequiredError('pharmacist','Required parameter requestParameters.pharmacist was null or undefined when calling createPharmacist.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/pharmacists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPharmacistToJSON(requestParameters.pharmacist),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPharmacistFromJSON(jsonValue));
    }

    /**
     * Create pharmacist
     * Create pharmacist
     */
    async createPharmacist(requestParameters: CreatePharmacistRequest): Promise<EntPharmacist> {
        const response = await this.createPharmacistRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create positioninpharmacist
     * Create positioninpharmacist
     */
    async createPositioninpharmacistRaw(requestParameters: CreatePositioninpharmacistRequest): Promise<runtime.ApiResponse<EntPositionInPharmacist>> {
        if (requestParameters.positioninpharmacist === null || requestParameters.positioninpharmacist === undefined) {
            throw new runtime.RequiredError('positioninpharmacist','Required parameter requestParameters.positioninpharmacist was null or undefined when calling createPositioninpharmacist.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/positioninpharmacists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPositionInPharmacistToJSON(requestParameters.positioninpharmacist),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPositionInPharmacistFromJSON(jsonValue));
    }

    /**
     * Create positioninpharmacist
     * Create positioninpharmacist
     */
    async createPositioninpharmacist(requestParameters: CreatePositioninpharmacistRequest): Promise<EntPositionInPharmacist> {
        const response = await this.createPositioninpharmacistRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create PatientInfo
     * Create PatientInfo
     */
    async createPpatientInfoRaw(requestParameters: CreatePpatientInfoRequest): Promise<runtime.ApiResponse<EntPatientInfo>> {
        if (requestParameters.patientInfo === null || requestParameters.patientInfo === undefined) {
            throw new runtime.RequiredError('patientInfo','Required parameter requestParameters.patientInfo was null or undefined when calling createPpatientInfo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patientinfos`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientInfoToJSON(requestParameters.patientInfo),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientInfoFromJSON(jsonValue));
    }

    /**
     * Create PatientInfo
     * Create PatientInfo
     */
    async createPpatientInfo(requestParameters: CreatePpatientInfoRequest): Promise<EntPatientInfo> {
        const response = await this.createPpatientInfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create Prescription
     * Create Prescription
     */
    async createPrescriptionRaw(requestParameters: CreatePrescriptionRequest): Promise<runtime.ApiResponse<EntPrescription>> {
        if (requestParameters.prescription === null || requestParameters.prescription === undefined) {
            throw new runtime.RequiredError('prescription','Required parameter requestParameters.prescription was null or undefined when calling createPrescription.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Prescription`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersPrescriptionToJSON(requestParameters.prescription),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPrescriptionFromJSON(jsonValue));
    }

    /**
     * Create Prescription
     * Create Prescription
     */
    async createPrescription(requestParameters: CreatePrescriptionRequest): Promise<EntPrescription> {
        const response = await this.createPrescriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create UnitOfMedicine
     * Create UnitOfMedicine
     */
    async createUnitOfMedicineRaw(requestParameters: CreateUnitOfMedicineRequest): Promise<runtime.ApiResponse<EntUnitOfMedicine>> {
        if (requestParameters.unitOfMedicine === null || requestParameters.unitOfMedicine === undefined) {
            throw new runtime.RequiredError('unitOfMedicine','Required parameter requestParameters.unitOfMedicine was null or undefined when calling createUnitOfMedicine.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/UnitOfMedicine`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUnitOfMedicineToJSON(requestParameters.unitOfMedicine),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUnitOfMedicineFromJSON(jsonValue));
    }

    /**
     * Create UnitOfMedicine
     * Create UnitOfMedicine
     */
    async createUnitOfMedicine(requestParameters: CreateUnitOfMedicineRequest): Promise<EntUnitOfMedicine> {
        const response = await this.createUnitOfMedicineRaw(requestParameters);
        return await response.value();
    }

    /**
     * get annotation by ID
     * Delete a annotation entity by ID
     */
    async deleteAnnotationRaw(requestParameters: DeleteAnnotationRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAnnotation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/annotations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get annotation by ID
     * Delete a annotation entity by ID
     */
    async deleteAnnotation(requestParameters: DeleteAnnotationRequest): Promise<object> {
        const response = await this.deleteAnnotationRaw(requestParameters);
        return await response.value();
    }

    /**
     * get bill by ID
     * Delete a bill entity by ID
     */
    async deleteBillRaw(requestParameters: DeleteBillRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBill.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bills/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get bill by ID
     * Delete a bill entity by ID
     */
    async deleteBill(requestParameters: DeleteBillRequest): Promise<object> {
        const response = await this.deleteBillRaw(requestParameters);
        return await response.value();
    }

    /**
     * get dispensemedicine by ID
     * Delete a dispensemedicine entity by ID
     */
    async deleteDispensemedicineRaw(requestParameters: DeleteDispensemedicineRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDispensemedicine.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dispensemedicines/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get dispensemedicine by ID
     * Delete a dispensemedicine entity by ID
     */
    async deleteDispensemedicine(requestParameters: DeleteDispensemedicineRequest): Promise<object> {
        const response = await this.deleteDispensemedicineRaw(requestParameters);
        return await response.value();
    }

    /**
     * get DrugAllergy by ID
     * Delete a DrugAllergy entity by ID
     */
    async deleteDrugAllergyRaw(requestParameters: DeleteDrugAllergyRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDrugAllergy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drugallergy/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get DrugAllergy by ID
     * Delete a DrugAllergy entity by ID
     */
    async deleteDrugAllergy(requestParameters: DeleteDrugAllergyRequest): Promise<object> {
        const response = await this.deleteDrugAllergyRaw(requestParameters);
        return await response.value();
    }

    /**
     * get LevelOfDangerous by ID
     * Delete a LevelOfDangerous entity by ID
     */
    async deleteLevelOfDangerousRaw(requestParameters: DeleteLevelOfDangerousRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteLevelOfDangerous.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/LevelOfDangerous/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get LevelOfDangerous by ID
     * Delete a LevelOfDangerous entity by ID
     */
    async deleteLevelOfDangerous(requestParameters: DeleteLevelOfDangerousRequest): Promise<object> {
        const response = await this.deleteLevelOfDangerousRaw(requestParameters);
        return await response.value();
    }

    /**
     * get MedicineType by ID
     * Delete a MedicineType entity by ID
     */
    async deleteMedicineTypeRaw(requestParameters: DeleteMedicineTypeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMedicineType.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/MedicineType/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get MedicineType by ID
     * Delete a MedicineType entity by ID
     */
    async deleteMedicineType(requestParameters: DeleteMedicineTypeRequest): Promise<object> {
        const response = await this.deleteMedicineTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get order by ID
     * Delete a order entity by ID
     */
    async deleteOrderRaw(requestParameters: DeleteOrderRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOrder.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/orders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get order by ID
     * Delete a order entity by ID
     */
    async deleteOrder(requestParameters: DeleteOrderRequest): Promise<object> {
        const response = await this.deleteOrderRaw(requestParameters);
        return await response.value();
    }

    /**
     * get PatientInfo by ID
     * Delete a PatientInfo entity by ID
     */
    async deletePatientInfoRaw(requestParameters: DeletePatientInfoRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePatientInfo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientinfos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get PatientInfo by ID
     * Delete a PatientInfo entity by ID
     */
    async deletePatientInfo(requestParameters: DeletePatientInfoRequest): Promise<object> {
        const response = await this.deletePatientInfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * get payment by ID
     * Delete a payment entity by ID
     */
    async deletePaymentRaw(requestParameters: DeletePaymentRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePayment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/payments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get payment by ID
     * Delete a payment entity by ID
     */
    async deletePayment(requestParameters: DeletePaymentRequest): Promise<object> {
        const response = await this.deletePaymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get pharmacist by ID
     * Delete a pharmacist entity by ID
     */
    async deletePharmacistRaw(requestParameters: DeletePharmacistRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePharmacist.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pharmacists/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get pharmacist by ID
     * Delete a pharmacist entity by ID
     */
    async deletePharmacist(requestParameters: DeletePharmacistRequest): Promise<object> {
        const response = await this.deletePharmacistRaw(requestParameters);
        return await response.value();
    }

    /**
     * get positioninpharmacist by ID
     * Delete a positioninpharmacist entity by ID
     */
    async deletePositioninpharmacistRaw(requestParameters: DeletePositioninpharmacistRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePositioninpharmacist.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/positioninpharmacists/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get positioninpharmacist by ID
     * Delete a positioninpharmacist entity by ID
     */
    async deletePositioninpharmacist(requestParameters: DeletePositioninpharmacistRequest): Promise<object> {
        const response = await this.deletePositioninpharmacistRaw(requestParameters);
        return await response.value();
    }

    /**
     * get UnitOfMedicine by ID
     * Delete a UnitOfMedicine entity by ID
     */
    async deleteUnitOfMedicineRaw(requestParameters: DeleteUnitOfMedicineRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUnitOfMedicine.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/UnitOfMedicine/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get UnitOfMedicine by ID
     * Delete a UnitOfMedicine entity by ID
     */
    async deleteUnitOfMedicine(requestParameters: DeleteUnitOfMedicineRequest): Promise<object> {
        const response = await this.deleteUnitOfMedicineRaw(requestParameters);
        return await response.value();
    }

    /**
     * get annotation by ID
     * Get a annotation entity by ID
     */
    async getAnnotationRaw(requestParameters: GetAnnotationRequest): Promise<runtime.ApiResponse<EntAnnotation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAnnotation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/annotations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAnnotationFromJSON(jsonValue));
    }

    /**
     * get annotation by ID
     * Get a annotation entity by ID
     */
    async getAnnotation(requestParameters: GetAnnotationRequest): Promise<EntAnnotation> {
        const response = await this.getAnnotationRaw(requestParameters);
        return await response.value();
    }

    /**
     * get bill by ID
     * Get a bill entity by ID
     */
    async getBillRaw(requestParameters: GetBillRequest): Promise<runtime.ApiResponse<EntBill>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBill.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bills/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBillFromJSON(jsonValue));
    }

    /**
     * get bill by ID
     * Get a bill entity by ID
     */
    async getBill(requestParameters: GetBillRequest): Promise<EntBill> {
        const response = await this.getBillRaw(requestParameters);
        return await response.value();
    }

    /**
     * get company by ID
     * Get a company entity by ID
     */
    async getCompanyRaw(requestParameters: GetCompanyRequest): Promise<runtime.ApiResponse<EntCompany>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCompany.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/companys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCompanyFromJSON(jsonValue));
    }

    /**
     * get company by ID
     * Get a company entity by ID
     */
    async getCompany(requestParameters: GetCompanyRequest): Promise<EntCompany> {
        const response = await this.getCompanyRaw(requestParameters);
        return await response.value();
    }

    /**
     * get dispensemedicine by ID
     * Get a dispensemedicine entity by ID
     */
    async getDispensemedicineRaw(requestParameters: GetDispensemedicineRequest): Promise<runtime.ApiResponse<Array<EntDispenseMedicine>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDispensemedicine.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dispensemedicines/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDispenseMedicineFromJSON));
    }

    /**
     * get dispensemedicine by ID
     * Get a dispensemedicine entity by ID
     */
    async getDispensemedicine(requestParameters: GetDispensemedicineRequest): Promise<Array<EntDispenseMedicine>> {
        const response = await this.getDispensemedicineRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Doctor by ID
     * Get a Doctor entity by ID
     */
    async getDoctorRaw(requestParameters: GetDoctorRequest): Promise<runtime.ApiResponse<EntDoctor>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Doctor/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDoctorFromJSON(jsonValue));
    }

    /**
     * get Doctor by ID
     * Get a Doctor entity by ID
     */
    async getDoctor(requestParameters: GetDoctorRequest): Promise<EntDoctor> {
        const response = await this.getDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * get DrugAllergy by Patient CardNumber
     * Get a DrugAllergy entity by Patient CardNumber
     */
    async getDrugAllergyRaw(requestParameters: GetDrugAllergyRequest): Promise<runtime.ApiResponse<Array<EntDrugAllergy>>> {
        if (requestParameters.card === null || requestParameters.card === undefined) {
            throw new runtime.RequiredError('card','Required parameter requestParameters.card was null or undefined when calling getDrugAllergy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drugallergys/{card}`.replace(`{${"card"}}`, encodeURIComponent(String(requestParameters.card))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDrugAllergyFromJSON));
    }

    /**
     * get DrugAllergy by Patient CardNumber
     * Get a DrugAllergy entity by Patient CardNumber
     */
    async getDrugAllergy(requestParameters: GetDrugAllergyRequest): Promise<Array<EntDrugAllergy>> {
        const response = await this.getDrugAllergyRaw(requestParameters);
        return await response.value();
    }

    /**
     * get LevelOfDangerous by ID
     * Get a LevelOfDangerous entity by ID
     */
    async getLevelOfDangerousRaw(requestParameters: GetLevelOfDangerousRequest): Promise<runtime.ApiResponse<EntLevelOfDangerous>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getLevelOfDangerous.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/LevelOfDangerous/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntLevelOfDangerousFromJSON(jsonValue));
    }

    /**
     * get LevelOfDangerous by ID
     * Get a LevelOfDangerous entity by ID
     */
    async getLevelOfDangerous(requestParameters: GetLevelOfDangerousRequest): Promise<EntLevelOfDangerous> {
        const response = await this.getLevelOfDangerousRaw(requestParameters);
        return await response.value();
    }

    /**
     * get MedicineType by ID
     * Get a MedicineType entity by ID
     */
    async getMedicineTypeRaw(requestParameters: GetMedicineTypeRequest): Promise<runtime.ApiResponse<EntMedicineType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMedicineType.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/MedicineType/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMedicineTypeFromJSON(jsonValue));
    }

    /**
     * get MedicineType by ID
     * Get a MedicineType entity by ID
     */
    async getMedicineType(requestParameters: GetMedicineTypeRequest): Promise<EntMedicineType> {
        const response = await this.getMedicineTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get order by ID
     * Get a order entity by ID
     */
    async getOrderRaw(requestParameters: GetOrderRequest): Promise<runtime.ApiResponse<Array<EntOrder>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrder.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/orders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntOrderFromJSON));
    }

    /**
     * get order by ID
     * Get a order entity by ID
     */
    async getOrder(requestParameters: GetOrderRequest): Promise<Array<EntOrder>> {
        const response = await this.getOrderRaw(requestParameters);
        return await response.value();
    }

    /**
     * get PatientInfo by ID
     * Get a PatientInfo entity by ID
     */
    async getPatientInfoRaw(requestParameters: GetPatientInfoRequest): Promise<runtime.ApiResponse<EntPatientInfo>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPatientInfo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientinfos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientInfoFromJSON(jsonValue));
    }

    /**
     * get PatientInfo by ID
     * Get a PatientInfo entity by ID
     */
    async getPatientInfo(requestParameters: GetPatientInfoRequest): Promise<EntPatientInfo> {
        const response = await this.getPatientInfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * get payment by ID
     * Get a payment entity by ID
     */
    async getPaymentRaw(requestParameters: GetPaymentRequest): Promise<runtime.ApiResponse<EntPayment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPayment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/payments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPaymentFromJSON(jsonValue));
    }

    /**
     * get payment by ID
     * Get a payment entity by ID
     */
    async getPayment(requestParameters: GetPaymentRequest): Promise<EntPayment> {
        const response = await this.getPaymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get pharmacist by ID
     * Get a pharmacist entity by ID
     */
    async getPharmacistRaw(requestParameters: GetPharmacistRequest): Promise<runtime.ApiResponse<EntPharmacist>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPharmacist.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pharmacists/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPharmacistFromJSON(jsonValue));
    }

    /**
     * get pharmacist by ID
     * Get a pharmacist entity by ID
     */
    async getPharmacist(requestParameters: GetPharmacistRequest): Promise<EntPharmacist> {
        const response = await this.getPharmacistRaw(requestParameters);
        return await response.value();
    }

    /**
     * get positioninpharmacist by ID
     * Get a positioninpharmacist entity by ID
     */
    async getPositioninpharmacistRaw(requestParameters: GetPositioninpharmacistRequest): Promise<runtime.ApiResponse<EntPositionInPharmacist>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPositioninpharmacist.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/positioninpharmacists/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPositionInPharmacistFromJSON(jsonValue));
    }

    /**
     * get positioninpharmacist by ID
     * Get a positioninpharmacist entity by ID
     */
    async getPositioninpharmacist(requestParameters: GetPositioninpharmacistRequest): Promise<EntPositionInPharmacist> {
        const response = await this.getPositioninpharmacistRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Prescription by ID
     * Get a Prescription entity by ID
     */
    async getPrescriptionRaw(requestParameters: GetPrescriptionRequest): Promise<runtime.ApiResponse<EntPrescription>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPrescription.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Prescription/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPrescriptionFromJSON(jsonValue));
    }

    /**
     * get Prescription by ID
     * Get a Prescription entity by ID
     */
    async getPrescription(requestParameters: GetPrescriptionRequest): Promise<EntPrescription> {
        const response = await this.getPrescriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get UnitOfMedicine by ID
     * Get a UnitOfMedicine entity by ID
     */
    async getUnitOfMedicineRaw(requestParameters: GetUnitOfMedicineRequest): Promise<runtime.ApiResponse<EntUnitOfMedicine>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUnitOfMedicine.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/UnitOfMedicine/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUnitOfMedicineFromJSON(jsonValue));
    }

    /**
     * get UnitOfMedicine by ID
     * Get a UnitOfMedicine entity by ID
     */
    async getUnitOfMedicine(requestParameters: GetUnitOfMedicineRequest): Promise<EntUnitOfMedicine> {
        const response = await this.getUnitOfMedicineRaw(requestParameters);
        return await response.value();
    }

    /**
     * list annotation entities
     * List annotation entities
     */
    async listAnnotationRaw(requestParameters: ListAnnotationRequest): Promise<runtime.ApiResponse<Array<EntAnnotation>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/annotations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntAnnotationFromJSON));
    }

    /**
     * list annotation entities
     * List annotation entities
     */
    async listAnnotation(requestParameters: ListAnnotationRequest): Promise<Array<EntAnnotation>> {
        const response = await this.listAnnotationRaw(requestParameters);
        return await response.value();
    }

    /**
     * list bill entities
     * List bill entities
     */
    async listBillRaw(requestParameters: ListBillRequest): Promise<runtime.ApiResponse<Array<EntBill>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bills`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBillFromJSON));
    }

    /**
     * list bill entities
     * List bill entities
     */
    async listBill(requestParameters: ListBillRequest): Promise<Array<EntBill>> {
        const response = await this.listBillRaw(requestParameters);
        return await response.value();
    }

    /**
     * list company entities
     * List company entities
     */
    async listCompanyRaw(requestParameters: ListCompanyRequest): Promise<runtime.ApiResponse<Array<EntCompany>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/companys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCompanyFromJSON));
    }

    /**
     * list company entities
     * List company entities
     */
    async listCompany(requestParameters: ListCompanyRequest): Promise<Array<EntCompany>> {
        const response = await this.listCompanyRaw(requestParameters);
        return await response.value();
    }

    /**
     * list dispensemedicine entities
     * List dispensemedicine entities
     */
    async listDispensemedicineRaw(requestParameters: ListDispensemedicineRequest): Promise<runtime.ApiResponse<Array<EntDispenseMedicine>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dispensemedicines`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDispenseMedicineFromJSON));
    }

    /**
     * list dispensemedicine entities
     * List dispensemedicine entities
     */
    async listDispensemedicine(requestParameters: ListDispensemedicineRequest): Promise<Array<EntDispenseMedicine>> {
        const response = await this.listDispensemedicineRaw(requestParameters);
        return await response.value();
    }

    /**
     * list Doctor entities
     * List Doctor entities
     */
    async listDoctorRaw(requestParameters: ListDoctorRequest): Promise<runtime.ApiResponse<Array<EntDoctor>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Doctor`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDoctorFromJSON));
    }

    /**
     * list Doctor entities
     * List Doctor entities
     */
    async listDoctor(requestParameters: ListDoctorRequest): Promise<Array<EntDoctor>> {
        const response = await this.listDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * list DrugAllergy entities
     * List DrugAllergy entities
     */
    async listDrugAllergyRaw(requestParameters: ListDrugAllergyRequest): Promise<runtime.ApiResponse<Array<EntDrugAllergy>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drugallergys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDrugAllergyFromJSON));
    }

    /**
     * list DrugAllergy entities
     * List DrugAllergy entities
     */
    async listDrugAllergy(requestParameters: ListDrugAllergyRequest): Promise<Array<EntDrugAllergy>> {
        const response = await this.listDrugAllergyRaw(requestParameters);
        return await response.value();
    }

    /**
     * list LevelOfDangerous entities
     * List LevelOfDangerous entities
     */
    async listLevelOfDangerousRaw(requestParameters: ListLevelOfDangerousRequest): Promise<runtime.ApiResponse<Array<EntLevelOfDangerous>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/LevelOfDangerous`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntLevelOfDangerousFromJSON));
    }

    /**
     * list LevelOfDangerous entities
     * List LevelOfDangerous entities
     */
    async listLevelOfDangerous(requestParameters: ListLevelOfDangerousRequest): Promise<Array<EntLevelOfDangerous>> {
        const response = await this.listLevelOfDangerousRaw(requestParameters);
        return await response.value();
    }

    /**
     * list Medicine entities
     * List Medicine entities
     */
    async listMedicineRaw(requestParameters: ListMedicineRequest): Promise<runtime.ApiResponse<Array<EntMedicine>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Medicine`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntMedicineFromJSON));
    }

    /**
     * list Medicine entities
     * List Medicine entities
     */
    async listMedicine(requestParameters: ListMedicineRequest): Promise<Array<EntMedicine>> {
        const response = await this.listMedicineRaw(requestParameters);
        return await response.value();
    }

    /**
     * list MedicineType entities
     * List MedicineType entities
     */
    async listMedicineTypeRaw(requestParameters: ListMedicineTypeRequest): Promise<runtime.ApiResponse<Array<EntMedicineType>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/MedicineType`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntMedicineTypeFromJSON));
    }

    /**
     * list MedicineType entities
     * List MedicineType entities
     */
    async listMedicineType(requestParameters: ListMedicineTypeRequest): Promise<Array<EntMedicineType>> {
        const response = await this.listMedicineTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list order entities
     * List order entities
     */
    async listOrderRaw(requestParameters: ListOrderRequest): Promise<runtime.ApiResponse<Array<EntOrder>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/orders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntOrderFromJSON));
    }

    /**
     * list order entities
     * List order entities
     */
    async listOrder(requestParameters: ListOrderRequest): Promise<Array<EntOrder>> {
        const response = await this.listOrderRaw(requestParameters);
        return await response.value();
    }

    /**
     * list PatientInfo entities
     * List PatientInfo entities
     */
    async listPatientInfoRaw(requestParameters: ListPatientInfoRequest): Promise<runtime.ApiResponse<Array<EntPatientInfo>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientinfos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPatientInfoFromJSON));
    }

    /**
     * list PatientInfo entities
     * List PatientInfo entities
     */
    async listPatientInfo(requestParameters: ListPatientInfoRequest): Promise<Array<EntPatientInfo>> {
        const response = await this.listPatientInfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * list payment entities
     * List payment entities
     */
    async listPaymentRaw(requestParameters: ListPaymentRequest): Promise<runtime.ApiResponse<Array<EntPayment>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/payments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPaymentFromJSON));
    }

    /**
     * list payment entities
     * List payment entities
     */
    async listPayment(requestParameters: ListPaymentRequest): Promise<Array<EntPayment>> {
        const response = await this.listPaymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list pharmacist entities
     * List pharmacist entities
     */
    async listPharmacistRaw(requestParameters: ListPharmacistRequest): Promise<runtime.ApiResponse<Array<EntPharmacist>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pharmacists`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPharmacistFromJSON));
    }

    /**
     * list pharmacist entities
     * List pharmacist entities
     */
    async listPharmacist(requestParameters: ListPharmacistRequest): Promise<Array<EntPharmacist>> {
        const response = await this.listPharmacistRaw(requestParameters);
        return await response.value();
    }

    /**
     * list positioninpharmacist entities
     * List positioninpharmacist entities
     */
    async listPositioninpharmacistRaw(requestParameters: ListPositioninpharmacistRequest): Promise<runtime.ApiResponse<Array<EntPositionInPharmacist>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/positioninpharmacists`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPositionInPharmacistFromJSON));
    }

    /**
     * list positioninpharmacist entities
     * List positioninpharmacist entities
     */
    async listPositioninpharmacist(requestParameters: ListPositioninpharmacistRequest): Promise<Array<EntPositionInPharmacist>> {
        const response = await this.listPositioninpharmacistRaw(requestParameters);
        return await response.value();
    }

    /**
     * list Prescription entities
     * List Prescription entities
     */
    async listPrescriptionRaw(requestParameters: ListPrescriptionRequest): Promise<runtime.ApiResponse<Array<EntPrescription>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Prescription`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPrescriptionFromJSON));
    }

    /**
     * list Prescription entities
     * List Prescription entities
     */
    async listPrescription(requestParameters: ListPrescriptionRequest): Promise<Array<EntPrescription>> {
        const response = await this.listPrescriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * list UnitOfMedicine entities
     * List UnitOfMedicine entities
     */
    async listUnitOfMedicineRaw(requestParameters: ListUnitOfMedicineRequest): Promise<runtime.ApiResponse<Array<EntUnitOfMedicine>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/UnitOfMedicine`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUnitOfMedicineFromJSON));
    }

    /**
     * list UnitOfMedicine entities
     * List UnitOfMedicine entities
     */
    async listUnitOfMedicine(requestParameters: ListUnitOfMedicineRequest): Promise<Array<EntUnitOfMedicine>> {
        const response = await this.listUnitOfMedicineRaw(requestParameters);
        return await response.value();
    }

    /**
     * update annotation by ID
     * Update a annotation entity by ID
     */
    async updateAnnotationRaw(requestParameters: UpdateAnnotationRequest): Promise<runtime.ApiResponse<EntAnnotation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAnnotation.');
        }

        if (requestParameters.annotation === null || requestParameters.annotation === undefined) {
            throw new runtime.RequiredError('annotation','Required parameter requestParameters.annotation was null or undefined when calling updateAnnotation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/annotations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntAnnotationToJSON(requestParameters.annotation),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAnnotationFromJSON(jsonValue));
    }

    /**
     * update annotation by ID
     * Update a annotation entity by ID
     */
    async updateAnnotation(requestParameters: UpdateAnnotationRequest): Promise<EntAnnotation> {
        const response = await this.updateAnnotationRaw(requestParameters);
        return await response.value();
    }

    /**
     * update bill by ID
     * Update a bill entity by ID
     */
    async updateBillRaw(requestParameters: UpdateBillRequest): Promise<runtime.ApiResponse<EntBill>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateBill.');
        }

        if (requestParameters.bill === null || requestParameters.bill === undefined) {
            throw new runtime.RequiredError('bill','Required parameter requestParameters.bill was null or undefined when calling updateBill.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bills/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntBillToJSON(requestParameters.bill),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBillFromJSON(jsonValue));
    }

    /**
     * update bill by ID
     * Update a bill entity by ID
     */
    async updateBill(requestParameters: UpdateBillRequest): Promise<EntBill> {
        const response = await this.updateBillRaw(requestParameters);
        return await response.value();
    }

    /**
     * update dispensemedicine by ID
     * Update a dispensemedicine entity by ID
     */
    async updateDispensemedicineRaw(requestParameters: UpdateDispensemedicineRequest): Promise<runtime.ApiResponse<EntDispenseMedicine>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDispensemedicine.');
        }

        if (requestParameters.dispensemedicine === null || requestParameters.dispensemedicine === undefined) {
            throw new runtime.RequiredError('dispensemedicine','Required parameter requestParameters.dispensemedicine was null or undefined when calling updateDispensemedicine.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/dispensemedicines/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDispenseMedicineToJSON(requestParameters.dispensemedicine),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDispenseMedicineFromJSON(jsonValue));
    }

    /**
     * update dispensemedicine by ID
     * Update a dispensemedicine entity by ID
     */
    async updateDispensemedicine(requestParameters: UpdateDispensemedicineRequest): Promise<EntDispenseMedicine> {
        const response = await this.updateDispensemedicineRaw(requestParameters);
        return await response.value();
    }

    /**
     * update Doctor by ID
     * Update a Doctor entity by ID
     */
    async updateDoctorRaw(requestParameters: UpdateDoctorRequest): Promise<runtime.ApiResponse<EntDoctor>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDoctor.');
        }

        if (requestParameters.doctor === null || requestParameters.doctor === undefined) {
            throw new runtime.RequiredError('doctor','Required parameter requestParameters.doctor was null or undefined when calling updateDoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Doctor/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDoctorToJSON(requestParameters.doctor),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDoctorFromJSON(jsonValue));
    }

    /**
     * update Doctor by ID
     * Update a Doctor entity by ID
     */
    async updateDoctor(requestParameters: UpdateDoctorRequest): Promise<EntDoctor> {
        const response = await this.updateDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * update DrugAllergy by ID
     * Update a DrugAllergy entity by ID
     */
    async updateDrugAllergyRaw(requestParameters: UpdateDrugAllergyRequest): Promise<runtime.ApiResponse<EntDrugAllergy>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDrugAllergy.');
        }

        if (requestParameters.drugallergy === null || requestParameters.drugallergy === undefined) {
            throw new runtime.RequiredError('drugallergy','Required parameter requestParameters.drugallergy was null or undefined when calling updateDrugAllergy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/drugallergys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDrugAllergyToJSON(requestParameters.drugallergy),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDrugAllergyFromJSON(jsonValue));
    }

    /**
     * update DrugAllergy by ID
     * Update a DrugAllergy entity by ID
     */
    async updateDrugAllergy(requestParameters: UpdateDrugAllergyRequest): Promise<EntDrugAllergy> {
        const response = await this.updateDrugAllergyRaw(requestParameters);
        return await response.value();
    }

    /**
     * update LevelOfDangerous by ID
     * Update a LevelOfDangerous entity by ID
     */
    async updateLevelOfDangerousRaw(requestParameters: UpdateLevelOfDangerousRequest): Promise<runtime.ApiResponse<EntLevelOfDangerous>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateLevelOfDangerous.');
        }

        if (requestParameters.levelOfDangerous === null || requestParameters.levelOfDangerous === undefined) {
            throw new runtime.RequiredError('levelOfDangerous','Required parameter requestParameters.levelOfDangerous was null or undefined when calling updateLevelOfDangerous.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/LevelOfDangerous/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntLevelOfDangerousToJSON(requestParameters.levelOfDangerous),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntLevelOfDangerousFromJSON(jsonValue));
    }

    /**
     * update LevelOfDangerous by ID
     * Update a LevelOfDangerous entity by ID
     */
    async updateLevelOfDangerous(requestParameters: UpdateLevelOfDangerousRequest): Promise<EntLevelOfDangerous> {
        const response = await this.updateLevelOfDangerousRaw(requestParameters);
        return await response.value();
    }

    /**
     * update MedicineType by ID
     * Update a MedicineType entity by ID
     */
    async updateMedicineTypeRaw(requestParameters: UpdateMedicineTypeRequest): Promise<runtime.ApiResponse<EntMedicineType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMedicineType.');
        }

        if (requestParameters.medicineType === null || requestParameters.medicineType === undefined) {
            throw new runtime.RequiredError('medicineType','Required parameter requestParameters.medicineType was null or undefined when calling updateMedicineType.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/MedicineType/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntMedicineTypeToJSON(requestParameters.medicineType),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMedicineTypeFromJSON(jsonValue));
    }

    /**
     * update MedicineType by ID
     * Update a MedicineType entity by ID
     */
    async updateMedicineType(requestParameters: UpdateMedicineTypeRequest): Promise<EntMedicineType> {
        const response = await this.updateMedicineTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update PatientInfo by ID
     * Update a PatientInfo entity by ID
     */
    async updatePatientInfoRaw(requestParameters: UpdatePatientInfoRequest): Promise<runtime.ApiResponse<EntPatientInfo>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePatientInfo.');
        }

        if (requestParameters.patientInfo === null || requestParameters.patientInfo === undefined) {
            throw new runtime.RequiredError('patientInfo','Required parameter requestParameters.patientInfo was null or undefined when calling updatePatientInfo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patientoinfos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientInfoToJSON(requestParameters.patientInfo),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientInfoFromJSON(jsonValue));
    }

    /**
     * update PatientInfo by ID
     * Update a PatientInfo entity by ID
     */
    async updatePatientInfo(requestParameters: UpdatePatientInfoRequest): Promise<EntPatientInfo> {
        const response = await this.updatePatientInfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * update payment by ID
     * Update a payment entity by ID
     */
    async updatePaymentRaw(requestParameters: UpdatePaymentRequest): Promise<runtime.ApiResponse<EntPayment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePayment.');
        }

        if (requestParameters.payment === null || requestParameters.payment === undefined) {
            throw new runtime.RequiredError('payment','Required parameter requestParameters.payment was null or undefined when calling updatePayment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/payments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPaymentToJSON(requestParameters.payment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPaymentFromJSON(jsonValue));
    }

    /**
     * update payment by ID
     * Update a payment entity by ID
     */
    async updatePayment(requestParameters: UpdatePaymentRequest): Promise<EntPayment> {
        const response = await this.updatePaymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * update pharmacist by ID
     * Update a pharmacist entity by ID
     */
    async updatePharmacistRaw(requestParameters: UpdatePharmacistRequest): Promise<runtime.ApiResponse<EntPharmacist>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePharmacist.');
        }

        if (requestParameters.pharmacist === null || requestParameters.pharmacist === undefined) {
            throw new runtime.RequiredError('pharmacist','Required parameter requestParameters.pharmacist was null or undefined when calling updatePharmacist.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/pharmacists/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPharmacistToJSON(requestParameters.pharmacist),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPharmacistFromJSON(jsonValue));
    }

    /**
     * update pharmacist by ID
     * Update a pharmacist entity by ID
     */
    async updatePharmacist(requestParameters: UpdatePharmacistRequest): Promise<EntPharmacist> {
        const response = await this.updatePharmacistRaw(requestParameters);
        return await response.value();
    }

    /**
     * update positioninpharmacist by ID
     * Update a positioninpharmacist entity by ID
     */
    async updatePositioninpharmacistRaw(requestParameters: UpdatePositioninpharmacistRequest): Promise<runtime.ApiResponse<EntPositionInPharmacist>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePositioninpharmacist.');
        }

        if (requestParameters.positioninpharmacist === null || requestParameters.positioninpharmacist === undefined) {
            throw new runtime.RequiredError('positioninpharmacist','Required parameter requestParameters.positioninpharmacist was null or undefined when calling updatePositioninpharmacist.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/positioninpharmacists/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPositionInPharmacistToJSON(requestParameters.positioninpharmacist),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPositionInPharmacistFromJSON(jsonValue));
    }

    /**
     * update positioninpharmacist by ID
     * Update a positioninpharmacist entity by ID
     */
    async updatePositioninpharmacist(requestParameters: UpdatePositioninpharmacistRequest): Promise<EntPositionInPharmacist> {
        const response = await this.updatePositioninpharmacistRaw(requestParameters);
        return await response.value();
    }

    /**
     * update Prescription by ID
     * Update a Prescription entity by ID
     */
    async updatePrescriptionRaw(requestParameters: UpdatePrescriptionRequest): Promise<runtime.ApiResponse<EntPrescription>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePrescription.');
        }

        if (requestParameters.prescription === null || requestParameters.prescription === undefined) {
            throw new runtime.RequiredError('prescription','Required parameter requestParameters.prescription was null or undefined when calling updatePrescription.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Prescription/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPrescriptionToJSON(requestParameters.prescription),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPrescriptionFromJSON(jsonValue));
    }

    /**
     * update Prescription by ID
     * Update a Prescription entity by ID
     */
    async updatePrescription(requestParameters: UpdatePrescriptionRequest): Promise<EntPrescription> {
        const response = await this.updatePrescriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * update UnitOfMedicine by ID
     * Update a UnitOfMedicine entity by ID
     */
    async updateUnitOfMedicineRaw(requestParameters: UpdateUnitOfMedicineRequest): Promise<runtime.ApiResponse<EntUnitOfMedicine>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUnitOfMedicine.');
        }

        if (requestParameters.unitOfMedicine === null || requestParameters.unitOfMedicine === undefined) {
            throw new runtime.RequiredError('unitOfMedicine','Required parameter requestParameters.unitOfMedicine was null or undefined when calling updateUnitOfMedicine.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/UnitOfMedicine/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntUnitOfMedicineToJSON(requestParameters.unitOfMedicine),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUnitOfMedicineFromJSON(jsonValue));
    }

    /**
     * update UnitOfMedicine by ID
     * Update a UnitOfMedicine entity by ID
     */
    async updateUnitOfMedicine(requestParameters: UpdateUnitOfMedicineRequest): Promise<EntUnitOfMedicine> {
        const response = await this.updateUnitOfMedicineRaw(requestParameters);
        return await response.value();
    }

}
